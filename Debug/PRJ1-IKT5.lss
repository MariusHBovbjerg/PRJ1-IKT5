
PRJ1-IKT5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000033a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  0000033a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001170  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e15  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ae  00000000  00000000  00002411  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  000029c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000769  00000000  00000000  00002b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000312  00000000  00000000  000032d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000035e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	84 c0       	rjmp	.+264    	; 0x116 <__vector_3>
   e:	00 00       	nop
  10:	93 c0       	rjmp	.+294    	; 0x138 <__vector_4>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	8a c0       	rjmp	.+276    	; 0x15a <__vector_17>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 30       	cpi	r26, 0x02	; 2
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	47 d0       	rcall	.+142    	; 0x194 <main>
 106:	dd c0       	rjmp	.+442    	; 0x2c2 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <_Z11initCounterv>:
#include "Counter.h"
#include <avr/interrupt.h>


void initCounter(){
	EIMSK = 0b00001100; // INT 2 og INT 3 - BEN 45 og 46 respectively.
 10a:	8c e0       	ldi	r24, 0x0C	; 12
 10c:	8d bb       	out	0x1d, r24	; 29
	EICRA = 0b11110000; // INT 2 og INT 3 both rising edge.
 10e:	80 ef       	ldi	r24, 0xF0	; 240
 110:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
 114:	08 95       	ret

00000116 <__vector_3>:
#include "BLightDriver.h"

volatile unsigned char counter = 0;

volatile unsigned char MotorMode = 0;
ISR(INT2_vect){ //On rising edge, count + 1
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
	counter++;
 122:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <counter>
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <counter>
}
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <__vector_4>:

ISR(INT3_vect){ //On rising edge, count + 1
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	8f 93       	push	r24
	counter++;
 144:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <counter>
 148:	8f 5f       	subi	r24, 0xFF	; 255
 14a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <counter>
}
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_17>:

ISR(TIMER1_COMPA_vect){
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
	switch(MotorMode){
 166:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	31 f0       	breq	.+12     	; 0x17a <__vector_17+0x20>
 16e:	18 f0       	brcs	.+6      	; 0x176 <__vector_17+0x1c>
 170:	82 30       	cpi	r24, 0x02	; 2
 172:	31 f0       	breq	.+12     	; 0x180 <__vector_17+0x26>
 174:	08 c0       	rjmp	.+16     	; 0x186 <__vector_17+0x2c>
		case 0:
			PORTA = 0b00000000;
 176:	12 b8       	out	0x02, r1	; 2
		break;
 178:	07 c0       	rjmp	.+14     	; 0x188 <__vector_17+0x2e>
		case 1:
			PORTA = 0b00000001;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	82 b9       	out	0x02, r24	; 2
		break;
 17e:	04 c0       	rjmp	.+8      	; 0x188 <__vector_17+0x2e>
		case 2:
			PORTA = 0b00000010;
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	82 b9       	out	0x02, r24	; 2
		break;
 184:	01 c0       	rjmp	.+2      	; 0x188 <__vector_17+0x2e>
		default:
			PORTA = 0b00000000;
 186:	12 b8       	out	0x02, r1	; 2
		break;
			
	}
}
 188:	8f 91       	pop	r24
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <main>:
    //{
		//
		//
    //}
	// Initialize UART: Baud = 9600, 8 data bits, No Parity
	sei();
 194:	78 94       	sei
	initCounter();
 196:	b9 df       	rcall	.-142    	; 0x10a <_Z11initCounterv>
	initMotor();
 198:	08 d0       	rcall	.+16     	; 0x1aa <_Z9initMotorv>
 19a:	20 e0       	ldi	r18, 0x00	; 0
	InitUART(9600,8,false);
 19c:	48 e0       	ldi	r20, 0x08	; 8
 19e:	60 e8       	ldi	r22, 0x80	; 128
 1a0:	75 e2       	ldi	r23, 0x25	; 37
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	14 d0       	rcall	.+40     	; 0x1d0 <_Z8InitUARTmhb>
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <main+0x14>

000001aa <_Z9initMotorv>:
 1aa:	82 e2       	ldi	r24, 0x22	; 34
#include "MotorDriver.h"
#include <stdio.h>
#include <avr/io.h>

void initMotor(){
	TCCR1A = 0b00100010; // Set compare mode for OC1A
 1ac:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0b00011101; // Set Mode 14, FAST PWM TOP = ICR1 & 1024 prescaler
 1b0:	8d e1       	ldi	r24, 0x1D	; 29
 1b2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	ICR1 = 156; // TOP value
 1b6:	8c e9       	ldi	r24, 0x9C	; 156
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 1be:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	OCR1A = 0; // Compare value, 0 = 0% duty cycle, 156 = 100% duty cycle
 1c2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 1c6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	DDRA = 0xFF; // Make pin a ports outputs, so we can trigger the H-Bridge.
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	81 b9       	out	0x01, r24	; 1
 1ce:	08 95       	ret

000001d0 <_Z8InitUARTmhb>:
    No Parity.
    Baud rate = 9600.
    Data bits = 8.
*************************************************************************/
void InitUART(unsigned long BAUD, unsigned char DataBit, bool Rx_Int)
{
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
   if(Rx_Int){
 1d4:	22 23       	and	r18, r18
 1d6:	29 f0       	breq	.+10     	; 0x1e2 <_Z8InitUARTmhb+0x12>
	  UCSR0B = 0b10011000; 
 1d8:	28 e9       	ldi	r18, 0x98	; 152
 1da:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	  sei();
 1de:	78 94       	sei
 1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <_Z8InitUARTmhb+0x18>
   }else{
	   UCSR0B = 0b00011000;
 1e2:	28 e1       	ldi	r18, 0x18	; 24
 1e4:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
   }
   if((BAUD >= 300) && (BAUD <= 115200) && (DataBit >= 5) && (DataBit <= 8)){
 1e8:	8b 01       	movw	r16, r22
 1ea:	9c 01       	movw	r18, r24
 1ec:	0c 52       	subi	r16, 0x2C	; 44
 1ee:	11 40       	sbci	r17, 0x01	; 1
 1f0:	21 09       	sbc	r18, r1
 1f2:	31 09       	sbc	r19, r1
 1f4:	05 3d       	cpi	r16, 0xD5	; 213
 1f6:	10 4c       	sbci	r17, 0xC0	; 192
 1f8:	21 40       	sbci	r18, 0x01	; 1
 1fa:	31 05       	cpc	r19, r1
 1fc:	08 f5       	brcc	.+66     	; 0x240 <_Z8InitUARTmhb+0x70>
 1fe:	2b ef       	ldi	r18, 0xFB	; 251
 200:	24 0f       	add	r18, r20
 202:	24 30       	cpi	r18, 0x04	; 4
 204:	e8 f4       	brcc	.+58     	; 0x240 <_Z8InitUARTmhb+0x70>
	   switch(DataBit){
 206:	46 30       	cpi	r20, 0x06	; 6
 208:	61 f0       	breq	.+24     	; 0x222 <_Z8InitUARTmhb+0x52>
 20a:	18 f4       	brcc	.+6      	; 0x212 <_Z8InitUARTmhb+0x42>
 20c:	45 30       	cpi	r20, 0x05	; 5
 20e:	31 f0       	breq	.+12     	; 0x21c <_Z8InitUARTmhb+0x4c>
 210:	14 c0       	rjmp	.+40     	; 0x23a <_Z8InitUARTmhb+0x6a>
 212:	47 30       	cpi	r20, 0x07	; 7
 214:	51 f0       	breq	.+20     	; 0x22a <_Z8InitUARTmhb+0x5a>
 216:	48 30       	cpi	r20, 0x08	; 8
 218:	61 f0       	breq	.+24     	; 0x232 <_Z8InitUARTmhb+0x62>
 21a:	0f c0       	rjmp	.+30     	; 0x23a <_Z8InitUARTmhb+0x6a>
		   case 5:
			   UCSR0C = 0b00000000;
 21c:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
			   break;
 220:	0f c0       	rjmp	.+30     	; 0x240 <_Z8InitUARTmhb+0x70>
		   
		   case 6:
			   UCSR0C = 0b00000010;
 222:	22 e0       	ldi	r18, 0x02	; 2
 224:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
			   break;
 228:	0b c0       	rjmp	.+22     	; 0x240 <_Z8InitUARTmhb+0x70>
		   
		   case 7:
			   UCSR0C = 0b00000100;
 22a:	24 e0       	ldi	r18, 0x04	; 4
 22c:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
			   break;
 230:	07 c0       	rjmp	.+14     	; 0x240 <_Z8InitUARTmhb+0x70>
		   
		   case 8:
			   UCSR0C = 0b00000110;
 232:	26 e0       	ldi	r18, 0x06	; 6
 234:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
			   break;
 238:	03 c0       	rjmp	.+6      	; 0x240 <_Z8InitUARTmhb+0x70>
		   
		   default:
			   UCSR0C = 0b00000110;
 23a:	26 e0       	ldi	r18, 0x06	; 6
 23c:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
			   break;
	   }
	}
	UBRR0L = ((F_CPU/(16*BAUD))-1);
 240:	dc 01       	movw	r26, r24
 242:	cb 01       	movw	r24, r22
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	aa 1f       	adc	r26, r26
 24a:	bb 1f       	adc	r27, r27
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	aa 1f       	adc	r26, r26
 252:	bb 1f       	adc	r27, r27
 254:	9c 01       	movw	r18, r24
 256:	ad 01       	movw	r20, r26
 258:	22 0f       	add	r18, r18
 25a:	33 1f       	adc	r19, r19
 25c:	44 1f       	adc	r20, r20
 25e:	55 1f       	adc	r21, r21
 260:	22 0f       	add	r18, r18
 262:	33 1f       	adc	r19, r19
 264:	44 1f       	adc	r20, r20
 266:	55 1f       	adc	r21, r21
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	74 e2       	ldi	r23, 0x24	; 36
 26c:	84 ef       	ldi	r24, 0xF4	; 244
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	06 d0       	rcall	.+12     	; 0x27e <__udivmodsi4>
 272:	21 50       	subi	r18, 0x01	; 1
 274:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
}
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	08 95       	ret

0000027e <__udivmodsi4>:
 27e:	a1 e2       	ldi	r26, 0x21	; 33
 280:	1a 2e       	mov	r1, r26
 282:	aa 1b       	sub	r26, r26
 284:	bb 1b       	sub	r27, r27
 286:	fd 01       	movw	r30, r26
 288:	0d c0       	rjmp	.+26     	; 0x2a4 <__udivmodsi4_ep>

0000028a <__udivmodsi4_loop>:
 28a:	aa 1f       	adc	r26, r26
 28c:	bb 1f       	adc	r27, r27
 28e:	ee 1f       	adc	r30, r30
 290:	ff 1f       	adc	r31, r31
 292:	a2 17       	cp	r26, r18
 294:	b3 07       	cpc	r27, r19
 296:	e4 07       	cpc	r30, r20
 298:	f5 07       	cpc	r31, r21
 29a:	20 f0       	brcs	.+8      	; 0x2a4 <__udivmodsi4_ep>
 29c:	a2 1b       	sub	r26, r18
 29e:	b3 0b       	sbc	r27, r19
 2a0:	e4 0b       	sbc	r30, r20
 2a2:	f5 0b       	sbc	r31, r21

000002a4 <__udivmodsi4_ep>:
 2a4:	66 1f       	adc	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	88 1f       	adc	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	1a 94       	dec	r1
 2ae:	69 f7       	brne	.-38     	; 0x28a <__udivmodsi4_loop>
 2b0:	60 95       	com	r22
 2b2:	70 95       	com	r23
 2b4:	80 95       	com	r24
 2b6:	90 95       	com	r25
 2b8:	9b 01       	movw	r18, r22
 2ba:	ac 01       	movw	r20, r24
 2bc:	bd 01       	movw	r22, r26
 2be:	cf 01       	movw	r24, r30
 2c0:	08 95       	ret

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
