
PRJ1-IKT5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00001052  000010e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001052  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800202  00800202  000010e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001118  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023f4  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fbb  00000000  00000000  000036ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e3a  00000000  00000000  00004667  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  000054a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000900  00000000  00000000  00005798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ece  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00006f66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	9b c0       	rjmp	.+310    	; 0x13c <__bad_interrupt>
       6:	00 00       	nop
       8:	99 c0       	rjmp	.+306    	; 0x13c <__bad_interrupt>
       a:	00 00       	nop
       c:	97 c0       	rjmp	.+302    	; 0x13c <__bad_interrupt>
       e:	00 00       	nop
      10:	95 c0       	rjmp	.+298    	; 0x13c <__bad_interrupt>
      12:	00 00       	nop
      14:	f5 c0       	rjmp	.+490    	; 0x200 <__vector_5>
      16:	00 00       	nop
      18:	3c c1       	rjmp	.+632    	; 0x292 <__vector_6>
      1a:	00 00       	nop
      1c:	8f c0       	rjmp	.+286    	; 0x13c <__bad_interrupt>
      1e:	00 00       	nop
      20:	8d c0       	rjmp	.+282    	; 0x13c <__bad_interrupt>
      22:	00 00       	nop
      24:	8b c0       	rjmp	.+278    	; 0x13c <__bad_interrupt>
      26:	00 00       	nop
      28:	89 c0       	rjmp	.+274    	; 0x13c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	87 c0       	rjmp	.+270    	; 0x13c <__bad_interrupt>
      2e:	00 00       	nop
      30:	85 c0       	rjmp	.+266    	; 0x13c <__bad_interrupt>
      32:	00 00       	nop
      34:	83 c0       	rjmp	.+262    	; 0x13c <__bad_interrupt>
      36:	00 00       	nop
      38:	81 c0       	rjmp	.+258    	; 0x13c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7f c0       	rjmp	.+254    	; 0x13c <__bad_interrupt>
      3e:	00 00       	nop
      40:	7d c0       	rjmp	.+250    	; 0x13c <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c1       	rjmp	.+734    	; 0x324 <__vector_17>
      46:	00 00       	nop
      48:	79 c0       	rjmp	.+242    	; 0x13c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	77 c0       	rjmp	.+238    	; 0x13c <__bad_interrupt>
      4e:	00 00       	nop
      50:	75 c0       	rjmp	.+234    	; 0x13c <__bad_interrupt>
      52:	00 00       	nop
      54:	73 c0       	rjmp	.+230    	; 0x13c <__bad_interrupt>
      56:	00 00       	nop
      58:	71 c0       	rjmp	.+226    	; 0x13c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6f c0       	rjmp	.+222    	; 0x13c <__bad_interrupt>
      5e:	00 00       	nop
      60:	6d c0       	rjmp	.+218    	; 0x13c <__bad_interrupt>
      62:	00 00       	nop
      64:	6b c0       	rjmp	.+214    	; 0x13c <__bad_interrupt>
      66:	00 00       	nop
      68:	69 c0       	rjmp	.+210    	; 0x13c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	67 c0       	rjmp	.+206    	; 0x13c <__bad_interrupt>
      6e:	00 00       	nop
      70:	65 c0       	rjmp	.+202    	; 0x13c <__bad_interrupt>
      72:	00 00       	nop
      74:	63 c0       	rjmp	.+198    	; 0x13c <__bad_interrupt>
      76:	00 00       	nop
      78:	61 c0       	rjmp	.+194    	; 0x13c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5f c0       	rjmp	.+190    	; 0x13c <__bad_interrupt>
      7e:	00 00       	nop
      80:	7b c1       	rjmp	.+758    	; 0x378 <__vector_32>
      82:	00 00       	nop
      84:	5b c0       	rjmp	.+182    	; 0x13c <__bad_interrupt>
      86:	00 00       	nop
      88:	59 c0       	rjmp	.+178    	; 0x13c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	57 c0       	rjmp	.+174    	; 0x13c <__bad_interrupt>
      8e:	00 00       	nop
      90:	55 c0       	rjmp	.+170    	; 0x13c <__bad_interrupt>
      92:	00 00       	nop
      94:	53 c0       	rjmp	.+166    	; 0x13c <__bad_interrupt>
      96:	00 00       	nop
      98:	51 c0       	rjmp	.+162    	; 0x13c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4f c0       	rjmp	.+158    	; 0x13c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4d c0       	rjmp	.+154    	; 0x13c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4b c0       	rjmp	.+150    	; 0x13c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	49 c0       	rjmp	.+146    	; 0x13c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	47 c0       	rjmp	.+142    	; 0x13c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	45 c0       	rjmp	.+138    	; 0x13c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	43 c0       	rjmp	.+134    	; 0x13c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	41 c0       	rjmp	.+130    	; 0x13c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3f c0       	rjmp	.+126    	; 0x13c <__bad_interrupt>
      be:	00 00       	nop
      c0:	3d c0       	rjmp	.+122    	; 0x13c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3b c0       	rjmp	.+118    	; 0x13c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	39 c0       	rjmp	.+114    	; 0x13c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	37 c0       	rjmp	.+110    	; 0x13c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	35 c0       	rjmp	.+106    	; 0x13c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	33 c0       	rjmp	.+102    	; 0x13c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	31 c0       	rjmp	.+98     	; 0x13c <__bad_interrupt>
      da:	00 00       	nop
      dc:	2f c0       	rjmp	.+94     	; 0x13c <__bad_interrupt>
      de:	00 00       	nop
      e0:	2d c0       	rjmp	.+90     	; 0x13c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	33 02       	muls	r19, r19
      e6:	6f 02       	muls	r22, r31
      e8:	98 02       	muls	r25, r24
      ea:	c3 02       	muls	r28, r19
      ec:	ee 02       	muls	r30, r30
      ee:	19 03       	fmul	r17, r17
      f0:	45 03       	mulsu	r20, r21
      f2:	7a 03       	fmul	r23, r18
      f4:	a4 03       	fmuls	r18, r20
      f6:	ae 03       	fmulsu	r18, r22
      f8:	e9 03       	fmulsu	r22, r17
      fa:	20 04       	cpc	r2, r0
      fc:	6d 04       	cpc	r6, r13

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	e2 e5       	ldi	r30, 0x52	; 82
     116:	f0 e1       	ldi	r31, 0x10	; 16
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a2 30       	cpi	r26, 0x02	; 2
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	22 e0       	ldi	r18, 0x02	; 2
     12a:	a2 e0       	ldi	r26, 0x02	; 2
     12c:	b2 e0       	ldi	r27, 0x02	; 2
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	a6 30       	cpi	r26, 0x06	; 6
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	46 d1       	rcall	.+652    	; 0x3c6 <main>
     13a:	89 c7       	rjmp	.+3858   	; 0x104e <_exit>

0000013c <__bad_interrupt>:
     13c:	61 cf       	rjmp	.-318    	; 0x0 <__vectors>

0000013e <_Z10bLightInitv>:
#include "BLightDriver.h"
#include <stdio.h>
#include <avr/io.h>

void bLightInit(void){
	DDRC = 0xFF;
     13e:	8f ef       	ldi	r24, 0xFF	; 255
     140:	87 b9       	out	0x07, r24	; 7
	TCCR3A = (0<<COM3A1)|(1<<COM3A0)|(0<<WGM31)|(1<<WGM30); // Set compare mode for OCR1A
     142:	81 e4       	ldi	r24, 0x41	; 65
     144:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = (0<<WGM33)|(0<<WGM32)|(1<<CS32)|(0<<CS31)|(0<<CS30); // Set Mode 1, PWM Phase correct 8-bit & 256 prescaler
     148:	84 e0       	ldi	r24, 0x04	; 4
     14a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	TIMSK3 = 0b00000010;
     14e:	82 e0       	ldi	r24, 0x02	; 2
     150:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
	OCR3A = 0;
     154:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     158:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     15c:	08 95       	ret

0000015e <_Z12bLightTogglev>:
}

void bLightToggle(void){
	
	PINC |= 0b00000101; // ben 35 og 37
     15e:	86 b1       	in	r24, 0x06	; 6
     160:	85 60       	ori	r24, 0x05	; 5
     162:	86 b9       	out	0x06, r24	; 6
     164:	08 95       	ret

00000166 <_Z14bLightStrengthi>:

void bLightStrength(int Brightness){

	int dutyCycle = 0;
	
	if (Brightness > 254) {
     166:	8f 3f       	cpi	r24, 0xFF	; 255
     168:	91 05       	cpc	r25, r1
     16a:	24 f4       	brge	.+8      	; 0x174 <_Z14bLightStrengthi+0xe>
		dutyCycle = 254;
	}
	else if (Brightness <= 0) {
     16c:	18 16       	cp	r1, r24
     16e:	19 06       	cpc	r1, r25
     170:	34 f0       	brlt	.+12     	; 0x17e <_Z14bLightStrengthi+0x18>
     172:	03 c0       	rjmp	.+6      	; 0x17a <_Z14bLightStrengthi+0x14>
void bLightStrength(int Brightness){

	int dutyCycle = 0;
	
	if (Brightness > 254) {
		dutyCycle = 254;
     174:	8e ef       	ldi	r24, 0xFE	; 254
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	02 c0       	rjmp	.+4      	; 0x17e <_Z14bLightStrengthi+0x18>
	}
	else if (Brightness <= 0) {
		dutyCycle = 1;
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	90 e0       	ldi	r25, 0x00	; 0
	}
	else {
		dutyCycle = Brightness;
	}

	OCR3A = dutyCycle;
     17e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     182:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     186:	08 95       	ret

00000188 <_Z11initCounterv>:
#include "Sensor.h"
#include <avr/interrupt.h>


void initCounter(){
	EIMSK = 0b00110000; // INT 4 & INT 5 active - BEN 2 & 3.
     188:	80 e3       	ldi	r24, 0x30	; 48
     18a:	8d bb       	out	0x1d, r24	; 29
	EICRB = 0b00001111; // INT 4 & INT 5 rising edge.
     18c:	8f e0       	ldi	r24, 0x0F	; 15
     18e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     192:	08 95       	ret

00000194 <_Z8fLightOnv>:
void fLightInit(void){
	DDRG = 0xFF; 
}

void fLightOn(void){
	PORTG = 0b00000101; //ben 39 og 41
     194:	85 e0       	ldi	r24, 0x05	; 5
     196:	84 bb       	out	0x14, r24	; 20
     198:	08 95       	ret

0000019a <_Z9fLightOffv>:
}
void fLightOff(void){
	PORTG = 0b00000000;
     19a:	14 ba       	out	0x14, r1	; 20
     19c:	08 95       	ret

0000019e <_Z11SendCharnulc>:
	UBRR0L = ((F_CPU/(16*BAUD))-1);
}

void SendCharnul(char Tegn)
{
	while(!(UCSR0A & (1<<UDRE0))){
     19e:	e0 ec       	ldi	r30, 0xC0	; 192
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	90 81       	ld	r25, Z
     1a4:	95 ff       	sbrs	r25, 5
     1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <_Z11SendCharnulc+0x4>
		
	}
	UDR0 = Tegn;
     1a8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     1ac:	08 95       	ret

000001ae <_Z10SendStringPc>:
}

void SendString(char* Streng)
{
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	ec 01       	movw	r28, r24
	while(*Streng != '\0'){
     1b4:	88 81       	ld	r24, Y
     1b6:	88 23       	and	r24, r24
     1b8:	29 f0       	breq	.+10     	; 0x1c4 <_Z10SendStringPc+0x16>
     1ba:	21 96       	adiw	r28, 0x01	; 1
		SendCharnul(*Streng);
     1bc:	f0 df       	rcall	.-32     	; 0x19e <_Z11SendCharnulc>
	UDR0 = Tegn;
}

void SendString(char* Streng)
{
	while(*Streng != '\0'){
     1be:	89 91       	ld	r24, Y+
     1c0:	81 11       	cpse	r24, r1
     1c2:	fc cf       	rjmp	.-8      	; 0x1bc <_Z10SendStringPc+0xe>
		SendCharnul(*Streng);
		Streng++;
	}
}
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <_Z11SendIntegeri>:

void SendInteger(int Tal)
{
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
     1d2:	6e 97       	sbiw	r28, 0x1e	; 30
     1d4:	0f b6       	in	r0, 0x3f	; 63
     1d6:	f8 94       	cli
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     1de:	4a e0       	ldi	r20, 0x0A	; 10
     1e0:	be 01       	movw	r22, r28
     1e2:	6f 5f       	subi	r22, 0xFF	; 255
     1e4:	7f 4f       	sbci	r23, 0xFF	; 255
     1e6:	00 d7       	rcall	.+3584   	; 0xfe8 <__itoa_ncheck>
	char intStr[30];
	itoa(Tal, intStr, 10);
	SendString(intStr);
     1e8:	ce 01       	movw	r24, r28
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	e0 df       	rcall	.-64     	; 0x1ae <_Z10SendStringPc>
}
     1ee:	6e 96       	adiw	r28, 0x1e	; 30
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	f8 94       	cli
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	cd bf       	out	0x3d, r28	; 61
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <__vector_5>:


ISR(INT4_vect){ //On rising edge, count + 1
     200:	1f 92       	push	r1
     202:	0f 92       	push	r0
     204:	0f b6       	in	r0, 0x3f	; 63
     206:	0f 92       	push	r0
     208:	11 24       	eor	r1, r1
     20a:	2f 93       	push	r18
     20c:	8f 93       	push	r24
     20e:	9f 93       	push	r25
	if(counter == 3){
     210:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     214:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     218:	03 97       	sbiw	r24, 0x03	; 3
     21a:	d1 f4       	brne	.+52     	; 0x250 <__vector_5+0x50>
		
		newCount = true;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		counter++;
     222:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     226:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     22a:	01 96       	adiw	r24, 0x01	; 1
     22c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     230:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
		EIMSK = 0b00000000;
     234:	1d ba       	out	0x1d, r1	; 29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     236:	2f ef       	ldi	r18, 0xFF	; 255
     238:	89 e6       	ldi	r24, 0x69	; 105
     23a:	98 e1       	ldi	r25, 0x18	; 24
     23c:	21 50       	subi	r18, 0x01	; 1
     23e:	80 40       	sbci	r24, 0x00	; 0
     240:	90 40       	sbci	r25, 0x00	; 0
     242:	e1 f7       	brne	.-8      	; 0x23c <__vector_5+0x3c>
     244:	00 c0       	rjmp	.+0      	; 0x246 <__vector_5+0x46>
     246:	00 00       	nop
		_delay_ms(500);
		EIFR = 0b00110000;
     248:	80 e3       	ldi	r24, 0x30	; 48
     24a:	8c bb       	out	0x1c, r24	; 28
		EIMSK = 0b00110000;
     24c:	8d bb       	out	0x1d, r24	; 29
     24e:	19 c0       	rjmp	.+50     	; 0x282 <__vector_5+0x82>
	}
	else {
		newCount = true;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		counter++;
     256:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     25a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     25e:	01 96       	adiw	r24, 0x01	; 1
     260:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     264:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
		EIMSK = 0b00000000;
     268:	1d ba       	out	0x1d, r1	; 29
     26a:	2f ef       	ldi	r18, 0xFF	; 255
     26c:	85 ea       	ldi	r24, 0xA5	; 165
     26e:	9e e0       	ldi	r25, 0x0E	; 14
     270:	21 50       	subi	r18, 0x01	; 1
     272:	80 40       	sbci	r24, 0x00	; 0
     274:	90 40       	sbci	r25, 0x00	; 0
     276:	e1 f7       	brne	.-8      	; 0x270 <__vector_5+0x70>
     278:	00 c0       	rjmp	.+0      	; 0x27a <__vector_5+0x7a>
     27a:	00 00       	nop
		_delay_ms(300);
		EIFR = 0b00110000;
     27c:	80 e3       	ldi	r24, 0x30	; 48
     27e:	8c bb       	out	0x1c, r24	; 28
		EIMSK = 0b00110000;
     280:	8d bb       	out	0x1d, r24	; 29
	}
}
     282:	9f 91       	pop	r25
     284:	8f 91       	pop	r24
     286:	2f 91       	pop	r18
     288:	0f 90       	pop	r0
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	0f 90       	pop	r0
     28e:	1f 90       	pop	r1
     290:	18 95       	reti

00000292 <__vector_6>:
ISR(INT5_vect){
     292:	1f 92       	push	r1
     294:	0f 92       	push	r0
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	0f 92       	push	r0
     29a:	11 24       	eor	r1, r1
     29c:	2f 93       	push	r18
     29e:	8f 93       	push	r24
     2a0:	9f 93       	push	r25
	if(counter == 3){
     2a2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     2a6:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     2aa:	03 97       	sbiw	r24, 0x03	; 3
     2ac:	d1 f4       	brne	.+52     	; 0x2e2 <__vector_6+0x50>
		
		newCount = true;
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		counter++;
     2b4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     2b8:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     2c2:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
		EIMSK = 0b00000000;
     2c6:	1d ba       	out	0x1d, r1	; 29
     2c8:	2f ef       	ldi	r18, 0xFF	; 255
     2ca:	89 e6       	ldi	r24, 0x69	; 105
     2cc:	98 e1       	ldi	r25, 0x18	; 24
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	80 40       	sbci	r24, 0x00	; 0
     2d2:	90 40       	sbci	r25, 0x00	; 0
     2d4:	e1 f7       	brne	.-8      	; 0x2ce <__vector_6+0x3c>
     2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <__vector_6+0x46>
     2d8:	00 00       	nop
		_delay_ms(500);
		EIFR = 0b00110000;
     2da:	80 e3       	ldi	r24, 0x30	; 48
     2dc:	8c bb       	out	0x1c, r24	; 28
		EIMSK = 0b00110000;
     2de:	8d bb       	out	0x1d, r24	; 29
     2e0:	19 c0       	rjmp	.+50     	; 0x314 <__vector_6+0x82>
	}
	else {
		newCount = true;
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		counter++;
     2e8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     2ec:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     2f0:	01 96       	adiw	r24, 0x01	; 1
     2f2:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     2f6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
		EIMSK = 0b00000000;
     2fa:	1d ba       	out	0x1d, r1	; 29
     2fc:	2f ef       	ldi	r18, 0xFF	; 255
     2fe:	85 ea       	ldi	r24, 0xA5	; 165
     300:	9e e0       	ldi	r25, 0x0E	; 14
     302:	21 50       	subi	r18, 0x01	; 1
     304:	80 40       	sbci	r24, 0x00	; 0
     306:	90 40       	sbci	r25, 0x00	; 0
     308:	e1 f7       	brne	.-8      	; 0x302 <__vector_6+0x70>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <__vector_6+0x7a>
     30c:	00 00       	nop
		_delay_ms(300);
		EIFR = 0b00110000;
     30e:	80 e3       	ldi	r24, 0x30	; 48
     310:	8c bb       	out	0x1c, r24	; 28
		EIMSK = 0b00110000;
     312:	8d bb       	out	0x1d, r24	; 29
	}
}
     314:	9f 91       	pop	r25
     316:	8f 91       	pop	r24
     318:	2f 91       	pop	r18
     31a:	0f 90       	pop	r0
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	0f 90       	pop	r0
     320:	1f 90       	pop	r1
     322:	18 95       	reti

00000324 <__vector_17>:


ISR(TIMER1_COMPA_vect){
     324:	1f 92       	push	r1
     326:	0f 92       	push	r0
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	0f 92       	push	r0
     32c:	11 24       	eor	r1, r1
     32e:	8f 93       	push	r24
     330:	9f 93       	push	r25
	                                                                                                                                          
	switch(MotorMode){
     332:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
     336:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
     33a:	81 30       	cpi	r24, 0x01	; 1
     33c:	91 05       	cpc	r25, r1
     33e:	31 f0       	breq	.+12     	; 0x34c <__vector_17+0x28>
     340:	18 f0       	brcs	.+6      	; 0x348 <__vector_17+0x24>
     342:	02 97       	sbiw	r24, 0x02	; 2
     344:	59 f0       	breq	.+22     	; 0x35c <__vector_17+0x38>
     346:	11 c0       	rjmp	.+34     	; 0x36a <__vector_17+0x46>
		case 0:
			PORTA = 0b00000000;
     348:	12 b8       	out	0x02, r1	; 2
		break;
     34a:	0f c0       	rjmp	.+30     	; 0x36a <__vector_17+0x46>
		case 1:
			if(PINA == 0b00000001){
     34c:	80 b1       	in	r24, 0x00	; 0
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	11 f4       	brne	.+4      	; 0x356 <__vector_17+0x32>
				PORTA = 0b00000000;
     352:	12 b8       	out	0x02, r1	; 2
     354:	0a c0       	rjmp	.+20     	; 0x36a <__vector_17+0x46>
			}else{
				PORTA = 0b00000001;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	82 b9       	out	0x02, r24	; 2
     35a:	07 c0       	rjmp	.+14     	; 0x36a <__vector_17+0x46>
			}
		break;
		case 2:
			if(PINA == 0b00000010){
     35c:	80 b1       	in	r24, 0x00	; 0
     35e:	82 30       	cpi	r24, 0x02	; 2
     360:	11 f4       	brne	.+4      	; 0x366 <__vector_17+0x42>
				PORTA = 0b00000000;
     362:	12 b8       	out	0x02, r1	; 2
     364:	02 c0       	rjmp	.+4      	; 0x36a <__vector_17+0x46>
				}else{
				PORTA = 0b00000010;
     366:	82 e0       	ldi	r24, 0x02	; 2
     368:	82 b9       	out	0x02, r24	; 2
			}
		break;
			
	}
	
}
     36a:	9f 91       	pop	r25
     36c:	8f 91       	pop	r24
     36e:	0f 90       	pop	r0
     370:	0f be       	out	0x3f, r0	; 63
     372:	0f 90       	pop	r0
     374:	1f 90       	pop	r1
     376:	18 95       	reti

00000378 <__vector_32>:

ISR(TIMER3_COMPA_vect){
     378:	1f 92       	push	r1
     37a:	0f 92       	push	r0
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	0f 92       	push	r0
     380:	11 24       	eor	r1, r1
     382:	0b b6       	in	r0, 0x3b	; 59
     384:	0f 92       	push	r0
     386:	2f 93       	push	r18
     388:	3f 93       	push	r19
     38a:	4f 93       	push	r20
     38c:	5f 93       	push	r21
     38e:	6f 93       	push	r22
     390:	7f 93       	push	r23
     392:	8f 93       	push	r24
     394:	9f 93       	push	r25
     396:	af 93       	push	r26
     398:	bf 93       	push	r27
     39a:	ef 93       	push	r30
     39c:	ff 93       	push	r31
	
	bLightToggle();
     39e:	df de       	rcall	.-578    	; 0x15e <_Z12bLightTogglev>
}
     3a0:	ff 91       	pop	r31
     3a2:	ef 91       	pop	r30
     3a4:	bf 91       	pop	r27
     3a6:	af 91       	pop	r26
     3a8:	9f 91       	pop	r25
     3aa:	8f 91       	pop	r24
     3ac:	7f 91       	pop	r23
     3ae:	6f 91       	pop	r22
     3b0:	5f 91       	pop	r21
     3b2:	4f 91       	pop	r20
     3b4:	3f 91       	pop	r19
     3b6:	2f 91       	pop	r18
     3b8:	0f 90       	pop	r0
     3ba:	0b be       	out	0x3b, r0	; 59
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <main>:


int main(void)
{
	sei();
     3c6:	78 94       	sei
	initCounter();
     3c8:	df de       	rcall	.-578    	; 0x188 <_Z11initCounterv>
	initMotor();
     3ca:	b7 d2       	rcall	.+1390   	; 0x93a <_Z9initMotorv>
     3cc:	20 e0       	ldi	r18, 0x00	; 0
	InitUART(9600, 8, 0);
     3ce:	48 e0       	ldi	r20, 0x08	; 8
     3d0:	60 e8       	ldi	r22, 0x80	; 128
     3d2:	75 e2       	ldi	r23, 0x25	; 37
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	6f d3       	rcall	.+1758   	; 0xab8 <_Z8InitUARTmhb>
     3da:	88 e1       	ldi	r24, 0x18	; 24
volatile unsigned int MotorMode = 0;

void InitUARTnul(unsigned long BAUD)
{
	
	UCSR0B = 0b00011000;
     3dc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     3e0:	86 e0       	ldi	r24, 0x06	; 6
	
	UCSR0C = 0b00000110;
     3e2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     3e6:	87 e6       	ldi	r24, 0x67	; 103
	
	UBRR0L = ((F_CPU/(16*BAUD))-1);
     3e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	sei();
	initCounter();
	initMotor();
	InitUART(9600, 8, 0);
	InitUARTnul(9600);
	bLightInit();
     3ec:	a8 de       	rcall	.-688    	; 0x13e <_Z10bLightInitv>
     3ee:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <counter+0x1>
	counter = 0;
     3f2:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <counter>
     3f6:	12 b8       	out	0x02, r1	; 2
	PORTA = 0b00000000;
     3f8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
	TIMSK3 = 0b00000000;
     3fc:	c4 e9       	ldi	r28, 0x94	; 148
				
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
				_delay_ms(1000);
				TCNT3 = 0;
     3fe:	d0 e0       	ldi	r29, 0x00	; 0
     400:	0f 2e       	mov	r0, r31
				bLightStrength(254);
				MotorMode = 0;
				_delay_ms(500);
				fLightOff();
				stopSOMO();
				TIMSK3 = 0b00000000;
     402:	f1 e7       	ldi	r31, 0x71	; 113
     404:	af 2e       	mov	r10, r31
     406:	b1 2c       	mov	r11, r1
     408:	f0 2d       	mov	r31, r0
     40a:	ee 24       	eor	r14, r14
				bLightStrength(254);
				_delay_ms(500);
				TCNT3 = 0;
				bLightStrength(15);
				_delay_ms(400);
				MotorMode = 1;
     40c:	e3 94       	inc	r14
     40e:	f1 2c       	mov	r15, r1
     410:	04 e8       	ldi	r16, 0x84	; 132
				_delay_ms(100);
				TCNT1 = 0;
     412:	10 e0       	ldi	r17, 0x00	; 0
     414:	0f 2e       	mov	r0, r31
				setSpeed(99.0);
				counter = 12;
     416:	fc e0       	ldi	r31, 0x0C	; 12
     418:	8f 2e       	mov	r8, r31
     41a:	91 2c       	mov	r9, r1
     41c:	f0 2d       	mov	r31, r0
     41e:	0f 2e       	mov	r0, r31
				MotorMode = 1;
				_delay_ms(100);
				TCNT1 = 0;
				setSpeed(99.0);
				_delay_ms(500);
				counter = 11;
     420:	fb e0       	ldi	r31, 0x0B	; 11
     422:	6f 2e       	mov	r6, r31
     424:	71 2c       	mov	r7, r1
     426:	f0 2d       	mov	r31, r0
     428:	0f 2e       	mov	r0, r31
				bLightStrength(254);
				MotorMode = 1;
				_delay_ms(100);
				TCNT1 = 0;
				setSpeed(99.0);
				counter = 10;
     42a:	fa e0       	ldi	r31, 0x0A	; 10
     42c:	4f 2e       	mov	r4, r31
     42e:	51 2c       	mov	r5, r1
     430:	f0 2d       	mov	r31, r0
     432:	68 94       	set
				_delay_ms(10);
				newCount = false;
				TCNT1 = 0;
				setSpeed(99.0);
				_delay_ms(150);
				counter = 8;
     434:	22 24       	eor	r2, r2
     436:	23 f8       	bld	r2, 3
     438:	31 2c       	mov	r3, r1
     43a:	68 94       	set
				stopSOMO();
				playNext();
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
				MotorMode = 2;
     43c:	cc 24       	eor	r12, r12
     43e:	c1 f8       	bld	r12, 1
     440:	d1 2c       	mov	r13, r1
     442:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>

	
	while(1){
		
		
		SendInteger(counter);		
     446:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     44a:	bf de       	rcall	.-642    	; 0x1ca <_Z11SendIntegeri>
     44c:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <counter>
		switch(counter){
     450:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <counter+0x1>
     454:	31 97       	sbiw	r30, 0x01	; 1
     456:	ed 30       	cpi	r30, 0x0D	; 13
     458:	f1 05       	cpc	r31, r1
     45a:	98 f7       	brcc	.-26     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     45c:	88 27       	eor	r24, r24
     45e:	ee 58       	subi	r30, 0x8E	; 142
     460:	ff 4f       	sbci	r31, 0xFF	; 255
     462:	8f 4f       	sbci	r24, 0xFF	; 255
     464:	b9 c5       	rjmp	.+2930   	; 0xfd8 <__tablejump2__>
     466:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
			case 1:   // Start manuelt med brik
			if(newCount){
     46a:	88 23       	and	r24, r24
     46c:	51 f3       	breq	.-44     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     46e:	82 e0       	ldi	r24, 0x02	; 2
				TIMSK3 = 0b00000010;
     470:	f5 01       	movw	r30, r10
     472:	80 83       	st	Z, r24
				TCNT3 = 0;
     474:	19 82       	std	Y+1, r1	; 0x01
				bLightStrength(15);
     476:	18 82       	st	Y, r1
     478:	8f e0       	ldi	r24, 0x0F	; 15
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	74 de       	rcall	.-792    	; 0x166 <_Z14bLightStrengthi>
				newCount = false;
     47e:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				playStartSound();
     482:	f8 d2       	rcall	.+1520   	; 0xa74 <_Z14playStartSoundv>
     484:	ff ef       	ldi	r31, 0xFF	; 255
     486:	2d e3       	ldi	r18, 0x3D	; 61
     488:	89 e4       	ldi	r24, 0x49	; 73
     48a:	f1 50       	subi	r31, 0x01	; 1
     48c:	20 40       	sbci	r18, 0x00	; 0
     48e:	80 40       	sbci	r24, 0x00	; 0
     490:	e1 f7       	brne	.-8      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     492:	00 c0       	rjmp	.+0      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     494:	00 00       	nop
				_delay_ms(1500); //Delay for at spille intro 10 sek
				fLightOn();
     496:	7e de       	rcall	.-772    	; 0x194 <_Z8fLightOnv>
     498:	9f ef       	ldi	r25, 0xFF	; 255
     49a:	e9 ef       	ldi	r30, 0xF9	; 249
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	91 50       	subi	r25, 0x01	; 1
     4a0:	e0 40       	sbci	r30, 0x00	; 0
     4a2:	f0 40       	sbci	r31, 0x00	; 0
     4a4:	e1 f7       	brne	.-8      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a8:	00 00       	nop
     4aa:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <__data_end+0x1>
				_delay_ms(20);
				MotorMode = 1;
     4ae:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <__data_end>
     4b2:	2f ef       	ldi	r18, 0xFF	; 255
     4b4:	81 ee       	ldi	r24, 0xE1	; 225
     4b6:	94 e0       	ldi	r25, 0x04	; 4
     4b8:	21 50       	subi	r18, 0x01	; 1
     4ba:	80 40       	sbci	r24, 0x00	; 0
     4bc:	90 40       	sbci	r25, 0x00	; 0
     4be:	e1 f7       	brne	.-8      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4c2:	00 00       	nop
				_delay_ms(100);
				TCNT1 = 0;
     4c4:	f8 01       	movw	r30, r16
     4c6:	11 82       	std	Z+1, r1	; 0x01
     4c8:	10 82       	st	Z, r1
				setSpeed(99.0);
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	86 ec       	ldi	r24, 0xC6	; 198
     4d0:	92 e4       	ldi	r25, 0x42	; 66
     4d2:	49 d2       	rcall	.+1170   	; 0x966 <_Z8setSpeedf>
     4d4:	f0 92 05 02 	sts	0x0205, r15	; 0x800205 <counter+0x1>
				counter = 1;
     4d8:	e0 92 04 02 	sts	0x0204, r14	; 0x800204 <counter>
     4dc:	b2 cf       	rjmp	.-156    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			
			
			break;
			
			case 2:  // 1. brik
			if(newCount){
     4de:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     4e2:	88 23       	and	r24, r24
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
				TCNT3 = 0;
     4e6:	ad cf       	rjmp	.-166    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     4e8:	19 82       	std	Y+1, r1	; 0x01
				bLightStrength(15);
     4ea:	18 82       	st	Y, r1
     4ec:	8f e0       	ldi	r24, 0x0F	; 15
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	3a de       	rcall	.-908    	; 0x166 <_Z14bLightStrengthi>
				playCoinSound();
     4f2:	af d2       	rcall	.+1374   	; 0xa52 <_Z13playCoinSoundv>
     4f4:	8f e3       	ldi	r24, 0x3F	; 63
     4f6:	9c e9       	ldi	r25, 0x9C	; 156
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4fe:	00 00       	nop
				_delay_ms(10);
				newCount = false;
     500:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				TCNT1 = 0;
     504:	f8 01       	movw	r30, r16
     506:	11 82       	std	Z+1, r1	; 0x01
     508:	10 82       	st	Z, r1
				setSpeed(99.0);
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	86 ec       	ldi	r24, 0xC6	; 198
     510:	92 e4       	ldi	r25, 0x42	; 66
     512:	29 d2       	rcall	.+1106   	; 0x966 <_Z8setSpeedf>
     514:	ff ef       	ldi	r31, 0xFF	; 255
     516:	22 e5       	ldi	r18, 0x52	; 82
     518:	87 e0       	ldi	r24, 0x07	; 7
     51a:	f1 50       	subi	r31, 0x01	; 1
     51c:	20 40       	sbci	r18, 0x00	; 0
     51e:	80 40       	sbci	r24, 0x00	; 0
     520:	e1 f7       	brne	.-8      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
     522:	00 c0       	rjmp	.+0      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     524:	00 00       	nop
     526:	d0 92 05 02 	sts	0x0205, r13	; 0x800205 <counter+0x1>
				_delay_ms(150);
				counter = 2;
     52a:	c0 92 04 02 	sts	0x0204, r12	; 0x800204 <counter>
			}
			
			break;
			
			case 3:   // 2. brik
			if(newCount){
     52e:	89 cf       	rjmp	.-238    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     530:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     534:	88 23       	and	r24, r24
     536:	09 f4       	brne	.+2      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
				TCNT3 = 0;
     538:	84 cf       	rjmp	.-248    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     53a:	19 82       	std	Y+1, r1	; 0x01
				bLightStrength(15);
     53c:	18 82       	st	Y, r1
     53e:	8f e0       	ldi	r24, 0x0F	; 15
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	11 de       	rcall	.-990    	; 0x166 <_Z14bLightStrengthi>
				playNext();
     544:	64 d2       	rcall	.+1224   	; 0xa0e <_Z8playNextv>
     546:	ef e3       	ldi	r30, 0x3F	; 63
     548:	fc e9       	ldi	r31, 0x9C	; 156
     54a:	31 97       	sbiw	r30, 0x01	; 1
     54c:	f1 f7       	brne	.-4      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     54e:	00 c0       	rjmp	.+0      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     550:	00 00       	nop
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
     552:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				TCNT1 = 0;
     556:	f8 01       	movw	r30, r16
     558:	11 82       	std	Z+1, r1	; 0x01
     55a:	10 82       	st	Z, r1
				setSpeed(99.0);
     55c:	60 e0       	ldi	r22, 0x00	; 0
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	86 ec       	ldi	r24, 0xC6	; 198
     562:	92 e4       	ldi	r25, 0x42	; 66
     564:	00 d2       	rcall	.+1024   	; 0x966 <_Z8setSpeedf>
     566:	ff ef       	ldi	r31, 0xFF	; 255
     568:	22 e5       	ldi	r18, 0x52	; 82
     56a:	87 e0       	ldi	r24, 0x07	; 7
     56c:	f1 50       	subi	r31, 0x01	; 1
     56e:	20 40       	sbci	r18, 0x00	; 0
     570:	80 40       	sbci	r24, 0x00	; 0
     572:	e1 f7       	brne	.-8      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
     574:	00 c0       	rjmp	.+0      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
     576:	00 00       	nop
     578:	83 e0       	ldi	r24, 0x03	; 3
				_delay_ms(150);
				counter = 3;
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     580:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
		
			
			break;
			
			case 4:   // 3. brik på bakken
			if(newCount){
     584:	5e cf       	rjmp	.-324    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     586:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     58a:	88 23       	and	r24, r24
     58c:	09 f4       	brne	.+2      	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
				TCNT3 = 0;
     58e:	59 cf       	rjmp	.-334    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     590:	19 82       	std	Y+1, r1	; 0x01
				bLightStrength(15);
     592:	18 82       	st	Y, r1
     594:	8f e0       	ldi	r24, 0x0F	; 15
     596:	90 e0       	ldi	r25, 0x00	; 0
				_delay_ms(10);
				newCount = false;
				TCNT1 = 0;
				setSpeed(80.0);
				_delay_ms(150);*/
				playNext();
     598:	e6 dd       	rcall	.-1076   	; 0x166 <_Z14bLightStrengthi>
     59a:	39 d2       	rcall	.+1138   	; 0xa0e <_Z8playNextv>
     59c:	ef e3       	ldi	r30, 0x3F	; 63
     59e:	fc e9       	ldi	r31, 0x9C	; 156
     5a0:	31 97       	sbiw	r30, 0x01	; 1
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     5a6:	00 00       	nop
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
     5a8:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				TCNT1 = 0;
     5ac:	f8 01       	movw	r30, r16
     5ae:	11 82       	std	Z+1, r1	; 0x01
     5b0:	10 82       	st	Z, r1
				setSpeed(99.0);
     5b2:	60 e0       	ldi	r22, 0x00	; 0
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	86 ec       	ldi	r24, 0xC6	; 198
     5b8:	92 e4       	ldi	r25, 0x42	; 66
     5ba:	d5 d1       	rcall	.+938    	; 0x966 <_Z8setSpeedf>
     5bc:	ff ef       	ldi	r31, 0xFF	; 255
     5be:	22 e5       	ldi	r18, 0x52	; 82
     5c0:	87 e0       	ldi	r24, 0x07	; 7
     5c2:	f1 50       	subi	r31, 0x01	; 1
     5c4:	20 40       	sbci	r18, 0x00	; 0
     5c6:	80 40       	sbci	r24, 0x00	; 0
     5c8:	e1 f7       	brne	.-8      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
				_delay_ms(150);
				counter = 4;
     5cc:	00 00       	nop
     5ce:	e4 e0       	ldi	r30, 0x04	; 4
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	f0 93 05 02 	sts	0x0205, r31	; 0x800205 <counter+0x1>
     5d6:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <counter>
			}
			break;
			
			case 5:  // 4. brik
			if(newCount){
     5da:	33 cf       	rjmp	.-410    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     5dc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     5e0:	88 23       	and	r24, r24
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
				TCNT3 = 0;
     5e4:	2e cf       	rjmp	.-420    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     5e6:	19 82       	std	Y+1, r1	; 0x01
				bLightStrength(15);
     5e8:	18 82       	st	Y, r1
     5ea:	8f e0       	ldi	r24, 0x0F	; 15
     5ec:	90 e0       	ldi	r25, 0x00	; 0
				//stopSOMO();
				playNext();
     5ee:	bb dd       	rcall	.-1162   	; 0x166 <_Z14bLightStrengthi>
     5f0:	0e d2       	rcall	.+1052   	; 0xa0e <_Z8playNextv>
     5f2:	8f e3       	ldi	r24, 0x3F	; 63
     5f4:	9c e9       	ldi	r25, 0x9C	; 156
     5f6:	01 97       	sbiw	r24, 0x01	; 1
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
     5fa:	00 c0       	rjmp	.+0      	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
     5fc:	00 00       	nop
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
     5fe:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				TCNT1 = 0;
     602:	f8 01       	movw	r30, r16
     604:	11 82       	std	Z+1, r1	; 0x01
     606:	10 82       	st	Z, r1
				setSpeed(99.0);
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	86 ec       	ldi	r24, 0xC6	; 198
     60e:	92 e4       	ldi	r25, 0x42	; 66
     610:	aa d1       	rcall	.+852    	; 0x966 <_Z8setSpeedf>
     612:	ff ef       	ldi	r31, 0xFF	; 255
     614:	22 e5       	ldi	r18, 0x52	; 82
     616:	87 e0       	ldi	r24, 0x07	; 7
     618:	f1 50       	subi	r31, 0x01	; 1
     61a:	20 40       	sbci	r18, 0x00	; 0
     61c:	80 40       	sbci	r24, 0x00	; 0
     61e:	e1 f7       	brne	.-8      	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
				_delay_ms(150);
				counter = 5;
     620:	00 c0       	rjmp	.+0      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
     622:	00 00       	nop
     624:	e5 e0       	ldi	r30, 0x05	; 5
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	f0 93 05 02 	sts	0x0205, r31	; 0x800205 <counter+0x1>
     62c:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <counter>
			}
			
			break;
			
			case 6:  // 5. brik
			if(newCount){
     630:	08 cf       	rjmp	.-496    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     632:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     636:	88 23       	and	r24, r24
				TCNT3 = 0;
     638:	09 f4       	brne	.+2      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
				bLightStrength(15);
     63a:	03 cf       	rjmp	.-506    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     63c:	19 82       	std	Y+1, r1	; 0x01
     63e:	18 82       	st	Y, r1
     640:	8f e0       	ldi	r24, 0x0F	; 15
				stopSOMO();
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	90 dd       	rcall	.-1248   	; 0x166 <_Z14bLightStrengthi>
				playNext();
     646:	f4 d1       	rcall	.+1000   	; 0xa30 <_Z8stopSOMOv>
     648:	e2 d1       	rcall	.+964    	; 0xa0e <_Z8playNextv>
     64a:	8f e3       	ldi	r24, 0x3F	; 63
     64c:	9c e9       	ldi	r25, 0x9C	; 156
     64e:	01 97       	sbiw	r24, 0x01	; 1
     650:	f1 f7       	brne	.-4      	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
     652:	00 c0       	rjmp	.+0      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     654:	00 00       	nop
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
     656:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				TCNT1 = 0;
     65a:	f8 01       	movw	r30, r16
     65c:	11 82       	std	Z+1, r1	; 0x01
     65e:	10 82       	st	Z, r1
				setSpeed(90);
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	84 eb       	ldi	r24, 0xB4	; 180
     666:	92 e4       	ldi	r25, 0x42	; 66
     668:	7e d1       	rcall	.+764    	; 0x966 <_Z8setSpeedf>
     66a:	ff ef       	ldi	r31, 0xFF	; 255
     66c:	22 e5       	ldi	r18, 0x52	; 82
     66e:	87 e0       	ldi	r24, 0x07	; 7
     670:	f1 50       	subi	r31, 0x01	; 1
     672:	20 40       	sbci	r18, 0x00	; 0
     674:	80 40       	sbci	r24, 0x00	; 0
     676:	e1 f7       	brne	.-8      	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     678:	00 c0       	rjmp	.+0      	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
				_delay_ms(150);
				counter = 6;
     67a:	00 00       	nop
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	f0 93 05 02 	sts	0x0205, r31	; 0x800205 <counter+0x1>
     684:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <counter>
			}
			
			break;
			
			case 7: // stop ved 6. brik
			if(newCount){
     688:	dc ce       	rjmp	.-584    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     68a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     68e:	88 23       	and	r24, r24
				stopSOMO();
     690:	09 f4       	brne	.+2      	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
				playNext();
     692:	d7 ce       	rjmp	.-594    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     694:	cd d1       	rcall	.+922    	; 0xa30 <_Z8stopSOMOv>
     696:	bb d1       	rcall	.+886    	; 0xa0e <_Z8playNextv>
     698:	8f e3       	ldi	r24, 0x3F	; 63
     69a:	9c e9       	ldi	r25, 0x9C	; 156
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	f1 f7       	brne	.-4      	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
     6a2:	00 00       	nop
     6a4:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				MotorMode = 2;
     6a8:	d0 92 03 02 	sts	0x0203, r13	; 0x800203 <__data_end+0x1>
     6ac:	c0 92 02 02 	sts	0x0202, r12	; 0x800202 <__data_end>
				TCNT1 = 0;
     6b0:	f8 01       	movw	r30, r16
     6b2:	11 82       	std	Z+1, r1	; 0x01
				setSpeed(99.0);
     6b4:	10 82       	st	Z, r1
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	86 ec       	ldi	r24, 0xC6	; 198
     6bc:	92 e4       	ldi	r25, 0x42	; 66
				TCNT3 = 0;
     6be:	53 d1       	rcall	.+678    	; 0x966 <_Z8setSpeedf>
     6c0:	19 82       	std	Y+1, r1	; 0x01
				bLightStrength(254);
     6c2:	18 82       	st	Y, r1
     6c4:	8e ef       	ldi	r24, 0xFE	; 254
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	4e dd       	rcall	.-1380   	; 0x166 <_Z14bLightStrengthi>
				counter = 7;
     6ca:	87 e0       	ldi	r24, 0x07	; 7
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     6d2:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
     6d6:	9f ef       	ldi	r25, 0xFF	; 255
     6d8:	e9 e6       	ldi	r30, 0x69	; 105
     6da:	f8 e1       	ldi	r31, 0x18	; 24
     6dc:	91 50       	subi	r25, 0x01	; 1
     6de:	e0 40       	sbci	r30, 0x00	; 0
     6e0:	f0 40       	sbci	r31, 0x00	; 0
				_delay_ms(500);
				TCNT3 = 0;
     6e2:	e1 f7       	brne	.-8      	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
				bLightStrength(15);
     6e6:	00 00       	nop
     6e8:	19 82       	std	Y+1, r1	; 0x01
     6ea:	18 82       	st	Y, r1
     6ec:	8f e0       	ldi	r24, 0x0F	; 15
			}
			
			break;
			
			case 8: // tilbage forbi 6. brik
			if(newCount){
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	3a dd       	rcall	.-1420   	; 0x166 <_Z14bLightStrengthi>
     6f2:	a7 ce       	rjmp	.-690    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     6f4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
				TCNT3 = 0;
     6f8:	88 23       	and	r24, r24
     6fa:	09 f4       	brne	.+2      	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
				bLightStrength(15);
     6fc:	a2 ce       	rjmp	.-700    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     6fe:	19 82       	std	Y+1, r1	; 0x01
     700:	18 82       	st	Y, r1
     702:	8f e0       	ldi	r24, 0x0F	; 15
				stopSOMO();
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	2f dd       	rcall	.-1442   	; 0x166 <_Z14bLightStrengthi>
				playNext();
     708:	93 d1       	rcall	.+806    	; 0xa30 <_Z8stopSOMOv>
     70a:	81 d1       	rcall	.+770    	; 0xa0e <_Z8playNextv>
     70c:	8f e3       	ldi	r24, 0x3F	; 63
     70e:	9c e9       	ldi	r25, 0x9C	; 156
     710:	01 97       	sbiw	r24, 0x01	; 1
     712:	f1 f7       	brne	.-4      	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
     714:	00 c0       	rjmp	.+0      	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     716:	00 00       	nop
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
     718:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				TCNT1 = 0;
     71c:	f8 01       	movw	r30, r16
     71e:	11 82       	std	Z+1, r1	; 0x01
     720:	10 82       	st	Z, r1
				setSpeed(99.0);
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	86 ec       	ldi	r24, 0xC6	; 198
     728:	92 e4       	ldi	r25, 0x42	; 66
     72a:	1d d1       	rcall	.+570    	; 0x966 <_Z8setSpeedf>
     72c:	ff ef       	ldi	r31, 0xFF	; 255
     72e:	22 e5       	ldi	r18, 0x52	; 82
     730:	87 e0       	ldi	r24, 0x07	; 7
     732:	f1 50       	subi	r31, 0x01	; 1
     734:	20 40       	sbci	r18, 0x00	; 0
     736:	80 40       	sbci	r24, 0x00	; 0
     738:	e1 f7       	brne	.-8      	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
				_delay_ms(150);
				counter = 8;
     73c:	00 00       	nop
     73e:	30 92 05 02 	sts	0x0205, r3	; 0x800205 <counter+0x1>
     742:	20 92 04 02 	sts	0x0204, r2	; 0x800204 <counter>
				//newCount = false;
				//
				//TCNT1 = 0;
				//setSpeed(99);
			//}
			counter++;
     746:	7d ce       	rjmp	.-774    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     748:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     74c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     756:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
			break;
			
			case 10: //Stop ved 5. brik igen
			if(newCount){
     75a:	73 ce       	rjmp	.-794    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     75c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     760:	88 23       	and	r24, r24
				//stopSOMO();
				playNext();
     762:	09 f4       	brne	.+2      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
     764:	6e ce       	rjmp	.-804    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     766:	53 d1       	rcall	.+678    	; 0xa0e <_Z8playNextv>
     768:	ef e3       	ldi	r30, 0x3F	; 63
     76a:	fc e9       	ldi	r31, 0x9C	; 156
     76c:	31 97       	sbiw	r30, 0x01	; 1
     76e:	f1 f7       	brne	.-4      	; 0x76c <__LOCK_REGION_LENGTH__+0x36c>
     770:	00 c0       	rjmp	.+0      	; 0x772 <__LOCK_REGION_LENGTH__+0x372>
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
     772:	00 00       	nop
     774:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				TCNT3 = 0;
     778:	19 82       	std	Y+1, r1	; 0x01
				bLightStrength(254);
     77a:	18 82       	st	Y, r1
     77c:	8e ef       	ldi	r24, 0xFE	; 254
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	f2 dc       	rcall	.-1564   	; 0x166 <_Z14bLightStrengthi>
				MotorMode = 1;
     782:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <__data_end+0x1>
     786:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <__data_end>
     78a:	ff ef       	ldi	r31, 0xFF	; 255
     78c:	21 ee       	ldi	r18, 0xE1	; 225
     78e:	84 e0       	ldi	r24, 0x04	; 4
     790:	f1 50       	subi	r31, 0x01	; 1
     792:	20 40       	sbci	r18, 0x00	; 0
     794:	80 40       	sbci	r24, 0x00	; 0
     796:	e1 f7       	brne	.-8      	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
				_delay_ms(100);
				TCNT1 = 0;
     798:	00 c0       	rjmp	.+0      	; 0x79a <__LOCK_REGION_LENGTH__+0x39a>
				setSpeed(99.0);
     79a:	00 00       	nop
     79c:	f8 01       	movw	r30, r16
     79e:	11 82       	std	Z+1, r1	; 0x01
     7a0:	10 82       	st	Z, r1
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	70 e0       	ldi	r23, 0x00	; 0
				counter = 10;
     7a6:	86 ec       	ldi	r24, 0xC6	; 198
     7a8:	92 e4       	ldi	r25, 0x42	; 66
     7aa:	dd d0       	rcall	.+442    	; 0x966 <_Z8setSpeedf>
     7ac:	50 92 05 02 	sts	0x0205, r5	; 0x800205 <counter+0x1>
     7b0:	40 92 04 02 	sts	0x0204, r4	; 0x800204 <counter>
     7b4:	ff ef       	ldi	r31, 0xFF	; 255
     7b6:	29 e6       	ldi	r18, 0x69	; 105
     7b8:	88 e1       	ldi	r24, 0x18	; 24
     7ba:	f1 50       	subi	r31, 0x01	; 1
     7bc:	20 40       	sbci	r18, 0x00	; 0
     7be:	80 40       	sbci	r24, 0x00	; 0
				_delay_ms(500);
				TCNT3 = 0;
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <__LOCK_REGION_LENGTH__+0x3ba>
     7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <__LOCK_REGION_LENGTH__+0x3c4>
				bLightStrength(15);
     7c4:	00 00       	nop
     7c6:	19 82       	std	Y+1, r1	; 0x01
     7c8:	18 82       	st	Y, r1
     7ca:	8f e0       	ldi	r24, 0x0F	; 15
     7cc:	90 e0       	ldi	r25, 0x00	; 0
		
			}
			break;
			
			case 11: // 5. brik igen
			if(newCount){
     7ce:	cb dc       	rcall	.-1642   	; 0x166 <_Z14bLightStrengthi>
     7d0:	38 ce       	rjmp	.-912    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     7d2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
				TCNT3 = 0;
     7d6:	88 23       	and	r24, r24
     7d8:	09 f4       	brne	.+2      	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>
				bLightStrength(15);
     7da:	33 ce       	rjmp	.-922    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     7dc:	19 82       	std	Y+1, r1	; 0x01
     7de:	18 82       	st	Y, r1
     7e0:	8f e0       	ldi	r24, 0x0F	; 15
				stopSOMO();
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	c0 dc       	rcall	.-1664   	; 0x166 <_Z14bLightStrengthi>
				playNext();
     7e6:	24 d1       	rcall	.+584    	; 0xa30 <_Z8stopSOMOv>
     7e8:	12 d1       	rcall	.+548    	; 0xa0e <_Z8playNextv>
     7ea:	ef e3       	ldi	r30, 0x3F	; 63
     7ec:	fc e9       	ldi	r31, 0x9C	; 156
     7ee:	31 97       	sbiw	r30, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>
     7f4:	00 00       	nop
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
     7f6:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				MotorMode = 1;
     7fa:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <__data_end+0x1>
     7fe:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <__data_end>
     802:	ff ef       	ldi	r31, 0xFF	; 255
     804:	21 ee       	ldi	r18, 0xE1	; 225
     806:	84 e0       	ldi	r24, 0x04	; 4
     808:	f1 50       	subi	r31, 0x01	; 1
     80a:	20 40       	sbci	r18, 0x00	; 0
     80c:	80 40       	sbci	r24, 0x00	; 0
     80e:	e1 f7       	brne	.-8      	; 0x808 <__LOCK_REGION_LENGTH__+0x408>
				_delay_ms(100);
				TCNT1 = 0;
     810:	00 c0       	rjmp	.+0      	; 0x812 <__LOCK_REGION_LENGTH__+0x412>
     812:	00 00       	nop
     814:	f8 01       	movw	r30, r16
				setSpeed(99.0);
     816:	11 82       	std	Z+1, r1	; 0x01
     818:	10 82       	st	Z, r1
     81a:	60 e0       	ldi	r22, 0x00	; 0
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	86 ec       	ldi	r24, 0xC6	; 198
     820:	92 e4       	ldi	r25, 0x42	; 66
     822:	a1 d0       	rcall	.+322    	; 0x966 <_Z8setSpeedf>
     824:	ff ef       	ldi	r31, 0xFF	; 255
     826:	29 e6       	ldi	r18, 0x69	; 105
     828:	88 e1       	ldi	r24, 0x18	; 24
     82a:	f1 50       	subi	r31, 0x01	; 1
     82c:	20 40       	sbci	r18, 0x00	; 0
     82e:	80 40       	sbci	r24, 0x00	; 0
     830:	e1 f7       	brne	.-8      	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
				_delay_ms(500);
				counter = 11;
     832:	00 c0       	rjmp	.+0      	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
     834:	00 00       	nop
     836:	70 92 05 02 	sts	0x0205, r7	; 0x800205 <counter+0x1>
			}
			break;
			
			case 12: // 6. brik igen 
			if(newCount){
     83a:	60 92 04 02 	sts	0x0204, r6	; 0x800204 <counter>
     83e:	01 ce       	rjmp	.-1022   	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     840:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
				stopSOMO();
     844:	88 23       	and	r24, r24
     846:	09 f4       	brne	.+2      	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
				playNext();
     848:	fc cd       	rjmp	.-1032   	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     84a:	f2 d0       	rcall	.+484    	; 0xa30 <_Z8stopSOMOv>
     84c:	e0 d0       	rcall	.+448    	; 0xa0e <_Z8playNextv>
     84e:	ef e3       	ldi	r30, 0x3F	; 63
     850:	fc e9       	ldi	r31, 0x9C	; 156
     852:	31 97       	sbiw	r30, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <__LOCK_REGION_LENGTH__+0x452>
     856:	00 c0       	rjmp	.+0      	; 0x858 <__LOCK_REGION_LENGTH__+0x458>
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
     858:	00 00       	nop
     85a:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				setSpeed(0);
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	cb 01       	movw	r24, r22
     864:	80 d0       	rcall	.+256    	; 0x966 <_Z8setSpeedf>
				MotorMode = 0;
     866:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__data_end+0x1>
     86a:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
				TCNT3 = 0;
     86e:	19 82       	std	Y+1, r1	; 0x01
     870:	18 82       	st	Y, r1
				bLightStrength(254);
     872:	8e ef       	ldi	r24, 0xFE	; 254
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	77 dc       	rcall	.-1810   	; 0x166 <_Z14bLightStrengthi>
     878:	ff ef       	ldi	r31, 0xFF	; 255
     87a:	29 e6       	ldi	r18, 0x69	; 105
     87c:	88 e1       	ldi	r24, 0x18	; 24
     87e:	f1 50       	subi	r31, 0x01	; 1
     880:	20 40       	sbci	r18, 0x00	; 0
     882:	80 40       	sbci	r24, 0x00	; 0
     884:	e1 f7       	brne	.-8      	; 0x87e <__LOCK_REGION_LENGTH__+0x47e>
     886:	00 c0       	rjmp	.+0      	; 0x888 <__LOCK_REGION_LENGTH__+0x488>
				_delay_ms(500);
				TCNT3 = 0;
     888:	00 00       	nop
     88a:	19 82       	std	Y+1, r1	; 0x01
				bLightStrength(15);
     88c:	18 82       	st	Y, r1
     88e:	8f e0       	ldi	r24, 0x0F	; 15
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	69 dc       	rcall	.-1838   	; 0x166 <_Z14bLightStrengthi>
     894:	9f ef       	ldi	r25, 0xFF	; 255
     896:	e7 e8       	ldi	r30, 0x87	; 135
     898:	f3 e1       	ldi	r31, 0x13	; 19
     89a:	91 50       	subi	r25, 0x01	; 1
     89c:	e0 40       	sbci	r30, 0x00	; 0
     89e:	f0 40       	sbci	r31, 0x00	; 0
     8a0:	e1 f7       	brne	.-8      	; 0x89a <__LOCK_REGION_LENGTH__+0x49a>
     8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <__LOCK_REGION_LENGTH__+0x4a4>
     8a4:	00 00       	nop
				_delay_ms(400);
				MotorMode = 1;
     8a6:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <__data_end+0x1>
     8aa:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <__data_end>
     8ae:	2f ef       	ldi	r18, 0xFF	; 255
     8b0:	81 ee       	ldi	r24, 0xE1	; 225
     8b2:	94 e0       	ldi	r25, 0x04	; 4
     8b4:	21 50       	subi	r18, 0x01	; 1
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	90 40       	sbci	r25, 0x00	; 0
     8ba:	e1 f7       	brne	.-8      	; 0x8b4 <__LOCK_REGION_LENGTH__+0x4b4>
     8bc:	00 c0       	rjmp	.+0      	; 0x8be <__LOCK_REGION_LENGTH__+0x4be>
				_delay_ms(100);
				TCNT1 = 0;
     8be:	00 00       	nop
     8c0:	f8 01       	movw	r30, r16
     8c2:	11 82       	std	Z+1, r1	; 0x01
				setSpeed(99.0);
     8c4:	10 82       	st	Z, r1
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	86 ec       	ldi	r24, 0xC6	; 198
				counter = 12;
     8cc:	92 e4       	ldi	r25, 0x42	; 66
     8ce:	4b d0       	rcall	.+150    	; 0x966 <_Z8setSpeedf>
     8d0:	90 92 05 02 	sts	0x0205, r9	; 0x800205 <counter+0x1>
			}
			
			break;
			
			case 13: // Stop efter 7. brik
			if(newCount){
     8d4:	80 92 04 02 	sts	0x0204, r8	; 0x800204 <counter>
     8d8:	b4 cd       	rjmp	.-1176   	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     8da:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
				stopSOMO();
     8de:	88 23       	and	r24, r24
     8e0:	09 f4       	brne	.+2      	; 0x8e4 <__LOCK_REGION_LENGTH__+0x4e4>
     8e2:	af cd       	rjmp	.-1186   	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     8e4:	a5 d0       	rcall	.+330    	; 0xa30 <_Z8stopSOMOv>
     8e6:	8f e3       	ldi	r24, 0x3F	; 63
     8e8:	9c e9       	ldi	r25, 0x9C	; 156
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	f1 f7       	brne	.-4      	; 0x8ea <__LOCK_REGION_LENGTH__+0x4ea>
				
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <__LOCK_REGION_LENGTH__+0x4f0>
     8f0:	00 00       	nop
     8f2:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
     8f6:	9f ef       	ldi	r25, 0xFF	; 255
     8f8:	e3 ed       	ldi	r30, 0xD3	; 211
     8fa:	f0 e3       	ldi	r31, 0x30	; 48
     8fc:	91 50       	subi	r25, 0x01	; 1
     8fe:	e0 40       	sbci	r30, 0x00	; 0
     900:	f0 40       	sbci	r31, 0x00	; 0
     902:	e1 f7       	brne	.-8      	; 0x8fc <__LOCK_REGION_LENGTH__+0x4fc>
				_delay_ms(1000);
				TCNT3 = 0;
     904:	00 c0       	rjmp	.+0      	; 0x906 <__LOCK_REGION_LENGTH__+0x506>
     906:	00 00       	nop
				bLightStrength(254);
     908:	19 82       	std	Y+1, r1	; 0x01
     90a:	18 82       	st	Y, r1
     90c:	8e ef       	ldi	r24, 0xFE	; 254
     90e:	90 e0       	ldi	r25, 0x00	; 0
				MotorMode = 0;
     910:	2a dc       	rcall	.-1964   	; 0x166 <_Z14bLightStrengthi>
     912:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__data_end+0x1>
     916:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
     91a:	2f ef       	ldi	r18, 0xFF	; 255
     91c:	89 e6       	ldi	r24, 0x69	; 105
     91e:	98 e1       	ldi	r25, 0x18	; 24
     920:	21 50       	subi	r18, 0x01	; 1
     922:	80 40       	sbci	r24, 0x00	; 0
     924:	90 40       	sbci	r25, 0x00	; 0
     926:	e1 f7       	brne	.-8      	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
     928:	00 c0       	rjmp	.+0      	; 0x92a <__LOCK_REGION_LENGTH__+0x52a>
				_delay_ms(500);
				fLightOff();
     92a:	00 00       	nop
     92c:	36 dc       	rcall	.-1940   	; 0x19a <_Z9fLightOffv>
				stopSOMO();
     92e:	80 d0       	rcall	.+256    	; 0xa30 <_Z8stopSOMOv>
     930:	f5 01       	movw	r30, r10
				TIMSK3 = 0b00000000;
     932:	10 82       	st	Z, r1
     934:	18 b8       	out	0x08, r1	; 8
				PORTC = 0b00000000;
     936:	6b d0       	rcall	.+214    	; 0xa0e <_Z8playNextv>
				//playEndSound(); //Mario end
				playNext();
     938:	84 cd       	rjmp	.-1272   	; 0x442 <__LOCK_REGION_LENGTH__+0x42>

0000093a <_Z9initMotorv>:
#include "MotorDriver.h"
#include <stdio.h>
#include <avr/io.h>

void initMotor(){
	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<WGM11)|(0<<WGM10); // Set compare mode 3 for OCR1A, clear on upcount, set on downcount.
     93a:	82 e8       	ldi	r24, 0x82	; 130
     93c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = (1<<WGM13)|(0<<WGM12)|(1<<CS12)|(0<<CS11)|(0<<CS10); // Set Mode 10, PWM Phase correct ICR1 TOP & 256 prescaler
     940:	84 e1       	ldi	r24, 0x14	; 20
     942:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	ICR1 = 125;
     946:	8d e7       	ldi	r24, 0x7D	; 125
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     94e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	TIMSK1 = 0b00000010;
     952:	82 e0       	ldi	r24, 0x02	; 2
     954:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
	OCR1A = 0;
     958:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     95c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	DDRA = 0xFF; // Make pin A ports outputs, so we can trigger the H-Bridge.
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	81 b9       	out	0x01, r24	; 1
     964:	08 95       	ret

00000966 <_Z8setSpeedf>:
}

void setSpeed(float speed) {
     966:	cf 92       	push	r12
     968:	df 92       	push	r13
     96a:	ef 92       	push	r14
     96c:	ff 92       	push	r15
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	6b 01       	movw	r12, r22
     974:	7c 01       	movw	r14, r24
	
	if(speed > 100){
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	48 ec       	ldi	r20, 0xC8	; 200
     97c:	52 e4       	ldi	r21, 0x42	; 66
     97e:	a3 d2       	rcall	.+1350   	; 0xec6 <__gesf2>
     980:	18 16       	cp	r1, r24
     982:	64 f0       	brlt	.+24     	; 0x99c <_Z8setSpeedf+0x36>
		speed = 100;
	}
	if(speed < 0){
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	a9 01       	movw	r20, r18
     98a:	c7 01       	movw	r24, r14
     98c:	b6 01       	movw	r22, r12
     98e:	51 d1       	rcall	.+674    	; 0xc32 <__cmpsf2>
     990:	88 23       	and	r24, r24
     992:	64 f4       	brge	.+24     	; 0x9ac <_Z8setSpeedf+0x46>
		speed = 0;
     994:	c1 2c       	mov	r12, r1
     996:	d1 2c       	mov	r13, r1
     998:	76 01       	movw	r14, r12
     99a:	08 c0       	rjmp	.+16     	; 0x9ac <_Z8setSpeedf+0x46>
}

void setSpeed(float speed) {
	
	if(speed > 100){
		speed = 100;
     99c:	0f 2e       	mov	r0, r31
     99e:	c1 2c       	mov	r12, r1
     9a0:	d1 2c       	mov	r13, r1
     9a2:	f8 ec       	ldi	r31, 0xC8	; 200
     9a4:	ef 2e       	mov	r14, r31
     9a6:	f2 e4       	ldi	r31, 0x42	; 66
     9a8:	ff 2e       	mov	r15, r31
     9aa:	f0 2d       	mov	r31, r0
	}
	if(speed < 0){
		speed = 0;
	}
	speed = speed / 100;
	OCR1A = (1-speed)*ICR1;
     9ac:	c0 91 86 00 	lds	r28, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
     9b0:	d0 91 87 00 	lds	r29, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	48 ec       	ldi	r20, 0xC8	; 200
     9ba:	52 e4       	ldi	r21, 0x42	; 66
     9bc:	c7 01       	movw	r24, r14
     9be:	b6 01       	movw	r22, r12
     9c0:	3c d1       	rcall	.+632    	; 0xc3a <__divsf3>
     9c2:	9b 01       	movw	r18, r22
     9c4:	ac 01       	movw	r20, r24
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	80 e8       	ldi	r24, 0x80	; 128
     9cc:	9f e3       	ldi	r25, 0x3F	; 63
     9ce:	cc d0       	rcall	.+408    	; 0xb68 <__subsf3>
     9d0:	6b 01       	movw	r12, r22
     9d2:	7c 01       	movw	r14, r24
     9d4:	be 01       	movw	r22, r28
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	c3 d1       	rcall	.+902    	; 0xd62 <__floatunsisf>
     9dc:	9b 01       	movw	r18, r22
     9de:	ac 01       	movw	r20, r24
     9e0:	c7 01       	movw	r24, r14
     9e2:	b6 01       	movw	r22, r12
     9e4:	74 d2       	rcall	.+1256   	; 0xece <__mulsf3>
     9e6:	91 d1       	rcall	.+802    	; 0xd0a <__fixunssfsi>
     9e8:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     9ec:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	ff 90       	pop	r15
     9f6:	ef 90       	pop	r14
     9f8:	df 90       	pop	r13
     9fa:	cf 90       	pop	r12
     9fc:	08 95       	ret

000009fe <_Z8SendCharc>:
	SendChar(0x00);
	SendChar(0x02);
	SendChar(0x01);
	SendChar(0xFF);
	SendChar(0xEF);
	SendChar(0xEF);
     9fe:	e0 ed       	ldi	r30, 0xD0	; 208
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	90 81       	ld	r25, Z
     a04:	95 ff       	sbrs	r25, 5
     a06:	fd cf       	rjmp	.-6      	; 0xa02 <_Z8SendCharc+0x4>
     a08:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     a0c:	08 95       	ret

00000a0e <_Z8playNextv>:
     a0e:	8e e7       	ldi	r24, 0x7E	; 126
     a10:	f6 df       	rcall	.-20     	; 0x9fe <_Z8SendCharc>
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	f4 df       	rcall	.-24     	; 0x9fe <_Z8SendCharc>
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	f2 df       	rcall	.-28     	; 0x9fe <_Z8SendCharc>
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	f0 df       	rcall	.-32     	; 0x9fe <_Z8SendCharc>
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	ee df       	rcall	.-36     	; 0x9fe <_Z8SendCharc>
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	ec df       	rcall	.-40     	; 0x9fe <_Z8SendCharc>
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	ea df       	rcall	.-44     	; 0x9fe <_Z8SendCharc>
     a2a:	8f ee       	ldi	r24, 0xEF	; 239
     a2c:	e8 cf       	rjmp	.-48     	; 0x9fe <_Z8SendCharc>
     a2e:	08 95       	ret

00000a30 <_Z8stopSOMOv>:
     a30:	8e e7       	ldi	r24, 0x7E	; 126
     a32:	e5 df       	rcall	.-54     	; 0x9fe <_Z8SendCharc>
     a34:	8c e0       	ldi	r24, 0x0C	; 12
     a36:	e3 df       	rcall	.-58     	; 0x9fe <_Z8SendCharc>
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	e1 df       	rcall	.-62     	; 0x9fe <_Z8SendCharc>
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	df df       	rcall	.-66     	; 0x9fe <_Z8SendCharc>
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	dd df       	rcall	.-70     	; 0x9fe <_Z8SendCharc>
     a44:	8f ef       	ldi	r24, 0xFF	; 255
     a46:	db df       	rcall	.-74     	; 0x9fe <_Z8SendCharc>
     a48:	84 ef       	ldi	r24, 0xF4	; 244
     a4a:	d9 df       	rcall	.-78     	; 0x9fe <_Z8SendCharc>
     a4c:	8f ee       	ldi	r24, 0xEF	; 239
     a4e:	d7 cf       	rjmp	.-82     	; 0x9fe <_Z8SendCharc>
     a50:	08 95       	ret

00000a52 <_Z13playCoinSoundv>:
     a52:	8e e7       	ldi	r24, 0x7E	; 126
     a54:	d4 df       	rcall	.-88     	; 0x9fe <_Z8SendCharc>
     a56:	8f e0       	ldi	r24, 0x0F	; 15
     a58:	d2 df       	rcall	.-92     	; 0x9fe <_Z8SendCharc>
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	d0 df       	rcall	.-96     	; 0x9fe <_Z8SendCharc>
     a5e:	83 e0       	ldi	r24, 0x03	; 3
     a60:	ce df       	rcall	.-100    	; 0x9fe <_Z8SendCharc>
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	cc df       	rcall	.-104    	; 0x9fe <_Z8SendCharc>
     a66:	8f ef       	ldi	r24, 0xFF	; 255
     a68:	ca df       	rcall	.-108    	; 0x9fe <_Z8SendCharc>
     a6a:	8f ee       	ldi	r24, 0xEF	; 239
     a6c:	c8 df       	rcall	.-112    	; 0x9fe <_Z8SendCharc>
     a6e:	8f ee       	ldi	r24, 0xEF	; 239
     a70:	c6 cf       	rjmp	.-116    	; 0x9fe <_Z8SendCharc>
     a72:	08 95       	ret

00000a74 <_Z14playStartSoundv>:
     a74:	8e e7       	ldi	r24, 0x7E	; 126
     a76:	c3 df       	rcall	.-122    	; 0x9fe <_Z8SendCharc>
     a78:	8f e0       	ldi	r24, 0x0F	; 15
     a7a:	c1 df       	rcall	.-126    	; 0x9fe <_Z8SendCharc>
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	bf df       	rcall	.-130    	; 0x9fe <_Z8SendCharc>
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	bd df       	rcall	.-134    	; 0x9fe <_Z8SendCharc>
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	bb df       	rcall	.-138    	; 0x9fe <_Z8SendCharc>
     a88:	8f ef       	ldi	r24, 0xFF	; 255
     a8a:	b9 df       	rcall	.-142    	; 0x9fe <_Z8SendCharc>
     a8c:	8f ee       	ldi	r24, 0xEF	; 239
     a8e:	b7 df       	rcall	.-146    	; 0x9fe <_Z8SendCharc>
     a90:	8f ee       	ldi	r24, 0xEF	; 239
     a92:	b5 cf       	rjmp	.-150    	; 0x9fe <_Z8SendCharc>
     a94:	08 95       	ret

00000a96 <_Z9volumeMaxv>:
};

void volumeMax()
{

	SendChar(0x7E);
     a96:	8e e7       	ldi	r24, 0x7E	; 126
     a98:	b2 df       	rcall	.-156    	; 0x9fe <_Z8SendCharc>
	SendChar(0x06);
     a9a:	86 e0       	ldi	r24, 0x06	; 6
     a9c:	b0 df       	rcall	.-160    	; 0x9fe <_Z8SendCharc>
	SendChar(0x00);
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	ae df       	rcall	.-164    	; 0x9fe <_Z8SendCharc>
	SendChar(0x00);
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	ac df       	rcall	.-168    	; 0x9fe <_Z8SendCharc>
	SendChar(0x1E);
     aa6:	8e e1       	ldi	r24, 0x1E	; 30
     aa8:	aa df       	rcall	.-172    	; 0x9fe <_Z8SendCharc>
	SendChar(0xFF);
     aaa:	8f ef       	ldi	r24, 0xFF	; 255
     aac:	a8 df       	rcall	.-176    	; 0x9fe <_Z8SendCharc>
	SendChar(0xDC);
     aae:	8c ed       	ldi	r24, 0xDC	; 220
     ab0:	a6 df       	rcall	.-180    	; 0x9fe <_Z8SendCharc>
     ab2:	8f ee       	ldi	r24, 0xEF	; 239
	SendChar(0xEF);
     ab4:	a4 cf       	rjmp	.-184    	; 0x9fe <_Z8SendCharc>
     ab6:	08 95       	ret

00000ab8 <_Z8InitUARTmhb>:
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
    Baud rate = 9600.
    Data bits = 8.
*************************************************************************/
void InitUART(unsigned long BAUD, unsigned char DataBit, bool Rx_Int)
{
   if(Rx_Int){
     abc:	22 23       	and	r18, r18
     abe:	29 f0       	breq	.+10     	; 0xaca <_Z8InitUARTmhb+0x12>
	  UCSR2B = 0b10011000; 
     ac0:	28 e9       	ldi	r18, 0x98	; 152
     ac2:	20 93 d1 00 	sts	0x00D1, r18	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
	  sei();
     ac6:	78 94       	sei
     ac8:	03 c0       	rjmp	.+6      	; 0xad0 <_Z8InitUARTmhb+0x18>
   }else{
	   UCSR2B = 0b00011000;
     aca:	28 e1       	ldi	r18, 0x18	; 24
     acc:	20 93 d1 00 	sts	0x00D1, r18	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
   }
   if((BAUD >= 300) && (BAUD <= 115200) && (DataBit >= 5) && (DataBit <= 8)){
     ad0:	8b 01       	movw	r16, r22
     ad2:	9c 01       	movw	r18, r24
     ad4:	0c 52       	subi	r16, 0x2C	; 44
     ad6:	11 40       	sbci	r17, 0x01	; 1
     ad8:	21 09       	sbc	r18, r1
     ada:	31 09       	sbc	r19, r1
     adc:	05 3d       	cpi	r16, 0xD5	; 213
     ade:	10 4c       	sbci	r17, 0xC0	; 192
     ae0:	21 40       	sbci	r18, 0x01	; 1
     ae2:	31 05       	cpc	r19, r1
     ae4:	08 f5       	brcc	.+66     	; 0xb28 <_Z8InitUARTmhb+0x70>
     ae6:	2b ef       	ldi	r18, 0xFB	; 251
     ae8:	24 0f       	add	r18, r20
     aea:	24 30       	cpi	r18, 0x04	; 4
     aec:	e8 f4       	brcc	.+58     	; 0xb28 <_Z8InitUARTmhb+0x70>
	   switch(DataBit){
     aee:	46 30       	cpi	r20, 0x06	; 6
     af0:	61 f0       	breq	.+24     	; 0xb0a <_Z8InitUARTmhb+0x52>
     af2:	18 f4       	brcc	.+6      	; 0xafa <_Z8InitUARTmhb+0x42>
     af4:	45 30       	cpi	r20, 0x05	; 5
     af6:	31 f0       	breq	.+12     	; 0xb04 <_Z8InitUARTmhb+0x4c>
     af8:	14 c0       	rjmp	.+40     	; 0xb22 <_Z8InitUARTmhb+0x6a>
     afa:	47 30       	cpi	r20, 0x07	; 7
     afc:	51 f0       	breq	.+20     	; 0xb12 <_Z8InitUARTmhb+0x5a>
     afe:	48 30       	cpi	r20, 0x08	; 8
     b00:	61 f0       	breq	.+24     	; 0xb1a <_Z8InitUARTmhb+0x62>
     b02:	0f c0       	rjmp	.+30     	; 0xb22 <_Z8InitUARTmhb+0x6a>
		   case 5:
			   UCSR2C = 0b00000000;
     b04:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			   break;
     b08:	0f c0       	rjmp	.+30     	; 0xb28 <_Z8InitUARTmhb+0x70>
		   
		   case 6:
			   UCSR2C = 0b00000010;
     b0a:	22 e0       	ldi	r18, 0x02	; 2
     b0c:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			   break;
     b10:	0b c0       	rjmp	.+22     	; 0xb28 <_Z8InitUARTmhb+0x70>
		   
		   case 7:
			   UCSR2C = 0b00000100;
     b12:	24 e0       	ldi	r18, 0x04	; 4
     b14:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			   break;
     b18:	07 c0       	rjmp	.+14     	; 0xb28 <_Z8InitUARTmhb+0x70>
		   
		   case 8:
			   UCSR2C = 0b00000110;
     b1a:	26 e0       	ldi	r18, 0x06	; 6
     b1c:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			   break;
     b20:	03 c0       	rjmp	.+6      	; 0xb28 <_Z8InitUARTmhb+0x70>
		   
		   default:
			   UCSR2C = 0b00000110;
     b22:	26 e0       	ldi	r18, 0x06	; 6
     b24:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			   break;
	   }
	}
	UBRR2L = ((F_CPU/(16*BAUD))-1);
     b28:	dc 01       	movw	r26, r24
     b2a:	cb 01       	movw	r24, r22
     b2c:	88 0f       	add	r24, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	aa 1f       	adc	r26, r26
     b32:	bb 1f       	adc	r27, r27
     b34:	88 0f       	add	r24, r24
     b36:	99 1f       	adc	r25, r25
     b38:	aa 1f       	adc	r26, r26
     b3a:	bb 1f       	adc	r27, r27
     b3c:	9c 01       	movw	r18, r24
     b3e:	ad 01       	movw	r20, r26
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	22 0f       	add	r18, r18
     b4a:	33 1f       	adc	r19, r19
     b4c:	44 1f       	adc	r20, r20
     b4e:	55 1f       	adc	r21, r21
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	74 e2       	ldi	r23, 0x24	; 36
     b54:	84 ef       	ldi	r24, 0xF4	; 244
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	1d d2       	rcall	.+1082   	; 0xf94 <__udivmodsi4>
     b5a:	21 50       	subi	r18, 0x01	; 1
     b5c:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	volumeMax();
     b60:	9a df       	rcall	.-204    	; 0xa96 <_Z9volumeMaxv>
     b62:	1f 91       	pop	r17
}
     b64:	0f 91       	pop	r16
     b66:	08 95       	ret

00000b68 <__subsf3>:
     b68:	50 58       	subi	r21, 0x80	; 128

00000b6a <__addsf3>:
     b6a:	bb 27       	eor	r27, r27
     b6c:	aa 27       	eor	r26, r26
     b6e:	0e d0       	rcall	.+28     	; 0xb8c <__addsf3x>
     b70:	70 c1       	rjmp	.+736    	; 0xe52 <__fp_round>
     b72:	61 d1       	rcall	.+706    	; 0xe36 <__fp_pscA>
     b74:	30 f0       	brcs	.+12     	; 0xb82 <__addsf3+0x18>
     b76:	66 d1       	rcall	.+716    	; 0xe44 <__fp_pscB>
     b78:	20 f0       	brcs	.+8      	; 0xb82 <__addsf3+0x18>
     b7a:	31 f4       	brne	.+12     	; 0xb88 <__addsf3+0x1e>
     b7c:	9f 3f       	cpi	r25, 0xFF	; 255
     b7e:	11 f4       	brne	.+4      	; 0xb84 <__addsf3+0x1a>
     b80:	1e f4       	brtc	.+6      	; 0xb88 <__addsf3+0x1e>
     b82:	56 c1       	rjmp	.+684    	; 0xe30 <__fp_nan>
     b84:	0e f4       	brtc	.+2      	; 0xb88 <__addsf3+0x1e>
     b86:	e0 95       	com	r30
     b88:	e7 fb       	bst	r30, 7
     b8a:	4c c1       	rjmp	.+664    	; 0xe24 <__fp_inf>

00000b8c <__addsf3x>:
     b8c:	e9 2f       	mov	r30, r25
     b8e:	72 d1       	rcall	.+740    	; 0xe74 <__fp_split3>
     b90:	80 f3       	brcs	.-32     	; 0xb72 <__addsf3+0x8>
     b92:	ba 17       	cp	r27, r26
     b94:	62 07       	cpc	r22, r18
     b96:	73 07       	cpc	r23, r19
     b98:	84 07       	cpc	r24, r20
     b9a:	95 07       	cpc	r25, r21
     b9c:	18 f0       	brcs	.+6      	; 0xba4 <__addsf3x+0x18>
     b9e:	71 f4       	brne	.+28     	; 0xbbc <__addsf3x+0x30>
     ba0:	9e f5       	brtc	.+102    	; 0xc08 <__addsf3x+0x7c>
     ba2:	8a c1       	rjmp	.+788    	; 0xeb8 <__fp_zero>
     ba4:	0e f4       	brtc	.+2      	; 0xba8 <__addsf3x+0x1c>
     ba6:	e0 95       	com	r30
     ba8:	0b 2e       	mov	r0, r27
     baa:	ba 2f       	mov	r27, r26
     bac:	a0 2d       	mov	r26, r0
     bae:	0b 01       	movw	r0, r22
     bb0:	b9 01       	movw	r22, r18
     bb2:	90 01       	movw	r18, r0
     bb4:	0c 01       	movw	r0, r24
     bb6:	ca 01       	movw	r24, r20
     bb8:	a0 01       	movw	r20, r0
     bba:	11 24       	eor	r1, r1
     bbc:	ff 27       	eor	r31, r31
     bbe:	59 1b       	sub	r21, r25
     bc0:	99 f0       	breq	.+38     	; 0xbe8 <__addsf3x+0x5c>
     bc2:	59 3f       	cpi	r21, 0xF9	; 249
     bc4:	50 f4       	brcc	.+20     	; 0xbda <__addsf3x+0x4e>
     bc6:	50 3e       	cpi	r21, 0xE0	; 224
     bc8:	68 f1       	brcs	.+90     	; 0xc24 <__addsf3x+0x98>
     bca:	1a 16       	cp	r1, r26
     bcc:	f0 40       	sbci	r31, 0x00	; 0
     bce:	a2 2f       	mov	r26, r18
     bd0:	23 2f       	mov	r18, r19
     bd2:	34 2f       	mov	r19, r20
     bd4:	44 27       	eor	r20, r20
     bd6:	58 5f       	subi	r21, 0xF8	; 248
     bd8:	f3 cf       	rjmp	.-26     	; 0xbc0 <__addsf3x+0x34>
     bda:	46 95       	lsr	r20
     bdc:	37 95       	ror	r19
     bde:	27 95       	ror	r18
     be0:	a7 95       	ror	r26
     be2:	f0 40       	sbci	r31, 0x00	; 0
     be4:	53 95       	inc	r21
     be6:	c9 f7       	brne	.-14     	; 0xbda <__addsf3x+0x4e>
     be8:	7e f4       	brtc	.+30     	; 0xc08 <__addsf3x+0x7c>
     bea:	1f 16       	cp	r1, r31
     bec:	ba 0b       	sbc	r27, r26
     bee:	62 0b       	sbc	r22, r18
     bf0:	73 0b       	sbc	r23, r19
     bf2:	84 0b       	sbc	r24, r20
     bf4:	ba f0       	brmi	.+46     	; 0xc24 <__addsf3x+0x98>
     bf6:	91 50       	subi	r25, 0x01	; 1
     bf8:	a1 f0       	breq	.+40     	; 0xc22 <__addsf3x+0x96>
     bfa:	ff 0f       	add	r31, r31
     bfc:	bb 1f       	adc	r27, r27
     bfe:	66 1f       	adc	r22, r22
     c00:	77 1f       	adc	r23, r23
     c02:	88 1f       	adc	r24, r24
     c04:	c2 f7       	brpl	.-16     	; 0xbf6 <__addsf3x+0x6a>
     c06:	0e c0       	rjmp	.+28     	; 0xc24 <__addsf3x+0x98>
     c08:	ba 0f       	add	r27, r26
     c0a:	62 1f       	adc	r22, r18
     c0c:	73 1f       	adc	r23, r19
     c0e:	84 1f       	adc	r24, r20
     c10:	48 f4       	brcc	.+18     	; 0xc24 <__addsf3x+0x98>
     c12:	87 95       	ror	r24
     c14:	77 95       	ror	r23
     c16:	67 95       	ror	r22
     c18:	b7 95       	ror	r27
     c1a:	f7 95       	ror	r31
     c1c:	9e 3f       	cpi	r25, 0xFE	; 254
     c1e:	08 f0       	brcs	.+2      	; 0xc22 <__addsf3x+0x96>
     c20:	b3 cf       	rjmp	.-154    	; 0xb88 <__addsf3+0x1e>
     c22:	93 95       	inc	r25
     c24:	88 0f       	add	r24, r24
     c26:	08 f0       	brcs	.+2      	; 0xc2a <__addsf3x+0x9e>
     c28:	99 27       	eor	r25, r25
     c2a:	ee 0f       	add	r30, r30
     c2c:	97 95       	ror	r25
     c2e:	87 95       	ror	r24
     c30:	08 95       	ret

00000c32 <__cmpsf2>:
     c32:	d4 d0       	rcall	.+424    	; 0xddc <__fp_cmp>
     c34:	08 f4       	brcc	.+2      	; 0xc38 <__cmpsf2+0x6>
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	08 95       	ret

00000c3a <__divsf3>:
     c3a:	0c d0       	rcall	.+24     	; 0xc54 <__divsf3x>
     c3c:	0a c1       	rjmp	.+532    	; 0xe52 <__fp_round>
     c3e:	02 d1       	rcall	.+516    	; 0xe44 <__fp_pscB>
     c40:	40 f0       	brcs	.+16     	; 0xc52 <__divsf3+0x18>
     c42:	f9 d0       	rcall	.+498    	; 0xe36 <__fp_pscA>
     c44:	30 f0       	brcs	.+12     	; 0xc52 <__divsf3+0x18>
     c46:	21 f4       	brne	.+8      	; 0xc50 <__divsf3+0x16>
     c48:	5f 3f       	cpi	r21, 0xFF	; 255
     c4a:	19 f0       	breq	.+6      	; 0xc52 <__divsf3+0x18>
     c4c:	eb c0       	rjmp	.+470    	; 0xe24 <__fp_inf>
     c4e:	51 11       	cpse	r21, r1
     c50:	34 c1       	rjmp	.+616    	; 0xeba <__fp_szero>
     c52:	ee c0       	rjmp	.+476    	; 0xe30 <__fp_nan>

00000c54 <__divsf3x>:
     c54:	0f d1       	rcall	.+542    	; 0xe74 <__fp_split3>
     c56:	98 f3       	brcs	.-26     	; 0xc3e <__divsf3+0x4>

00000c58 <__divsf3_pse>:
     c58:	99 23       	and	r25, r25
     c5a:	c9 f3       	breq	.-14     	; 0xc4e <__divsf3+0x14>
     c5c:	55 23       	and	r21, r21
     c5e:	b1 f3       	breq	.-20     	; 0xc4c <__divsf3+0x12>
     c60:	95 1b       	sub	r25, r21
     c62:	55 0b       	sbc	r21, r21
     c64:	bb 27       	eor	r27, r27
     c66:	aa 27       	eor	r26, r26
     c68:	62 17       	cp	r22, r18
     c6a:	73 07       	cpc	r23, r19
     c6c:	84 07       	cpc	r24, r20
     c6e:	38 f0       	brcs	.+14     	; 0xc7e <__divsf3_pse+0x26>
     c70:	9f 5f       	subi	r25, 0xFF	; 255
     c72:	5f 4f       	sbci	r21, 0xFF	; 255
     c74:	22 0f       	add	r18, r18
     c76:	33 1f       	adc	r19, r19
     c78:	44 1f       	adc	r20, r20
     c7a:	aa 1f       	adc	r26, r26
     c7c:	a9 f3       	breq	.-22     	; 0xc68 <__divsf3_pse+0x10>
     c7e:	33 d0       	rcall	.+102    	; 0xce6 <__divsf3_pse+0x8e>
     c80:	0e 2e       	mov	r0, r30
     c82:	3a f0       	brmi	.+14     	; 0xc92 <__divsf3_pse+0x3a>
     c84:	e0 e8       	ldi	r30, 0x80	; 128
     c86:	30 d0       	rcall	.+96     	; 0xce8 <__divsf3_pse+0x90>
     c88:	91 50       	subi	r25, 0x01	; 1
     c8a:	50 40       	sbci	r21, 0x00	; 0
     c8c:	e6 95       	lsr	r30
     c8e:	00 1c       	adc	r0, r0
     c90:	ca f7       	brpl	.-14     	; 0xc84 <__divsf3_pse+0x2c>
     c92:	29 d0       	rcall	.+82     	; 0xce6 <__divsf3_pse+0x8e>
     c94:	fe 2f       	mov	r31, r30
     c96:	27 d0       	rcall	.+78     	; 0xce6 <__divsf3_pse+0x8e>
     c98:	66 0f       	add	r22, r22
     c9a:	77 1f       	adc	r23, r23
     c9c:	88 1f       	adc	r24, r24
     c9e:	bb 1f       	adc	r27, r27
     ca0:	26 17       	cp	r18, r22
     ca2:	37 07       	cpc	r19, r23
     ca4:	48 07       	cpc	r20, r24
     ca6:	ab 07       	cpc	r26, r27
     ca8:	b0 e8       	ldi	r27, 0x80	; 128
     caa:	09 f0       	breq	.+2      	; 0xcae <__divsf3_pse+0x56>
     cac:	bb 0b       	sbc	r27, r27
     cae:	80 2d       	mov	r24, r0
     cb0:	bf 01       	movw	r22, r30
     cb2:	ff 27       	eor	r31, r31
     cb4:	93 58       	subi	r25, 0x83	; 131
     cb6:	5f 4f       	sbci	r21, 0xFF	; 255
     cb8:	2a f0       	brmi	.+10     	; 0xcc4 <__divsf3_pse+0x6c>
     cba:	9e 3f       	cpi	r25, 0xFE	; 254
     cbc:	51 05       	cpc	r21, r1
     cbe:	68 f0       	brcs	.+26     	; 0xcda <__divsf3_pse+0x82>
     cc0:	b1 c0       	rjmp	.+354    	; 0xe24 <__fp_inf>
     cc2:	fb c0       	rjmp	.+502    	; 0xeba <__fp_szero>
     cc4:	5f 3f       	cpi	r21, 0xFF	; 255
     cc6:	ec f3       	brlt	.-6      	; 0xcc2 <__divsf3_pse+0x6a>
     cc8:	98 3e       	cpi	r25, 0xE8	; 232
     cca:	dc f3       	brlt	.-10     	; 0xcc2 <__divsf3_pse+0x6a>
     ccc:	86 95       	lsr	r24
     cce:	77 95       	ror	r23
     cd0:	67 95       	ror	r22
     cd2:	b7 95       	ror	r27
     cd4:	f7 95       	ror	r31
     cd6:	9f 5f       	subi	r25, 0xFF	; 255
     cd8:	c9 f7       	brne	.-14     	; 0xccc <__divsf3_pse+0x74>
     cda:	88 0f       	add	r24, r24
     cdc:	91 1d       	adc	r25, r1
     cde:	96 95       	lsr	r25
     ce0:	87 95       	ror	r24
     ce2:	97 f9       	bld	r25, 7
     ce4:	08 95       	ret
     ce6:	e1 e0       	ldi	r30, 0x01	; 1
     ce8:	66 0f       	add	r22, r22
     cea:	77 1f       	adc	r23, r23
     cec:	88 1f       	adc	r24, r24
     cee:	bb 1f       	adc	r27, r27
     cf0:	62 17       	cp	r22, r18
     cf2:	73 07       	cpc	r23, r19
     cf4:	84 07       	cpc	r24, r20
     cf6:	ba 07       	cpc	r27, r26
     cf8:	20 f0       	brcs	.+8      	; 0xd02 <__divsf3_pse+0xaa>
     cfa:	62 1b       	sub	r22, r18
     cfc:	73 0b       	sbc	r23, r19
     cfe:	84 0b       	sbc	r24, r20
     d00:	ba 0b       	sbc	r27, r26
     d02:	ee 1f       	adc	r30, r30
     d04:	88 f7       	brcc	.-30     	; 0xce8 <__divsf3_pse+0x90>
     d06:	e0 95       	com	r30
     d08:	08 95       	ret

00000d0a <__fixunssfsi>:
     d0a:	bc d0       	rcall	.+376    	; 0xe84 <__fp_splitA>
     d0c:	88 f0       	brcs	.+34     	; 0xd30 <__fixunssfsi+0x26>
     d0e:	9f 57       	subi	r25, 0x7F	; 127
     d10:	90 f0       	brcs	.+36     	; 0xd36 <__fixunssfsi+0x2c>
     d12:	b9 2f       	mov	r27, r25
     d14:	99 27       	eor	r25, r25
     d16:	b7 51       	subi	r27, 0x17	; 23
     d18:	a0 f0       	brcs	.+40     	; 0xd42 <__fixunssfsi+0x38>
     d1a:	d1 f0       	breq	.+52     	; 0xd50 <__fixunssfsi+0x46>
     d1c:	66 0f       	add	r22, r22
     d1e:	77 1f       	adc	r23, r23
     d20:	88 1f       	adc	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	1a f0       	brmi	.+6      	; 0xd2c <__fixunssfsi+0x22>
     d26:	ba 95       	dec	r27
     d28:	c9 f7       	brne	.-14     	; 0xd1c <__fixunssfsi+0x12>
     d2a:	12 c0       	rjmp	.+36     	; 0xd50 <__fixunssfsi+0x46>
     d2c:	b1 30       	cpi	r27, 0x01	; 1
     d2e:	81 f0       	breq	.+32     	; 0xd50 <__fixunssfsi+0x46>
     d30:	c3 d0       	rcall	.+390    	; 0xeb8 <__fp_zero>
     d32:	b1 e0       	ldi	r27, 0x01	; 1
     d34:	08 95       	ret
     d36:	c0 c0       	rjmp	.+384    	; 0xeb8 <__fp_zero>
     d38:	67 2f       	mov	r22, r23
     d3a:	78 2f       	mov	r23, r24
     d3c:	88 27       	eor	r24, r24
     d3e:	b8 5f       	subi	r27, 0xF8	; 248
     d40:	39 f0       	breq	.+14     	; 0xd50 <__fixunssfsi+0x46>
     d42:	b9 3f       	cpi	r27, 0xF9	; 249
     d44:	cc f3       	brlt	.-14     	; 0xd38 <__fixunssfsi+0x2e>
     d46:	86 95       	lsr	r24
     d48:	77 95       	ror	r23
     d4a:	67 95       	ror	r22
     d4c:	b3 95       	inc	r27
     d4e:	d9 f7       	brne	.-10     	; 0xd46 <__fixunssfsi+0x3c>
     d50:	3e f4       	brtc	.+14     	; 0xd60 <__fixunssfsi+0x56>
     d52:	90 95       	com	r25
     d54:	80 95       	com	r24
     d56:	70 95       	com	r23
     d58:	61 95       	neg	r22
     d5a:	7f 4f       	sbci	r23, 0xFF	; 255
     d5c:	8f 4f       	sbci	r24, 0xFF	; 255
     d5e:	9f 4f       	sbci	r25, 0xFF	; 255
     d60:	08 95       	ret

00000d62 <__floatunsisf>:
     d62:	e8 94       	clt
     d64:	09 c0       	rjmp	.+18     	; 0xd78 <__floatsisf+0x12>

00000d66 <__floatsisf>:
     d66:	97 fb       	bst	r25, 7
     d68:	3e f4       	brtc	.+14     	; 0xd78 <__floatsisf+0x12>
     d6a:	90 95       	com	r25
     d6c:	80 95       	com	r24
     d6e:	70 95       	com	r23
     d70:	61 95       	neg	r22
     d72:	7f 4f       	sbci	r23, 0xFF	; 255
     d74:	8f 4f       	sbci	r24, 0xFF	; 255
     d76:	9f 4f       	sbci	r25, 0xFF	; 255
     d78:	99 23       	and	r25, r25
     d7a:	a9 f0       	breq	.+42     	; 0xda6 <__floatsisf+0x40>
     d7c:	f9 2f       	mov	r31, r25
     d7e:	96 e9       	ldi	r25, 0x96	; 150
     d80:	bb 27       	eor	r27, r27
     d82:	93 95       	inc	r25
     d84:	f6 95       	lsr	r31
     d86:	87 95       	ror	r24
     d88:	77 95       	ror	r23
     d8a:	67 95       	ror	r22
     d8c:	b7 95       	ror	r27
     d8e:	f1 11       	cpse	r31, r1
     d90:	f8 cf       	rjmp	.-16     	; 0xd82 <__floatsisf+0x1c>
     d92:	fa f4       	brpl	.+62     	; 0xdd2 <__floatsisf+0x6c>
     d94:	bb 0f       	add	r27, r27
     d96:	11 f4       	brne	.+4      	; 0xd9c <__floatsisf+0x36>
     d98:	60 ff       	sbrs	r22, 0
     d9a:	1b c0       	rjmp	.+54     	; 0xdd2 <__floatsisf+0x6c>
     d9c:	6f 5f       	subi	r22, 0xFF	; 255
     d9e:	7f 4f       	sbci	r23, 0xFF	; 255
     da0:	8f 4f       	sbci	r24, 0xFF	; 255
     da2:	9f 4f       	sbci	r25, 0xFF	; 255
     da4:	16 c0       	rjmp	.+44     	; 0xdd2 <__floatsisf+0x6c>
     da6:	88 23       	and	r24, r24
     da8:	11 f0       	breq	.+4      	; 0xdae <__floatsisf+0x48>
     daa:	96 e9       	ldi	r25, 0x96	; 150
     dac:	11 c0       	rjmp	.+34     	; 0xdd0 <__floatsisf+0x6a>
     dae:	77 23       	and	r23, r23
     db0:	21 f0       	breq	.+8      	; 0xdba <__floatsisf+0x54>
     db2:	9e e8       	ldi	r25, 0x8E	; 142
     db4:	87 2f       	mov	r24, r23
     db6:	76 2f       	mov	r23, r22
     db8:	05 c0       	rjmp	.+10     	; 0xdc4 <__floatsisf+0x5e>
     dba:	66 23       	and	r22, r22
     dbc:	71 f0       	breq	.+28     	; 0xdda <__floatsisf+0x74>
     dbe:	96 e8       	ldi	r25, 0x86	; 134
     dc0:	86 2f       	mov	r24, r22
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	2a f0       	brmi	.+10     	; 0xdd2 <__floatsisf+0x6c>
     dc8:	9a 95       	dec	r25
     dca:	66 0f       	add	r22, r22
     dcc:	77 1f       	adc	r23, r23
     dce:	88 1f       	adc	r24, r24
     dd0:	da f7       	brpl	.-10     	; 0xdc8 <__floatsisf+0x62>
     dd2:	88 0f       	add	r24, r24
     dd4:	96 95       	lsr	r25
     dd6:	87 95       	ror	r24
     dd8:	97 f9       	bld	r25, 7
     dda:	08 95       	ret

00000ddc <__fp_cmp>:
     ddc:	99 0f       	add	r25, r25
     dde:	00 08       	sbc	r0, r0
     de0:	55 0f       	add	r21, r21
     de2:	aa 0b       	sbc	r26, r26
     de4:	e0 e8       	ldi	r30, 0x80	; 128
     de6:	fe ef       	ldi	r31, 0xFE	; 254
     de8:	16 16       	cp	r1, r22
     dea:	17 06       	cpc	r1, r23
     dec:	e8 07       	cpc	r30, r24
     dee:	f9 07       	cpc	r31, r25
     df0:	c0 f0       	brcs	.+48     	; 0xe22 <__fp_cmp+0x46>
     df2:	12 16       	cp	r1, r18
     df4:	13 06       	cpc	r1, r19
     df6:	e4 07       	cpc	r30, r20
     df8:	f5 07       	cpc	r31, r21
     dfa:	98 f0       	brcs	.+38     	; 0xe22 <__fp_cmp+0x46>
     dfc:	62 1b       	sub	r22, r18
     dfe:	73 0b       	sbc	r23, r19
     e00:	84 0b       	sbc	r24, r20
     e02:	95 0b       	sbc	r25, r21
     e04:	39 f4       	brne	.+14     	; 0xe14 <__fp_cmp+0x38>
     e06:	0a 26       	eor	r0, r26
     e08:	61 f0       	breq	.+24     	; 0xe22 <__fp_cmp+0x46>
     e0a:	23 2b       	or	r18, r19
     e0c:	24 2b       	or	r18, r20
     e0e:	25 2b       	or	r18, r21
     e10:	21 f4       	brne	.+8      	; 0xe1a <__fp_cmp+0x3e>
     e12:	08 95       	ret
     e14:	0a 26       	eor	r0, r26
     e16:	09 f4       	brne	.+2      	; 0xe1a <__fp_cmp+0x3e>
     e18:	a1 40       	sbci	r26, 0x01	; 1
     e1a:	a6 95       	lsr	r26
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	81 1d       	adc	r24, r1
     e20:	81 1d       	adc	r24, r1
     e22:	08 95       	ret

00000e24 <__fp_inf>:
     e24:	97 f9       	bld	r25, 7
     e26:	9f 67       	ori	r25, 0x7F	; 127
     e28:	80 e8       	ldi	r24, 0x80	; 128
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	08 95       	ret

00000e30 <__fp_nan>:
     e30:	9f ef       	ldi	r25, 0xFF	; 255
     e32:	80 ec       	ldi	r24, 0xC0	; 192
     e34:	08 95       	ret

00000e36 <__fp_pscA>:
     e36:	00 24       	eor	r0, r0
     e38:	0a 94       	dec	r0
     e3a:	16 16       	cp	r1, r22
     e3c:	17 06       	cpc	r1, r23
     e3e:	18 06       	cpc	r1, r24
     e40:	09 06       	cpc	r0, r25
     e42:	08 95       	ret

00000e44 <__fp_pscB>:
     e44:	00 24       	eor	r0, r0
     e46:	0a 94       	dec	r0
     e48:	12 16       	cp	r1, r18
     e4a:	13 06       	cpc	r1, r19
     e4c:	14 06       	cpc	r1, r20
     e4e:	05 06       	cpc	r0, r21
     e50:	08 95       	ret

00000e52 <__fp_round>:
     e52:	09 2e       	mov	r0, r25
     e54:	03 94       	inc	r0
     e56:	00 0c       	add	r0, r0
     e58:	11 f4       	brne	.+4      	; 0xe5e <__fp_round+0xc>
     e5a:	88 23       	and	r24, r24
     e5c:	52 f0       	brmi	.+20     	; 0xe72 <__fp_round+0x20>
     e5e:	bb 0f       	add	r27, r27
     e60:	40 f4       	brcc	.+16     	; 0xe72 <__fp_round+0x20>
     e62:	bf 2b       	or	r27, r31
     e64:	11 f4       	brne	.+4      	; 0xe6a <__fp_round+0x18>
     e66:	60 ff       	sbrs	r22, 0
     e68:	04 c0       	rjmp	.+8      	; 0xe72 <__fp_round+0x20>
     e6a:	6f 5f       	subi	r22, 0xFF	; 255
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	8f 4f       	sbci	r24, 0xFF	; 255
     e70:	9f 4f       	sbci	r25, 0xFF	; 255
     e72:	08 95       	ret

00000e74 <__fp_split3>:
     e74:	57 fd       	sbrc	r21, 7
     e76:	90 58       	subi	r25, 0x80	; 128
     e78:	44 0f       	add	r20, r20
     e7a:	55 1f       	adc	r21, r21
     e7c:	59 f0       	breq	.+22     	; 0xe94 <__fp_splitA+0x10>
     e7e:	5f 3f       	cpi	r21, 0xFF	; 255
     e80:	71 f0       	breq	.+28     	; 0xe9e <__fp_splitA+0x1a>
     e82:	47 95       	ror	r20

00000e84 <__fp_splitA>:
     e84:	88 0f       	add	r24, r24
     e86:	97 fb       	bst	r25, 7
     e88:	99 1f       	adc	r25, r25
     e8a:	61 f0       	breq	.+24     	; 0xea4 <__fp_splitA+0x20>
     e8c:	9f 3f       	cpi	r25, 0xFF	; 255
     e8e:	79 f0       	breq	.+30     	; 0xeae <__fp_splitA+0x2a>
     e90:	87 95       	ror	r24
     e92:	08 95       	ret
     e94:	12 16       	cp	r1, r18
     e96:	13 06       	cpc	r1, r19
     e98:	14 06       	cpc	r1, r20
     e9a:	55 1f       	adc	r21, r21
     e9c:	f2 cf       	rjmp	.-28     	; 0xe82 <__fp_split3+0xe>
     e9e:	46 95       	lsr	r20
     ea0:	f1 df       	rcall	.-30     	; 0xe84 <__fp_splitA>
     ea2:	08 c0       	rjmp	.+16     	; 0xeb4 <__fp_splitA+0x30>
     ea4:	16 16       	cp	r1, r22
     ea6:	17 06       	cpc	r1, r23
     ea8:	18 06       	cpc	r1, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	f1 cf       	rjmp	.-30     	; 0xe90 <__fp_splitA+0xc>
     eae:	86 95       	lsr	r24
     eb0:	71 05       	cpc	r23, r1
     eb2:	61 05       	cpc	r22, r1
     eb4:	08 94       	sec
     eb6:	08 95       	ret

00000eb8 <__fp_zero>:
     eb8:	e8 94       	clt

00000eba <__fp_szero>:
     eba:	bb 27       	eor	r27, r27
     ebc:	66 27       	eor	r22, r22
     ebe:	77 27       	eor	r23, r23
     ec0:	cb 01       	movw	r24, r22
     ec2:	97 f9       	bld	r25, 7
     ec4:	08 95       	ret

00000ec6 <__gesf2>:
     ec6:	8a df       	rcall	.-236    	; 0xddc <__fp_cmp>
     ec8:	08 f4       	brcc	.+2      	; 0xecc <__gesf2+0x6>
     eca:	8f ef       	ldi	r24, 0xFF	; 255
     ecc:	08 95       	ret

00000ece <__mulsf3>:
     ece:	0b d0       	rcall	.+22     	; 0xee6 <__mulsf3x>
     ed0:	c0 cf       	rjmp	.-128    	; 0xe52 <__fp_round>
     ed2:	b1 df       	rcall	.-158    	; 0xe36 <__fp_pscA>
     ed4:	28 f0       	brcs	.+10     	; 0xee0 <__mulsf3+0x12>
     ed6:	b6 df       	rcall	.-148    	; 0xe44 <__fp_pscB>
     ed8:	18 f0       	brcs	.+6      	; 0xee0 <__mulsf3+0x12>
     eda:	95 23       	and	r25, r21
     edc:	09 f0       	breq	.+2      	; 0xee0 <__mulsf3+0x12>
     ede:	a2 cf       	rjmp	.-188    	; 0xe24 <__fp_inf>
     ee0:	a7 cf       	rjmp	.-178    	; 0xe30 <__fp_nan>
     ee2:	11 24       	eor	r1, r1
     ee4:	ea cf       	rjmp	.-44     	; 0xeba <__fp_szero>

00000ee6 <__mulsf3x>:
     ee6:	c6 df       	rcall	.-116    	; 0xe74 <__fp_split3>
     ee8:	a0 f3       	brcs	.-24     	; 0xed2 <__mulsf3+0x4>

00000eea <__mulsf3_pse>:
     eea:	95 9f       	mul	r25, r21
     eec:	d1 f3       	breq	.-12     	; 0xee2 <__mulsf3+0x14>
     eee:	95 0f       	add	r25, r21
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	55 1f       	adc	r21, r21
     ef4:	62 9f       	mul	r22, r18
     ef6:	f0 01       	movw	r30, r0
     ef8:	72 9f       	mul	r23, r18
     efa:	bb 27       	eor	r27, r27
     efc:	f0 0d       	add	r31, r0
     efe:	b1 1d       	adc	r27, r1
     f00:	63 9f       	mul	r22, r19
     f02:	aa 27       	eor	r26, r26
     f04:	f0 0d       	add	r31, r0
     f06:	b1 1d       	adc	r27, r1
     f08:	aa 1f       	adc	r26, r26
     f0a:	64 9f       	mul	r22, r20
     f0c:	66 27       	eor	r22, r22
     f0e:	b0 0d       	add	r27, r0
     f10:	a1 1d       	adc	r26, r1
     f12:	66 1f       	adc	r22, r22
     f14:	82 9f       	mul	r24, r18
     f16:	22 27       	eor	r18, r18
     f18:	b0 0d       	add	r27, r0
     f1a:	a1 1d       	adc	r26, r1
     f1c:	62 1f       	adc	r22, r18
     f1e:	73 9f       	mul	r23, r19
     f20:	b0 0d       	add	r27, r0
     f22:	a1 1d       	adc	r26, r1
     f24:	62 1f       	adc	r22, r18
     f26:	83 9f       	mul	r24, r19
     f28:	a0 0d       	add	r26, r0
     f2a:	61 1d       	adc	r22, r1
     f2c:	22 1f       	adc	r18, r18
     f2e:	74 9f       	mul	r23, r20
     f30:	33 27       	eor	r19, r19
     f32:	a0 0d       	add	r26, r0
     f34:	61 1d       	adc	r22, r1
     f36:	23 1f       	adc	r18, r19
     f38:	84 9f       	mul	r24, r20
     f3a:	60 0d       	add	r22, r0
     f3c:	21 1d       	adc	r18, r1
     f3e:	82 2f       	mov	r24, r18
     f40:	76 2f       	mov	r23, r22
     f42:	6a 2f       	mov	r22, r26
     f44:	11 24       	eor	r1, r1
     f46:	9f 57       	subi	r25, 0x7F	; 127
     f48:	50 40       	sbci	r21, 0x00	; 0
     f4a:	8a f0       	brmi	.+34     	; 0xf6e <__mulsf3_pse+0x84>
     f4c:	e1 f0       	breq	.+56     	; 0xf86 <__mulsf3_pse+0x9c>
     f4e:	88 23       	and	r24, r24
     f50:	4a f0       	brmi	.+18     	; 0xf64 <__mulsf3_pse+0x7a>
     f52:	ee 0f       	add	r30, r30
     f54:	ff 1f       	adc	r31, r31
     f56:	bb 1f       	adc	r27, r27
     f58:	66 1f       	adc	r22, r22
     f5a:	77 1f       	adc	r23, r23
     f5c:	88 1f       	adc	r24, r24
     f5e:	91 50       	subi	r25, 0x01	; 1
     f60:	50 40       	sbci	r21, 0x00	; 0
     f62:	a9 f7       	brne	.-22     	; 0xf4e <__mulsf3_pse+0x64>
     f64:	9e 3f       	cpi	r25, 0xFE	; 254
     f66:	51 05       	cpc	r21, r1
     f68:	70 f0       	brcs	.+28     	; 0xf86 <__mulsf3_pse+0x9c>
     f6a:	5c cf       	rjmp	.-328    	; 0xe24 <__fp_inf>
     f6c:	a6 cf       	rjmp	.-180    	; 0xeba <__fp_szero>
     f6e:	5f 3f       	cpi	r21, 0xFF	; 255
     f70:	ec f3       	brlt	.-6      	; 0xf6c <__mulsf3_pse+0x82>
     f72:	98 3e       	cpi	r25, 0xE8	; 232
     f74:	dc f3       	brlt	.-10     	; 0xf6c <__mulsf3_pse+0x82>
     f76:	86 95       	lsr	r24
     f78:	77 95       	ror	r23
     f7a:	67 95       	ror	r22
     f7c:	b7 95       	ror	r27
     f7e:	f7 95       	ror	r31
     f80:	e7 95       	ror	r30
     f82:	9f 5f       	subi	r25, 0xFF	; 255
     f84:	c1 f7       	brne	.-16     	; 0xf76 <__mulsf3_pse+0x8c>
     f86:	fe 2b       	or	r31, r30
     f88:	88 0f       	add	r24, r24
     f8a:	91 1d       	adc	r25, r1
     f8c:	96 95       	lsr	r25
     f8e:	87 95       	ror	r24
     f90:	97 f9       	bld	r25, 7
     f92:	08 95       	ret

00000f94 <__udivmodsi4>:
     f94:	a1 e2       	ldi	r26, 0x21	; 33
     f96:	1a 2e       	mov	r1, r26
     f98:	aa 1b       	sub	r26, r26
     f9a:	bb 1b       	sub	r27, r27
     f9c:	fd 01       	movw	r30, r26
     f9e:	0d c0       	rjmp	.+26     	; 0xfba <__udivmodsi4_ep>

00000fa0 <__udivmodsi4_loop>:
     fa0:	aa 1f       	adc	r26, r26
     fa2:	bb 1f       	adc	r27, r27
     fa4:	ee 1f       	adc	r30, r30
     fa6:	ff 1f       	adc	r31, r31
     fa8:	a2 17       	cp	r26, r18
     faa:	b3 07       	cpc	r27, r19
     fac:	e4 07       	cpc	r30, r20
     fae:	f5 07       	cpc	r31, r21
     fb0:	20 f0       	brcs	.+8      	; 0xfba <__udivmodsi4_ep>
     fb2:	a2 1b       	sub	r26, r18
     fb4:	b3 0b       	sbc	r27, r19
     fb6:	e4 0b       	sbc	r30, r20
     fb8:	f5 0b       	sbc	r31, r21

00000fba <__udivmodsi4_ep>:
     fba:	66 1f       	adc	r22, r22
     fbc:	77 1f       	adc	r23, r23
     fbe:	88 1f       	adc	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	1a 94       	dec	r1
     fc4:	69 f7       	brne	.-38     	; 0xfa0 <__udivmodsi4_loop>
     fc6:	60 95       	com	r22
     fc8:	70 95       	com	r23
     fca:	80 95       	com	r24
     fcc:	90 95       	com	r25
     fce:	9b 01       	movw	r18, r22
     fd0:	ac 01       	movw	r20, r24
     fd2:	bd 01       	movw	r22, r26
     fd4:	cf 01       	movw	r24, r30
     fd6:	08 95       	ret

00000fd8 <__tablejump2__>:
     fd8:	ee 0f       	add	r30, r30
     fda:	ff 1f       	adc	r31, r31
     fdc:	88 1f       	adc	r24, r24
     fde:	8b bf       	out	0x3b, r24	; 59
     fe0:	07 90       	elpm	r0, Z+
     fe2:	f6 91       	elpm	r31, Z
     fe4:	e0 2d       	mov	r30, r0
     fe6:	19 94       	eijmp

00000fe8 <__itoa_ncheck>:
     fe8:	bb 27       	eor	r27, r27
     fea:	4a 30       	cpi	r20, 0x0A	; 10
     fec:	31 f4       	brne	.+12     	; 0xffa <__itoa_ncheck+0x12>
     fee:	99 23       	and	r25, r25
     ff0:	22 f4       	brpl	.+8      	; 0xffa <__itoa_ncheck+0x12>
     ff2:	bd e2       	ldi	r27, 0x2D	; 45
     ff4:	90 95       	com	r25
     ff6:	81 95       	neg	r24
     ff8:	9f 4f       	sbci	r25, 0xFF	; 255
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <__utoa_common>

00000ffc <__utoa_ncheck>:
     ffc:	bb 27       	eor	r27, r27

00000ffe <__utoa_common>:
     ffe:	fb 01       	movw	r30, r22
    1000:	55 27       	eor	r21, r21
    1002:	aa 27       	eor	r26, r26
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	aa 1f       	adc	r26, r26
    100a:	a4 17       	cp	r26, r20
    100c:	10 f0       	brcs	.+4      	; 0x1012 <__utoa_common+0x14>
    100e:	a4 1b       	sub	r26, r20
    1010:	83 95       	inc	r24
    1012:	50 51       	subi	r21, 0x10	; 16
    1014:	b9 f7       	brne	.-18     	; 0x1004 <__utoa_common+0x6>
    1016:	a0 5d       	subi	r26, 0xD0	; 208
    1018:	aa 33       	cpi	r26, 0x3A	; 58
    101a:	08 f0       	brcs	.+2      	; 0x101e <__utoa_common+0x20>
    101c:	a9 5d       	subi	r26, 0xD9	; 217
    101e:	a1 93       	st	Z+, r26
    1020:	00 97       	sbiw	r24, 0x00	; 0
    1022:	79 f7       	brne	.-34     	; 0x1002 <__utoa_common+0x4>
    1024:	b1 11       	cpse	r27, r1
    1026:	b1 93       	st	Z+, r27
    1028:	11 92       	st	Z+, r1
    102a:	cb 01       	movw	r24, r22
    102c:	00 c0       	rjmp	.+0      	; 0x102e <strrev>

0000102e <strrev>:
    102e:	dc 01       	movw	r26, r24
    1030:	fc 01       	movw	r30, r24
    1032:	67 2f       	mov	r22, r23
    1034:	71 91       	ld	r23, Z+
    1036:	77 23       	and	r23, r23
    1038:	e1 f7       	brne	.-8      	; 0x1032 <strrev+0x4>
    103a:	32 97       	sbiw	r30, 0x02	; 2
    103c:	04 c0       	rjmp	.+8      	; 0x1046 <strrev+0x18>
    103e:	7c 91       	ld	r23, X
    1040:	6d 93       	st	X+, r22
    1042:	70 83       	st	Z, r23
    1044:	62 91       	ld	r22, -Z
    1046:	ae 17       	cp	r26, r30
    1048:	bf 07       	cpc	r27, r31
    104a:	c8 f3       	brcs	.-14     	; 0x103e <strrev+0x10>
    104c:	08 95       	ret

0000104e <_exit>:
    104e:	f8 94       	cli

00001050 <__stop_program>:
    1050:	ff cf       	rjmp	.-2      	; 0x1050 <__stop_program>
