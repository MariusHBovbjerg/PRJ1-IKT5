
PRJ1-IKT5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00001080  00001114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001080  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800202  00800202  00001116  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001116  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001148  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00001188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002422  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fbb  00000000  00000000  0000370a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e2f  00000000  00000000  000046c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  000054f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000900  00000000  00000000  000057e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f16  00000000  00000000  000060e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00006ffe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	9b c0       	rjmp	.+310    	; 0x13c <__bad_interrupt>
       6:	00 00       	nop
       8:	99 c0       	rjmp	.+306    	; 0x13c <__bad_interrupt>
       a:	00 00       	nop
       c:	97 c0       	rjmp	.+302    	; 0x13c <__bad_interrupt>
       e:	00 00       	nop
      10:	95 c0       	rjmp	.+298    	; 0x13c <__bad_interrupt>
      12:	00 00       	nop
      14:	f5 c0       	rjmp	.+490    	; 0x200 <__vector_5>
      16:	00 00       	nop
      18:	3c c1       	rjmp	.+632    	; 0x292 <__vector_6>
      1a:	00 00       	nop
      1c:	8f c0       	rjmp	.+286    	; 0x13c <__bad_interrupt>
      1e:	00 00       	nop
      20:	8d c0       	rjmp	.+282    	; 0x13c <__bad_interrupt>
      22:	00 00       	nop
      24:	8b c0       	rjmp	.+278    	; 0x13c <__bad_interrupt>
      26:	00 00       	nop
      28:	89 c0       	rjmp	.+274    	; 0x13c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	87 c0       	rjmp	.+270    	; 0x13c <__bad_interrupt>
      2e:	00 00       	nop
      30:	85 c0       	rjmp	.+266    	; 0x13c <__bad_interrupt>
      32:	00 00       	nop
      34:	83 c0       	rjmp	.+262    	; 0x13c <__bad_interrupt>
      36:	00 00       	nop
      38:	81 c0       	rjmp	.+258    	; 0x13c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7f c0       	rjmp	.+254    	; 0x13c <__bad_interrupt>
      3e:	00 00       	nop
      40:	7d c0       	rjmp	.+250    	; 0x13c <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c1       	rjmp	.+734    	; 0x324 <__vector_17>
      46:	00 00       	nop
      48:	79 c0       	rjmp	.+242    	; 0x13c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	77 c0       	rjmp	.+238    	; 0x13c <__bad_interrupt>
      4e:	00 00       	nop
      50:	75 c0       	rjmp	.+234    	; 0x13c <__bad_interrupt>
      52:	00 00       	nop
      54:	73 c0       	rjmp	.+230    	; 0x13c <__bad_interrupt>
      56:	00 00       	nop
      58:	71 c0       	rjmp	.+226    	; 0x13c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6f c0       	rjmp	.+222    	; 0x13c <__bad_interrupt>
      5e:	00 00       	nop
      60:	6d c0       	rjmp	.+218    	; 0x13c <__bad_interrupt>
      62:	00 00       	nop
      64:	6b c0       	rjmp	.+214    	; 0x13c <__bad_interrupt>
      66:	00 00       	nop
      68:	69 c0       	rjmp	.+210    	; 0x13c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	67 c0       	rjmp	.+206    	; 0x13c <__bad_interrupt>
      6e:	00 00       	nop
      70:	65 c0       	rjmp	.+202    	; 0x13c <__bad_interrupt>
      72:	00 00       	nop
      74:	63 c0       	rjmp	.+198    	; 0x13c <__bad_interrupt>
      76:	00 00       	nop
      78:	61 c0       	rjmp	.+194    	; 0x13c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5f c0       	rjmp	.+190    	; 0x13c <__bad_interrupt>
      7e:	00 00       	nop
      80:	7b c1       	rjmp	.+758    	; 0x378 <__vector_32>
      82:	00 00       	nop
      84:	5b c0       	rjmp	.+182    	; 0x13c <__bad_interrupt>
      86:	00 00       	nop
      88:	59 c0       	rjmp	.+178    	; 0x13c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	57 c0       	rjmp	.+174    	; 0x13c <__bad_interrupt>
      8e:	00 00       	nop
      90:	55 c0       	rjmp	.+170    	; 0x13c <__bad_interrupt>
      92:	00 00       	nop
      94:	53 c0       	rjmp	.+166    	; 0x13c <__bad_interrupt>
      96:	00 00       	nop
      98:	51 c0       	rjmp	.+162    	; 0x13c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4f c0       	rjmp	.+158    	; 0x13c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4d c0       	rjmp	.+154    	; 0x13c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4b c0       	rjmp	.+150    	; 0x13c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	49 c0       	rjmp	.+146    	; 0x13c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	47 c0       	rjmp	.+142    	; 0x13c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	45 c0       	rjmp	.+138    	; 0x13c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	43 c0       	rjmp	.+134    	; 0x13c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	41 c0       	rjmp	.+130    	; 0x13c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3f c0       	rjmp	.+126    	; 0x13c <__bad_interrupt>
      be:	00 00       	nop
      c0:	3d c0       	rjmp	.+122    	; 0x13c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3b c0       	rjmp	.+118    	; 0x13c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	39 c0       	rjmp	.+114    	; 0x13c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	37 c0       	rjmp	.+110    	; 0x13c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	35 c0       	rjmp	.+106    	; 0x13c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	33 c0       	rjmp	.+102    	; 0x13c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	31 c0       	rjmp	.+98     	; 0x13c <__bad_interrupt>
      da:	00 00       	nop
      dc:	2f c0       	rjmp	.+94     	; 0x13c <__bad_interrupt>
      de:	00 00       	nop
      e0:	2d c0       	rjmp	.+90     	; 0x13c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	33 02       	muls	r19, r19
      e6:	79 02       	muls	r23, r25
      e8:	a2 02       	muls	r26, r18
      ea:	cd 02       	muls	r28, r29
      ec:	f8 02       	muls	r31, r24
      ee:	23 03       	mulsu	r18, r19
      f0:	4e 03       	fmul	r20, r22
      f2:	82 03       	fmuls	r16, r18
      f4:	ab 03       	fmulsu	r18, r19
      f6:	b5 03       	fmuls	r19, r21
      f8:	f0 03       	fmuls	r23, r16
      fa:	26 04       	cpc	r2, r6
      fc:	72 04       	cpc	r7, r2

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	e0 e8       	ldi	r30, 0x80	; 128
     116:	f0 e1       	ldi	r31, 0x10	; 16
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a2 30       	cpi	r26, 0x02	; 2
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	22 e0       	ldi	r18, 0x02	; 2
     12a:	a2 e0       	ldi	r26, 0x02	; 2
     12c:	b2 e0       	ldi	r27, 0x02	; 2
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	a6 30       	cpi	r26, 0x06	; 6
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	46 d1       	rcall	.+652    	; 0x3c6 <main>
     13a:	a0 c7       	rjmp	.+3904   	; 0x107c <_exit>

0000013c <__bad_interrupt>:
     13c:	61 cf       	rjmp	.-318    	; 0x0 <__vectors>

0000013e <_Z10bLightInitv>:
#include "BLightDriver.h"
#include <stdio.h>
#include <avr/io.h>

void bLightInit(void){
	DDRC = 0xFF;
     13e:	8f ef       	ldi	r24, 0xFF	; 255
     140:	87 b9       	out	0x07, r24	; 7
	TCCR3A = (0<<COM3A1)|(1<<COM3A0)|(0<<WGM31)|(1<<WGM30); // Set compare mode for OCR1A
     142:	81 e4       	ldi	r24, 0x41	; 65
     144:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = (0<<WGM33)|(0<<WGM32)|(1<<CS32)|(0<<CS31)|(0<<CS30); // Set Mode 1, PWM Phase correct 8-bit & 256 prescaler
     148:	84 e0       	ldi	r24, 0x04	; 4
     14a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	TIMSK3 = 0b00000010;
     14e:	82 e0       	ldi	r24, 0x02	; 2
     150:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
	OCR3A = 0;
     154:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     158:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     15c:	08 95       	ret

0000015e <_Z12bLightTogglev>:
}

void bLightToggle(void){
	
	PINC |= 0b00000101; // ben 35 og 37
     15e:	86 b1       	in	r24, 0x06	; 6
     160:	85 60       	ori	r24, 0x05	; 5
     162:	86 b9       	out	0x06, r24	; 6
     164:	08 95       	ret

00000166 <_Z14bLightStrengthi>:

void bLightStrength(int Brightness){

	int dutyCycle = 0;
	
	if (Brightness > 254) {
     166:	8f 3f       	cpi	r24, 0xFF	; 255
     168:	91 05       	cpc	r25, r1
     16a:	24 f4       	brge	.+8      	; 0x174 <_Z14bLightStrengthi+0xe>
		dutyCycle = 254;
	}
	else if (Brightness <= 0) {
     16c:	18 16       	cp	r1, r24
     16e:	19 06       	cpc	r1, r25
     170:	34 f0       	brlt	.+12     	; 0x17e <_Z14bLightStrengthi+0x18>
     172:	03 c0       	rjmp	.+6      	; 0x17a <_Z14bLightStrengthi+0x14>
void bLightStrength(int Brightness){

	int dutyCycle = 0;
	
	if (Brightness > 254) {
		dutyCycle = 254;
     174:	8e ef       	ldi	r24, 0xFE	; 254
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	02 c0       	rjmp	.+4      	; 0x17e <_Z14bLightStrengthi+0x18>
	}
	else if (Brightness <= 0) {
		dutyCycle = 1;
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	90 e0       	ldi	r25, 0x00	; 0
	}
	else {
		dutyCycle = Brightness;
	}

	OCR3A = dutyCycle;
     17e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     182:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     186:	08 95       	ret

00000188 <_Z11initCounterv>:
#include "Sensor.h"
#include <avr/interrupt.h>


void initCounter(){
	EIMSK = 0b00110000; // INT 4 & INT 5 active - BEN 2 & 3.
     188:	80 e3       	ldi	r24, 0x30	; 48
     18a:	8d bb       	out	0x1d, r24	; 29
	EICRB = 0b00001111; // INT 4 & INT 5 rising edge.
     18c:	8f e0       	ldi	r24, 0x0F	; 15
     18e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     192:	08 95       	ret

00000194 <_Z8fLightOnv>:
void fLightInit(void){
	DDRG = 0xFF; 
}

void fLightOn(void){
	PORTG = 0b00000101; //ben 39 og 41
     194:	85 e0       	ldi	r24, 0x05	; 5
     196:	84 bb       	out	0x14, r24	; 20
     198:	08 95       	ret

0000019a <_Z9fLightOffv>:
}
void fLightOff(void){
	PORTG = 0b00000000;
     19a:	14 ba       	out	0x14, r1	; 20
     19c:	08 95       	ret

0000019e <_Z11SendCharnulc>:
	UBRR0L = ((F_CPU/(16*BAUD))-1);
}

void SendCharnul(char Tegn)
{
	while(!(UCSR0A & (1<<UDRE0))){
     19e:	e0 ec       	ldi	r30, 0xC0	; 192
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	90 81       	ld	r25, Z
     1a4:	95 ff       	sbrs	r25, 5
     1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <_Z11SendCharnulc+0x4>
		
	}
	UDR0 = Tegn;
     1a8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     1ac:	08 95       	ret

000001ae <_Z10SendStringPc>:
}

void SendString(char* Streng)
{
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	ec 01       	movw	r28, r24
	while(*Streng != '\0'){
     1b4:	88 81       	ld	r24, Y
     1b6:	88 23       	and	r24, r24
     1b8:	29 f0       	breq	.+10     	; 0x1c4 <_Z10SendStringPc+0x16>
     1ba:	21 96       	adiw	r28, 0x01	; 1
		SendCharnul(*Streng);
     1bc:	f0 df       	rcall	.-32     	; 0x19e <_Z11SendCharnulc>
	UDR0 = Tegn;
}

void SendString(char* Streng)
{
	while(*Streng != '\0'){
     1be:	89 91       	ld	r24, Y+
     1c0:	81 11       	cpse	r24, r1
     1c2:	fc cf       	rjmp	.-8      	; 0x1bc <_Z10SendStringPc+0xe>
		SendCharnul(*Streng);
		Streng++;
	}
}
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <_Z11SendIntegeri>:

void SendInteger(int Tal)
{
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
     1d2:	6e 97       	sbiw	r28, 0x1e	; 30
     1d4:	0f b6       	in	r0, 0x3f	; 63
     1d6:	f8 94       	cli
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     1de:	4a e0       	ldi	r20, 0x0A	; 10
     1e0:	be 01       	movw	r22, r28
     1e2:	6f 5f       	subi	r22, 0xFF	; 255
     1e4:	7f 4f       	sbci	r23, 0xFF	; 255
     1e6:	17 d7       	rcall	.+3630   	; 0x1016 <__itoa_ncheck>
	char intStr[30];
	itoa(Tal, intStr, 10);
	SendString(intStr);
     1e8:	ce 01       	movw	r24, r28
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	e0 df       	rcall	.-64     	; 0x1ae <_Z10SendStringPc>
}
     1ee:	6e 96       	adiw	r28, 0x1e	; 30
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	f8 94       	cli
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	cd bf       	out	0x3d, r28	; 61
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <__vector_5>:


ISR(INT4_vect){ //On rising edge, count + 1
     200:	1f 92       	push	r1
     202:	0f 92       	push	r0
     204:	0f b6       	in	r0, 0x3f	; 63
     206:	0f 92       	push	r0
     208:	11 24       	eor	r1, r1
     20a:	2f 93       	push	r18
     20c:	8f 93       	push	r24
     20e:	9f 93       	push	r25
	if(counter == 3){
     210:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     214:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     218:	03 97       	sbiw	r24, 0x03	; 3
     21a:	d1 f4       	brne	.+52     	; 0x250 <__vector_5+0x50>
		
		newCount = true;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		counter++;
     222:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     226:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     22a:	01 96       	adiw	r24, 0x01	; 1
     22c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     230:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
		EIMSK = 0b00000000;
     234:	1d ba       	out	0x1d, r1	; 29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     236:	2f ef       	ldi	r18, 0xFF	; 255
     238:	89 e6       	ldi	r24, 0x69	; 105
     23a:	98 e1       	ldi	r25, 0x18	; 24
     23c:	21 50       	subi	r18, 0x01	; 1
     23e:	80 40       	sbci	r24, 0x00	; 0
     240:	90 40       	sbci	r25, 0x00	; 0
     242:	e1 f7       	brne	.-8      	; 0x23c <__vector_5+0x3c>
     244:	00 c0       	rjmp	.+0      	; 0x246 <__vector_5+0x46>
     246:	00 00       	nop
		_delay_ms(500);
		EIFR = 0b00110000;
     248:	80 e3       	ldi	r24, 0x30	; 48
     24a:	8c bb       	out	0x1c, r24	; 28
		EIMSK = 0b00110000;
     24c:	8d bb       	out	0x1d, r24	; 29
     24e:	19 c0       	rjmp	.+50     	; 0x282 <__vector_5+0x82>
	}
	else {
		newCount = true;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		counter++;
     256:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     25a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     25e:	01 96       	adiw	r24, 0x01	; 1
     260:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     264:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
		EIMSK = 0b00000000;
     268:	1d ba       	out	0x1d, r1	; 29
     26a:	2f ef       	ldi	r18, 0xFF	; 255
     26c:	85 ea       	ldi	r24, 0xA5	; 165
     26e:	9e e0       	ldi	r25, 0x0E	; 14
     270:	21 50       	subi	r18, 0x01	; 1
     272:	80 40       	sbci	r24, 0x00	; 0
     274:	90 40       	sbci	r25, 0x00	; 0
     276:	e1 f7       	brne	.-8      	; 0x270 <__vector_5+0x70>
     278:	00 c0       	rjmp	.+0      	; 0x27a <__vector_5+0x7a>
     27a:	00 00       	nop
		_delay_ms(300);
		EIFR = 0b00110000;
     27c:	80 e3       	ldi	r24, 0x30	; 48
     27e:	8c bb       	out	0x1c, r24	; 28
		EIMSK = 0b00110000;
     280:	8d bb       	out	0x1d, r24	; 29
	}
}
     282:	9f 91       	pop	r25
     284:	8f 91       	pop	r24
     286:	2f 91       	pop	r18
     288:	0f 90       	pop	r0
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	0f 90       	pop	r0
     28e:	1f 90       	pop	r1
     290:	18 95       	reti

00000292 <__vector_6>:
ISR(INT5_vect){
     292:	1f 92       	push	r1
     294:	0f 92       	push	r0
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	0f 92       	push	r0
     29a:	11 24       	eor	r1, r1
     29c:	2f 93       	push	r18
     29e:	8f 93       	push	r24
     2a0:	9f 93       	push	r25
	if(counter == 3){
     2a2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     2a6:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     2aa:	03 97       	sbiw	r24, 0x03	; 3
     2ac:	d1 f4       	brne	.+52     	; 0x2e2 <__vector_6+0x50>
		
		newCount = true;
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		counter++;
     2b4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     2b8:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     2c2:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
		EIMSK = 0b00000000;
     2c6:	1d ba       	out	0x1d, r1	; 29
     2c8:	2f ef       	ldi	r18, 0xFF	; 255
     2ca:	89 e6       	ldi	r24, 0x69	; 105
     2cc:	98 e1       	ldi	r25, 0x18	; 24
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	80 40       	sbci	r24, 0x00	; 0
     2d2:	90 40       	sbci	r25, 0x00	; 0
     2d4:	e1 f7       	brne	.-8      	; 0x2ce <__vector_6+0x3c>
     2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <__vector_6+0x46>
     2d8:	00 00       	nop
		_delay_ms(500);
		EIFR = 0b00110000;
     2da:	80 e3       	ldi	r24, 0x30	; 48
     2dc:	8c bb       	out	0x1c, r24	; 28
		EIMSK = 0b00110000;
     2de:	8d bb       	out	0x1d, r24	; 29
     2e0:	19 c0       	rjmp	.+50     	; 0x314 <__vector_6+0x82>
	}
	else {
		newCount = true;
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		counter++;
     2e8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     2ec:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     2f0:	01 96       	adiw	r24, 0x01	; 1
     2f2:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     2f6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
		EIMSK = 0b00000000;
     2fa:	1d ba       	out	0x1d, r1	; 29
     2fc:	2f ef       	ldi	r18, 0xFF	; 255
     2fe:	85 ea       	ldi	r24, 0xA5	; 165
     300:	9e e0       	ldi	r25, 0x0E	; 14
     302:	21 50       	subi	r18, 0x01	; 1
     304:	80 40       	sbci	r24, 0x00	; 0
     306:	90 40       	sbci	r25, 0x00	; 0
     308:	e1 f7       	brne	.-8      	; 0x302 <__vector_6+0x70>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <__vector_6+0x7a>
     30c:	00 00       	nop
		_delay_ms(300);
		EIFR = 0b00110000;
     30e:	80 e3       	ldi	r24, 0x30	; 48
     310:	8c bb       	out	0x1c, r24	; 28
		EIMSK = 0b00110000;
     312:	8d bb       	out	0x1d, r24	; 29
	}
}
     314:	9f 91       	pop	r25
     316:	8f 91       	pop	r24
     318:	2f 91       	pop	r18
     31a:	0f 90       	pop	r0
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	0f 90       	pop	r0
     320:	1f 90       	pop	r1
     322:	18 95       	reti

00000324 <__vector_17>:


ISR(TIMER1_COMPA_vect){
     324:	1f 92       	push	r1
     326:	0f 92       	push	r0
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	0f 92       	push	r0
     32c:	11 24       	eor	r1, r1
     32e:	8f 93       	push	r24
     330:	9f 93       	push	r25
	                                                                                                                                          
	switch(MotorMode){
     332:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
     336:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
     33a:	81 30       	cpi	r24, 0x01	; 1
     33c:	91 05       	cpc	r25, r1
     33e:	31 f0       	breq	.+12     	; 0x34c <__vector_17+0x28>
     340:	18 f0       	brcs	.+6      	; 0x348 <__vector_17+0x24>
     342:	02 97       	sbiw	r24, 0x02	; 2
     344:	59 f0       	breq	.+22     	; 0x35c <__vector_17+0x38>
     346:	11 c0       	rjmp	.+34     	; 0x36a <__vector_17+0x46>
		case 0:
			PORTA = 0b00000000;
     348:	12 b8       	out	0x02, r1	; 2
		break;
     34a:	0f c0       	rjmp	.+30     	; 0x36a <__vector_17+0x46>
		case 1:
			if(PINA == 0b00000001){
     34c:	80 b1       	in	r24, 0x00	; 0
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	11 f4       	brne	.+4      	; 0x356 <__vector_17+0x32>
				PORTA = 0b00000000;
     352:	12 b8       	out	0x02, r1	; 2
     354:	0a c0       	rjmp	.+20     	; 0x36a <__vector_17+0x46>
			}else{
				PORTA = 0b00000001;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	82 b9       	out	0x02, r24	; 2
     35a:	07 c0       	rjmp	.+14     	; 0x36a <__vector_17+0x46>
			}
		break;
		case 2:
			if(PINA == 0b00000010){
     35c:	80 b1       	in	r24, 0x00	; 0
     35e:	82 30       	cpi	r24, 0x02	; 2
     360:	11 f4       	brne	.+4      	; 0x366 <__vector_17+0x42>
				PORTA = 0b00000000;
     362:	12 b8       	out	0x02, r1	; 2
     364:	02 c0       	rjmp	.+4      	; 0x36a <__vector_17+0x46>
				}else{
				PORTA = 0b00000010;
     366:	82 e0       	ldi	r24, 0x02	; 2
     368:	82 b9       	out	0x02, r24	; 2
			}
		break;
			
	}
	
}
     36a:	9f 91       	pop	r25
     36c:	8f 91       	pop	r24
     36e:	0f 90       	pop	r0
     370:	0f be       	out	0x3f, r0	; 63
     372:	0f 90       	pop	r0
     374:	1f 90       	pop	r1
     376:	18 95       	reti

00000378 <__vector_32>:

ISR(TIMER3_COMPA_vect){
     378:	1f 92       	push	r1
     37a:	0f 92       	push	r0
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	0f 92       	push	r0
     380:	11 24       	eor	r1, r1
     382:	0b b6       	in	r0, 0x3b	; 59
     384:	0f 92       	push	r0
     386:	2f 93       	push	r18
     388:	3f 93       	push	r19
     38a:	4f 93       	push	r20
     38c:	5f 93       	push	r21
     38e:	6f 93       	push	r22
     390:	7f 93       	push	r23
     392:	8f 93       	push	r24
     394:	9f 93       	push	r25
     396:	af 93       	push	r26
     398:	bf 93       	push	r27
     39a:	ef 93       	push	r30
     39c:	ff 93       	push	r31
	
	bLightToggle();
     39e:	df de       	rcall	.-578    	; 0x15e <_Z12bLightTogglev>
}
     3a0:	ff 91       	pop	r31
     3a2:	ef 91       	pop	r30
     3a4:	bf 91       	pop	r27
     3a6:	af 91       	pop	r26
     3a8:	9f 91       	pop	r25
     3aa:	8f 91       	pop	r24
     3ac:	7f 91       	pop	r23
     3ae:	6f 91       	pop	r22
     3b0:	5f 91       	pop	r21
     3b2:	4f 91       	pop	r20
     3b4:	3f 91       	pop	r19
     3b6:	2f 91       	pop	r18
     3b8:	0f 90       	pop	r0
     3ba:	0b be       	out	0x3b, r0	; 59
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <main>:


int main(void)
{
	sei();
     3c6:	78 94       	sei
	initCounter();
     3c8:	df de       	rcall	.-578    	; 0x188 <_Z11initCounterv>
	initMotor();
     3ca:	bd d2       	rcall	.+1402   	; 0x946 <_Z9initMotorv>
     3cc:	20 e0       	ldi	r18, 0x00	; 0
	InitUART(9600, 8, 0);
     3ce:	48 e0       	ldi	r20, 0x08	; 8
     3d0:	60 e8       	ldi	r22, 0x80	; 128
     3d2:	75 e2       	ldi	r23, 0x25	; 37
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	86 d3       	rcall	.+1804   	; 0xae6 <_Z8InitUARTmhb>
     3da:	88 e1       	ldi	r24, 0x18	; 24
volatile unsigned int MotorMode = 0;

void InitUARTnul(unsigned long BAUD)
{
	
	UCSR0B = 0b00011000;
     3dc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     3e0:	86 e0       	ldi	r24, 0x06	; 6
	
	UCSR0C = 0b00000110;
     3e2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     3e6:	87 e6       	ldi	r24, 0x67	; 103
	
	UBRR0L = ((F_CPU/(16*BAUD))-1);
     3e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	sei();
	initCounter();
	initMotor();
	InitUART(9600, 8, 0);
	InitUARTnul(9600);
	bLightInit();
     3ec:	a8 de       	rcall	.-688    	; 0x13e <_Z10bLightInitv>
     3ee:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <counter+0x1>
	counter = 0;
     3f2:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <counter>
     3f6:	12 b8       	out	0x02, r1	; 2
	PORTA = 0b00000000;
     3f8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
	TIMSK3 = 0b00000000;
     3fc:	c4 e9       	ldi	r28, 0x94	; 148
			if(newCount){
				playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
				_delay_ms(1000);
				TCNT3 = 0;
     3fe:	d0 e0       	ldi	r29, 0x00	; 0
     400:	0f 2e       	mov	r0, r31
				bLightStrength(254);
				MotorMode = 0;
				_delay_ms(500);
				fLightOff();
				stopSOMO();
				TIMSK3 = 0b00000000;
     402:	f1 e7       	ldi	r31, 0x71	; 113
     404:	af 2e       	mov	r10, r31
     406:	b1 2c       	mov	r11, r1
     408:	f0 2d       	mov	r31, r0
     40a:	ee 24       	eor	r14, r14
				bLightStrength(254);
				_delay_ms(500);
				TCNT3 = 0;
				bLightStrength(15);
				_delay_ms(400);
				MotorMode = 1;
     40c:	e3 94       	inc	r14
     40e:	f1 2c       	mov	r15, r1
     410:	04 e8       	ldi	r16, 0x84	; 132
				_delay_ms(100);
				TCNT1 = 0;
     412:	10 e0       	ldi	r17, 0x00	; 0
     414:	0f 2e       	mov	r0, r31
				setSpeed(99.0);
				counter = 12;
     416:	fc e0       	ldi	r31, 0x0C	; 12
     418:	8f 2e       	mov	r8, r31
     41a:	91 2c       	mov	r9, r1
     41c:	f0 2d       	mov	r31, r0
     41e:	0f 2e       	mov	r0, r31
				MotorMode = 1;
				_delay_ms(100);
				TCNT1 = 0;
				setSpeed(99.0);
				_delay_ms(500);
				counter = 11;
     420:	fb e0       	ldi	r31, 0x0B	; 11
     422:	6f 2e       	mov	r6, r31
     424:	71 2c       	mov	r7, r1
     426:	f0 2d       	mov	r31, r0
     428:	0f 2e       	mov	r0, r31
				bLightStrength(254);
				MotorMode = 1;
				_delay_ms(100);
				TCNT1 = 0;
				setSpeed(99.0);
				counter = 10;
     42a:	fa e0       	ldi	r31, 0x0A	; 10
     42c:	4f 2e       	mov	r4, r31
     42e:	51 2c       	mov	r5, r1
     430:	f0 2d       	mov	r31, r0
     432:	68 94       	set
				_delay_ms(10);
				newCount = false;
				TCNT1 = 0;
				setSpeed(99.0);
				_delay_ms(150);
				counter = 8;
     434:	22 24       	eor	r2, r2
     436:	23 f8       	bld	r2, 3
     438:	31 2c       	mov	r3, r1
     43a:	68 94       	set
			case 7: // stop ved 6. brik
			if(newCount){
				playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
				MotorMode = 2;
     43c:	cc 24       	eor	r12, r12
     43e:	c1 f8       	bld	r12, 1
     440:	d1 2c       	mov	r13, r1
     442:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>

	
	while(1){
		
		
		SendInteger(counter);		
     446:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     44a:	bf de       	rcall	.-642    	; 0x1ca <_Z11SendIntegeri>
     44c:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <counter>
		switch(counter){
     450:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <counter+0x1>
     454:	31 97       	sbiw	r30, 0x01	; 1
     456:	ed 30       	cpi	r30, 0x0D	; 13
     458:	f1 05       	cpc	r31, r1
     45a:	98 f7       	brcc	.-26     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     45c:	88 27       	eor	r24, r24
     45e:	ee 58       	subi	r30, 0x8E	; 142
     460:	ff 4f       	sbci	r31, 0xFF	; 255
     462:	8f 4f       	sbci	r24, 0xFF	; 255
     464:	d0 c5       	rjmp	.+2976   	; 0x1006 <__tablejump2__>
			case 1:   // Start manuelt med brik
			if(newCount){
     466:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     46a:	88 23       	and	r24, r24
     46c:	51 f3       	breq	.-44     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				playStartSound();
     46e:	08 d3       	rcall	.+1552   	; 0xa80 <_Z14playStartSoundv>
     470:	82 e0       	ldi	r24, 0x02	; 2
				TIMSK3 = 0b00000010;
     472:	f5 01       	movw	r30, r10
     474:	80 83       	st	Z, r24
				TCNT3 = 0;
     476:	19 82       	std	Y+1, r1	; 0x01
     478:	18 82       	st	Y, r1
				bLightStrength(15);
     47a:	8f e0       	ldi	r24, 0x0F	; 15
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	73 de       	rcall	.-794    	; 0x166 <_Z14bLightStrengthi>
     480:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				newCount = false;
     484:	ff ef       	ldi	r31, 0xFF	; 255
     486:	2b e7       	ldi	r18, 0x7B	; 123
     488:	82 e9       	ldi	r24, 0x92	; 146
     48a:	f1 50       	subi	r31, 0x01	; 1
     48c:	20 40       	sbci	r18, 0x00	; 0
     48e:	80 40       	sbci	r24, 0x00	; 0
     490:	e1 f7       	brne	.-8      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     492:	00 c0       	rjmp	.+0      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     494:	00 00       	nop
				_delay_ms(3000); //Delay for at spille intro 10 sek
				stopSOMO();
     496:	d2 d2       	rcall	.+1444   	; 0xa3c <_Z8stopSOMOv>
     498:	9f ef       	ldi	r25, 0xFF	; 255
     49a:	e0 e7       	ldi	r30, 0x70	; 112
     49c:	f2 e0       	ldi	r31, 0x02	; 2
     49e:	91 50       	subi	r25, 0x01	; 1
     4a0:	e0 40       	sbci	r30, 0x00	; 0
     4a2:	f0 40       	sbci	r31, 0x00	; 0
     4a4:	e1 f7       	brne	.-8      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a8:	00 00       	nop
				_delay_ms(50);
				fLightOn();
     4aa:	74 de       	rcall	.-792    	; 0x194 <_Z8fLightOnv>
     4ac:	2f ef       	ldi	r18, 0xFF	; 255
     4ae:	89 ef       	ldi	r24, 0xF9	; 249
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	21 50       	subi	r18, 0x01	; 1
     4b4:	80 40       	sbci	r24, 0x00	; 0
     4b6:	90 40       	sbci	r25, 0x00	; 0
     4b8:	e1 f7       	brne	.-8      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4ba:	00 c0       	rjmp	.+0      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4bc:	00 00       	nop
     4be:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <__data_end+0x1>
				_delay_ms(20);
				MotorMode = 1;
     4c2:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <__data_end>
     4c6:	ef ef       	ldi	r30, 0xFF	; 255
     4c8:	f1 ee       	ldi	r31, 0xE1	; 225
     4ca:	24 e0       	ldi	r18, 0x04	; 4
     4cc:	e1 50       	subi	r30, 0x01	; 1
     4ce:	f0 40       	sbci	r31, 0x00	; 0
     4d0:	20 40       	sbci	r18, 0x00	; 0
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4d6:	00 00       	nop
				_delay_ms(100);
				TCNT1 = 0;
     4d8:	f8 01       	movw	r30, r16
     4da:	11 82       	std	Z+1, r1	; 0x01
     4dc:	10 82       	st	Z, r1
				setSpeed(99.0);
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	86 ec       	ldi	r24, 0xC6	; 198
     4e4:	92 e4       	ldi	r25, 0x42	; 66
     4e6:	45 d2       	rcall	.+1162   	; 0x972 <_Z8setSpeedf>
     4e8:	f0 92 05 02 	sts	0x0205, r15	; 0x800205 <counter+0x1>
				counter = 1;
     4ec:	e0 92 04 02 	sts	0x0204, r14	; 0x800204 <counter>
     4f0:	a8 cf       	rjmp	.-176    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			
			
			break;
			
			case 2:  // 1. brik
			if(newCount){
     4f2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     4f6:	88 23       	and	r24, r24
     4f8:	09 f4       	brne	.+2      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4fa:	a3 cf       	rjmp	.-186    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				TCNT3 = 0;
     4fc:	19 82       	std	Y+1, r1	; 0x01
     4fe:	18 82       	st	Y, r1
				bLightStrength(15);
     500:	8f e0       	ldi	r24, 0x0F	; 15
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	30 de       	rcall	.-928    	; 0x166 <_Z14bLightStrengthi>
     506:	ab d2       	rcall	.+1366   	; 0xa5e <_Z13playCoinSoundv>
				playCoinSound();
     508:	8f e3       	ldi	r24, 0x3F	; 63
     50a:	9c e9       	ldi	r25, 0x9C	; 156
     50c:	01 97       	sbiw	r24, 0x01	; 1
     50e:	f1 f7       	brne	.-4      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     510:	00 c0       	rjmp	.+0      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     512:	00 00       	nop
     514:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				_delay_ms(10);
				newCount = false;
     518:	f8 01       	movw	r30, r16
				TCNT1 = 0;
     51a:	11 82       	std	Z+1, r1	; 0x01
     51c:	10 82       	st	Z, r1
     51e:	60 e0       	ldi	r22, 0x00	; 0
				setSpeed(99.0);
     520:	70 e0       	ldi	r23, 0x00	; 0
     522:	86 ec       	ldi	r24, 0xC6	; 198
     524:	92 e4       	ldi	r25, 0x42	; 66
     526:	25 d2       	rcall	.+1098   	; 0x972 <_Z8setSpeedf>
     528:	ff ef       	ldi	r31, 0xFF	; 255
     52a:	22 e5       	ldi	r18, 0x52	; 82
     52c:	87 e0       	ldi	r24, 0x07	; 7
     52e:	f1 50       	subi	r31, 0x01	; 1
     530:	20 40       	sbci	r18, 0x00	; 0
     532:	80 40       	sbci	r24, 0x00	; 0
     534:	e1 f7       	brne	.-8      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
     536:	00 c0       	rjmp	.+0      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
     538:	00 00       	nop
     53a:	d0 92 05 02 	sts	0x0205, r13	; 0x800205 <counter+0x1>
				_delay_ms(150);
				counter = 2;
     53e:	c0 92 04 02 	sts	0x0204, r12	; 0x800204 <counter>
     542:	7f cf       	rjmp	.-258    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			}
			
			break;
			
			case 3:   // 2. brik
			if(newCount){
     544:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     548:	88 23       	and	r24, r24
     54a:	09 f4       	brne	.+2      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
     54c:	7a cf       	rjmp	.-268    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				TCNT3 = 0;
     54e:	19 82       	std	Y+1, r1	; 0x01
     550:	18 82       	st	Y, r1
				bLightStrength(15);
     552:	8f e0       	ldi	r24, 0x0F	; 15
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	07 de       	rcall	.-1010   	; 0x166 <_Z14bLightStrengthi>
     558:	82 d2       	rcall	.+1284   	; 0xa5e <_Z13playCoinSoundv>
				playCoinSound(); //Mario coin
     55a:	ef e3       	ldi	r30, 0x3F	; 63
     55c:	fc e9       	ldi	r31, 0x9C	; 156
     55e:	31 97       	sbiw	r30, 0x01	; 1
     560:	f1 f7       	brne	.-4      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     562:	00 c0       	rjmp	.+0      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     564:	00 00       	nop
     566:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				_delay_ms(10);
				newCount = false;
     56a:	f8 01       	movw	r30, r16
				TCNT1 = 0;
     56c:	11 82       	std	Z+1, r1	; 0x01
     56e:	10 82       	st	Z, r1
     570:	60 e0       	ldi	r22, 0x00	; 0
				setSpeed(99.0);
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	86 ec       	ldi	r24, 0xC6	; 198
     576:	92 e4       	ldi	r25, 0x42	; 66
     578:	fc d1       	rcall	.+1016   	; 0x972 <_Z8setSpeedf>
     57a:	ff ef       	ldi	r31, 0xFF	; 255
     57c:	22 e5       	ldi	r18, 0x52	; 82
     57e:	87 e0       	ldi	r24, 0x07	; 7
     580:	f1 50       	subi	r31, 0x01	; 1
     582:	20 40       	sbci	r18, 0x00	; 0
     584:	80 40       	sbci	r24, 0x00	; 0
     586:	e1 f7       	brne	.-8      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     588:	00 c0       	rjmp	.+0      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
     58a:	00 00       	nop
     58c:	83 e0       	ldi	r24, 0x03	; 3
				_delay_ms(150);
				counter = 3;
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     594:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
     598:	54 cf       	rjmp	.-344    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		
			
			break;
			
			case 4:   // 3. brik på bakken
			if(newCount){
     59a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     59e:	88 23       	and	r24, r24
     5a0:	09 f4       	brne	.+2      	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     5a2:	4f cf       	rjmp	.-354    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				TCNT3 = 0;
     5a4:	19 82       	std	Y+1, r1	; 0x01
     5a6:	18 82       	st	Y, r1
				bLightStrength(15);
     5a8:	8f e0       	ldi	r24, 0x0F	; 15
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	dc dd       	rcall	.-1096   	; 0x166 <_Z14bLightStrengthi>
				playCoinSound(); //Mario coin
     5ae:	57 d2       	rcall	.+1198   	; 0xa5e <_Z13playCoinSoundv>
     5b0:	ef e3       	ldi	r30, 0x3F	; 63
     5b2:	fc e9       	ldi	r31, 0x9C	; 156
     5b4:	31 97       	sbiw	r30, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
     5ba:	00 00       	nop
     5bc:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				_delay_ms(10);
				newCount = false;
     5c0:	f8 01       	movw	r30, r16
				TCNT1 = 0;
     5c2:	11 82       	std	Z+1, r1	; 0x01
     5c4:	10 82       	st	Z, r1
     5c6:	60 e0       	ldi	r22, 0x00	; 0
				setSpeed(99.0);
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	86 ec       	ldi	r24, 0xC6	; 198
     5cc:	92 e4       	ldi	r25, 0x42	; 66
     5ce:	d1 d1       	rcall	.+930    	; 0x972 <_Z8setSpeedf>
     5d0:	ff ef       	ldi	r31, 0xFF	; 255
     5d2:	22 e5       	ldi	r18, 0x52	; 82
     5d4:	87 e0       	ldi	r24, 0x07	; 7
     5d6:	f1 50       	subi	r31, 0x01	; 1
     5d8:	20 40       	sbci	r18, 0x00	; 0
     5da:	80 40       	sbci	r24, 0x00	; 0
     5dc:	e1 f7       	brne	.-8      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
     5de:	00 c0       	rjmp	.+0      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5e0:	00 00       	nop
				_delay_ms(150);
				counter = 4;
     5e2:	e4 e0       	ldi	r30, 0x04	; 4
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	f0 93 05 02 	sts	0x0205, r31	; 0x800205 <counter+0x1>
     5ea:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <counter>
     5ee:	29 cf       	rjmp	.-430    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			}
			break;
			
			case 5:  // 4. brik
			if(newCount){
     5f0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     5f4:	88 23       	and	r24, r24
     5f6:	09 f4       	brne	.+2      	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
     5f8:	24 cf       	rjmp	.-440    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				TCNT3 = 0;
     5fa:	19 82       	std	Y+1, r1	; 0x01
				bLightStrength(15);
     5fc:	18 82       	st	Y, r1
     5fe:	8f e0       	ldi	r24, 0x0F	; 15
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	b1 dd       	rcall	.-1182   	; 0x166 <_Z14bLightStrengthi>
				playCoinSound(); //Mario coin
     604:	2c d2       	rcall	.+1112   	; 0xa5e <_Z13playCoinSoundv>
     606:	8f e3       	ldi	r24, 0x3F	; 63
     608:	9c e9       	ldi	r25, 0x9C	; 156
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	f1 f7       	brne	.-4      	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
     610:	00 00       	nop
     612:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				_delay_ms(10);
				newCount = false;
     616:	f8 01       	movw	r30, r16
				TCNT1 = 0;
     618:	11 82       	std	Z+1, r1	; 0x01
     61a:	10 82       	st	Z, r1
     61c:	60 e0       	ldi	r22, 0x00	; 0
				setSpeed(99.0);
     61e:	70 e0       	ldi	r23, 0x00	; 0
     620:	86 ec       	ldi	r24, 0xC6	; 198
     622:	92 e4       	ldi	r25, 0x42	; 66
     624:	a6 d1       	rcall	.+844    	; 0x972 <_Z8setSpeedf>
     626:	ff ef       	ldi	r31, 0xFF	; 255
     628:	22 e5       	ldi	r18, 0x52	; 82
     62a:	87 e0       	ldi	r24, 0x07	; 7
     62c:	f1 50       	subi	r31, 0x01	; 1
     62e:	20 40       	sbci	r18, 0x00	; 0
     630:	80 40       	sbci	r24, 0x00	; 0
     632:	e1 f7       	brne	.-8      	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     634:	00 c0       	rjmp	.+0      	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
     636:	00 00       	nop
				_delay_ms(150);
				counter = 5;
     638:	e5 e0       	ldi	r30, 0x05	; 5
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	f0 93 05 02 	sts	0x0205, r31	; 0x800205 <counter+0x1>
     640:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <counter>
     644:	fe ce       	rjmp	.-516    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			}
			
			break;
			
			case 6:  // 5. brik
			if(newCount){
     646:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     64a:	88 23       	and	r24, r24
     64c:	09 f4       	brne	.+2      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
				TCNT3 = 0;
     64e:	f9 ce       	rjmp	.-526    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     650:	19 82       	std	Y+1, r1	; 0x01
				bLightStrength(15);
     652:	18 82       	st	Y, r1
     654:	8f e0       	ldi	r24, 0x0F	; 15
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	86 dd       	rcall	.-1268   	; 0x166 <_Z14bLightStrengthi>
				playCoinSound(); //Mario coin
     65a:	01 d2       	rcall	.+1026   	; 0xa5e <_Z13playCoinSoundv>
     65c:	8f e3       	ldi	r24, 0x3F	; 63
     65e:	9c e9       	ldi	r25, 0x9C	; 156
     660:	01 97       	sbiw	r24, 0x01	; 1
     662:	f1 f7       	brne	.-4      	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
     664:	00 c0       	rjmp	.+0      	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     666:	00 00       	nop
     668:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				_delay_ms(10);
				newCount = false;
     66c:	f8 01       	movw	r30, r16
				TCNT1 = 0;
     66e:	11 82       	std	Z+1, r1	; 0x01
     670:	10 82       	st	Z, r1
     672:	60 e0       	ldi	r22, 0x00	; 0
				setSpeed(90);
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	84 eb       	ldi	r24, 0xB4	; 180
     678:	92 e4       	ldi	r25, 0x42	; 66
     67a:	7b d1       	rcall	.+758    	; 0x972 <_Z8setSpeedf>
     67c:	ff ef       	ldi	r31, 0xFF	; 255
     67e:	22 e5       	ldi	r18, 0x52	; 82
     680:	87 e0       	ldi	r24, 0x07	; 7
     682:	f1 50       	subi	r31, 0x01	; 1
     684:	20 40       	sbci	r18, 0x00	; 0
     686:	80 40       	sbci	r24, 0x00	; 0
     688:	e1 f7       	brne	.-8      	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
     68a:	00 c0       	rjmp	.+0      	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
     68c:	00 00       	nop
     68e:	e6 e0       	ldi	r30, 0x06	; 6
				_delay_ms(150);
				counter = 6;
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	f0 93 05 02 	sts	0x0205, r31	; 0x800205 <counter+0x1>
     696:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <counter>
     69a:	d3 ce       	rjmp	.-602    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			}
			
			break;
			
			case 7: // stop ved 6. brik
			if(newCount){
     69c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     6a0:	88 23       	and	r24, r24
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
				playCoinSound(); //Mario coin
     6a4:	ce ce       	rjmp	.-612    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     6a6:	db d1       	rcall	.+950    	; 0xa5e <_Z13playCoinSoundv>
     6a8:	8f e3       	ldi	r24, 0x3F	; 63
     6aa:	9c e9       	ldi	r25, 0x9C	; 156
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
     6b2:	00 00       	nop
				_delay_ms(10);
				newCount = false;
     6b4:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				MotorMode = 2;
     6b8:	d0 92 03 02 	sts	0x0203, r13	; 0x800203 <__data_end+0x1>
     6bc:	c0 92 02 02 	sts	0x0202, r12	; 0x800202 <__data_end>
				TCNT1 = 0;
     6c0:	f8 01       	movw	r30, r16
     6c2:	11 82       	std	Z+1, r1	; 0x01
     6c4:	10 82       	st	Z, r1
				setSpeed(99.0);
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	86 ec       	ldi	r24, 0xC6	; 198
     6cc:	92 e4       	ldi	r25, 0x42	; 66
     6ce:	51 d1       	rcall	.+674    	; 0x972 <_Z8setSpeedf>
				TCNT3 = 0;
     6d0:	19 82       	std	Y+1, r1	; 0x01
     6d2:	18 82       	st	Y, r1
				bLightStrength(254);
     6d4:	8e ef       	ldi	r24, 0xFE	; 254
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	46 dd       	rcall	.-1396   	; 0x166 <_Z14bLightStrengthi>
     6da:	87 e0       	ldi	r24, 0x07	; 7
				counter = 7;
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     6e2:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
     6e6:	9f ef       	ldi	r25, 0xFF	; 255
     6e8:	e9 e6       	ldi	r30, 0x69	; 105
     6ea:	f8 e1       	ldi	r31, 0x18	; 24
     6ec:	91 50       	subi	r25, 0x01	; 1
     6ee:	e0 40       	sbci	r30, 0x00	; 0
     6f0:	f0 40       	sbci	r31, 0x00	; 0
     6f2:	e1 f7       	brne	.-8      	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
     6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
				_delay_ms(500);
				TCNT3 = 0;
     6f6:	00 00       	nop
     6f8:	19 82       	std	Y+1, r1	; 0x01
				bLightStrength(15);
     6fa:	18 82       	st	Y, r1
     6fc:	8f e0       	ldi	r24, 0x0F	; 15
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	32 dd       	rcall	.-1436   	; 0x166 <_Z14bLightStrengthi>
			}
			
			break;
			
			case 8: // tilbage forbi 6. brik
			if(newCount){
     702:	9f ce       	rjmp	.-706    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     704:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     708:	88 23       	and	r24, r24
     70a:	09 f4       	brne	.+2      	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
				TCNT3 = 0;
     70c:	9a ce       	rjmp	.-716    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     70e:	19 82       	std	Y+1, r1	; 0x01
				bLightStrength(15);
     710:	18 82       	st	Y, r1
     712:	8f e0       	ldi	r24, 0x0F	; 15
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	27 dd       	rcall	.-1458   	; 0x166 <_Z14bLightStrengthi>
				playCoinSound(); //Mario coin
     718:	a2 d1       	rcall	.+836    	; 0xa5e <_Z13playCoinSoundv>
     71a:	8f e3       	ldi	r24, 0x3F	; 63
     71c:	9c e9       	ldi	r25, 0x9C	; 156
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	f1 f7       	brne	.-4      	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
     722:	00 c0       	rjmp	.+0      	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
     724:	00 00       	nop
     726:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				_delay_ms(10);
				newCount = false;
     72a:	f8 01       	movw	r30, r16
				TCNT1 = 0;
     72c:	11 82       	std	Z+1, r1	; 0x01
     72e:	10 82       	st	Z, r1
     730:	60 e0       	ldi	r22, 0x00	; 0
				setSpeed(99.0);
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	86 ec       	ldi	r24, 0xC6	; 198
     736:	92 e4       	ldi	r25, 0x42	; 66
     738:	1c d1       	rcall	.+568    	; 0x972 <_Z8setSpeedf>
     73a:	ff ef       	ldi	r31, 0xFF	; 255
     73c:	22 e5       	ldi	r18, 0x52	; 82
     73e:	87 e0       	ldi	r24, 0x07	; 7
     740:	f1 50       	subi	r31, 0x01	; 1
     742:	20 40       	sbci	r18, 0x00	; 0
     744:	80 40       	sbci	r24, 0x00	; 0
     746:	e1 f7       	brne	.-8      	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
     748:	00 c0       	rjmp	.+0      	; 0x74a <__LOCK_REGION_LENGTH__+0x34a>
     74a:	00 00       	nop
     74c:	30 92 05 02 	sts	0x0205, r3	; 0x800205 <counter+0x1>
				_delay_ms(150);
				counter = 8;
     750:	20 92 04 02 	sts	0x0204, r2	; 0x800204 <counter>
     754:	76 ce       	rjmp	.-788    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			
			break;
			
			case 9:
			
			counter++;
     756:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     75a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     75e:	01 96       	adiw	r24, 0x01	; 1
     760:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     764:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
			break;
     768:	6c ce       	rjmp	.-808    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			
			case 10: //Stop ved 5. brik igen
			if(newCount){
     76a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     76e:	88 23       	and	r24, r24
     770:	09 f4       	brne	.+2      	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
     772:	67 ce       	rjmp	.-818    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				playCoinSound(); //Mario coin
     774:	74 d1       	rcall	.+744    	; 0xa5e <_Z13playCoinSoundv>
     776:	ef e3       	ldi	r30, 0x3F	; 63
     778:	fc e9       	ldi	r31, 0x9C	; 156
     77a:	31 97       	sbiw	r30, 0x01	; 1
     77c:	f1 f7       	brne	.-4      	; 0x77a <__LOCK_REGION_LENGTH__+0x37a>
     77e:	00 c0       	rjmp	.+0      	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
     780:	00 00       	nop
				_delay_ms(10);
				newCount = false;
     782:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				TCNT3 = 0;
     786:	19 82       	std	Y+1, r1	; 0x01
     788:	18 82       	st	Y, r1
				bLightStrength(254);
     78a:	8e ef       	ldi	r24, 0xFE	; 254
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	eb dc       	rcall	.-1578   	; 0x166 <_Z14bLightStrengthi>
     790:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <__data_end+0x1>
				MotorMode = 1;
     794:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <__data_end>
     798:	ff ef       	ldi	r31, 0xFF	; 255
     79a:	21 ee       	ldi	r18, 0xE1	; 225
     79c:	84 e0       	ldi	r24, 0x04	; 4
     79e:	f1 50       	subi	r31, 0x01	; 1
     7a0:	20 40       	sbci	r18, 0x00	; 0
     7a2:	80 40       	sbci	r24, 0x00	; 0
     7a4:	e1 f7       	brne	.-8      	; 0x79e <__LOCK_REGION_LENGTH__+0x39e>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <__LOCK_REGION_LENGTH__+0x3a8>
     7a8:	00 00       	nop
				_delay_ms(100);
				TCNT1 = 0;
     7aa:	f8 01       	movw	r30, r16
     7ac:	11 82       	std	Z+1, r1	; 0x01
				setSpeed(99.0);
     7ae:	10 82       	st	Z, r1
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	86 ec       	ldi	r24, 0xC6	; 198
     7b6:	92 e4       	ldi	r25, 0x42	; 66
     7b8:	dc d0       	rcall	.+440    	; 0x972 <_Z8setSpeedf>
				counter = 10;
     7ba:	50 92 05 02 	sts	0x0205, r5	; 0x800205 <counter+0x1>
     7be:	40 92 04 02 	sts	0x0204, r4	; 0x800204 <counter>
     7c2:	ff ef       	ldi	r31, 0xFF	; 255
     7c4:	29 e6       	ldi	r18, 0x69	; 105
     7c6:	88 e1       	ldi	r24, 0x18	; 24
     7c8:	f1 50       	subi	r31, 0x01	; 1
     7ca:	20 40       	sbci	r18, 0x00	; 0
     7cc:	80 40       	sbci	r24, 0x00	; 0
     7ce:	e1 f7       	brne	.-8      	; 0x7c8 <__LOCK_REGION_LENGTH__+0x3c8>
     7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <__LOCK_REGION_LENGTH__+0x3d2>
     7d2:	00 00       	nop
				_delay_ms(500);
				TCNT3 = 0;
     7d4:	19 82       	std	Y+1, r1	; 0x01
     7d6:	18 82       	st	Y, r1
				bLightStrength(15);
     7d8:	8f e0       	ldi	r24, 0x0F	; 15
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	c4 dc       	rcall	.-1656   	; 0x166 <_Z14bLightStrengthi>
     7de:	31 ce       	rjmp	.-926    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     7e0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
		
			}
			break;
			
			case 11: // 5. brik igen
			if(newCount){
     7e4:	88 23       	and	r24, r24
     7e6:	09 f4       	brne	.+2      	; 0x7ea <__LOCK_REGION_LENGTH__+0x3ea>
     7e8:	2c ce       	rjmp	.-936    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				TCNT3 = 0;
     7ea:	19 82       	std	Y+1, r1	; 0x01
     7ec:	18 82       	st	Y, r1
				bLightStrength(15);
     7ee:	8f e0       	ldi	r24, 0x0F	; 15
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	b9 dc       	rcall	.-1678   	; 0x166 <_Z14bLightStrengthi>
     7f4:	34 d1       	rcall	.+616    	; 0xa5e <_Z13playCoinSoundv>
				playCoinSound(); //Mario coin
     7f6:	ef e3       	ldi	r30, 0x3F	; 63
     7f8:	fc e9       	ldi	r31, 0x9C	; 156
     7fa:	31 97       	sbiw	r30, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <__LOCK_REGION_LENGTH__+0x3fa>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <__LOCK_REGION_LENGTH__+0x400>
     800:	00 00       	nop
     802:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				_delay_ms(10);
				newCount = false;
     806:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <__data_end+0x1>
				MotorMode = 1;
     80a:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <__data_end>
     80e:	ff ef       	ldi	r31, 0xFF	; 255
     810:	21 ee       	ldi	r18, 0xE1	; 225
     812:	84 e0       	ldi	r24, 0x04	; 4
     814:	f1 50       	subi	r31, 0x01	; 1
     816:	20 40       	sbci	r18, 0x00	; 0
     818:	80 40       	sbci	r24, 0x00	; 0
     81a:	e1 f7       	brne	.-8      	; 0x814 <__LOCK_REGION_LENGTH__+0x414>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <__LOCK_REGION_LENGTH__+0x41e>
     81e:	00 00       	nop
     820:	f8 01       	movw	r30, r16
				_delay_ms(100);
				TCNT1 = 0;
     822:	11 82       	std	Z+1, r1	; 0x01
     824:	10 82       	st	Z, r1
				setSpeed(99.0);
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	86 ec       	ldi	r24, 0xC6	; 198
     82c:	92 e4       	ldi	r25, 0x42	; 66
     82e:	a1 d0       	rcall	.+322    	; 0x972 <_Z8setSpeedf>
     830:	ff ef       	ldi	r31, 0xFF	; 255
     832:	29 e6       	ldi	r18, 0x69	; 105
     834:	88 e1       	ldi	r24, 0x18	; 24
     836:	f1 50       	subi	r31, 0x01	; 1
     838:	20 40       	sbci	r18, 0x00	; 0
     83a:	80 40       	sbci	r24, 0x00	; 0
     83c:	e1 f7       	brne	.-8      	; 0x836 <__LOCK_REGION_LENGTH__+0x436>
     83e:	00 c0       	rjmp	.+0      	; 0x840 <__LOCK_REGION_LENGTH__+0x440>
     840:	00 00       	nop
				_delay_ms(500);
				counter = 11;
     842:	70 92 05 02 	sts	0x0205, r7	; 0x800205 <counter+0x1>
     846:	60 92 04 02 	sts	0x0204, r6	; 0x800204 <counter>
     84a:	fb cd       	rjmp	.-1034   	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			}
			break;
			
			case 12: // 6. brik igen 
			if(newCount){
     84c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     850:	88 23       	and	r24, r24
     852:	09 f4       	brne	.+2      	; 0x856 <__LOCK_REGION_LENGTH__+0x456>
				playCoinSound(); //Mario coin
     854:	f6 cd       	rjmp	.-1044   	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     856:	03 d1       	rcall	.+518    	; 0xa5e <_Z13playCoinSoundv>
     858:	ef e3       	ldi	r30, 0x3F	; 63
     85a:	fc e9       	ldi	r31, 0x9C	; 156
     85c:	31 97       	sbiw	r30, 0x01	; 1
     85e:	f1 f7       	brne	.-4      	; 0x85c <__LOCK_REGION_LENGTH__+0x45c>
     860:	00 c0       	rjmp	.+0      	; 0x862 <__LOCK_REGION_LENGTH__+0x462>
     862:	00 00       	nop
				_delay_ms(10);
				newCount = false;
     864:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				setSpeed(0);
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	cb 01       	movw	r24, r22
     86e:	81 d0       	rcall	.+258    	; 0x972 <_Z8setSpeedf>
     870:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__data_end+0x1>
				MotorMode = 0;
     874:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
     878:	19 82       	std	Y+1, r1	; 0x01
				TCNT3 = 0;
     87a:	18 82       	st	Y, r1
     87c:	8e ef       	ldi	r24, 0xFE	; 254
				bLightStrength(254);
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	72 dc       	rcall	.-1820   	; 0x166 <_Z14bLightStrengthi>
     882:	ff ef       	ldi	r31, 0xFF	; 255
     884:	29 e6       	ldi	r18, 0x69	; 105
     886:	88 e1       	ldi	r24, 0x18	; 24
     888:	f1 50       	subi	r31, 0x01	; 1
     88a:	20 40       	sbci	r18, 0x00	; 0
     88c:	80 40       	sbci	r24, 0x00	; 0
     88e:	e1 f7       	brne	.-8      	; 0x888 <__LOCK_REGION_LENGTH__+0x488>
     890:	00 c0       	rjmp	.+0      	; 0x892 <__LOCK_REGION_LENGTH__+0x492>
     892:	00 00       	nop
     894:	19 82       	std	Y+1, r1	; 0x01
				_delay_ms(500);
				TCNT3 = 0;
     896:	18 82       	st	Y, r1
     898:	8f e0       	ldi	r24, 0x0F	; 15
				bLightStrength(15);
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	64 dc       	rcall	.-1848   	; 0x166 <_Z14bLightStrengthi>
     89e:	9f ef       	ldi	r25, 0xFF	; 255
     8a0:	e7 e8       	ldi	r30, 0x87	; 135
     8a2:	f3 e1       	ldi	r31, 0x13	; 19
     8a4:	91 50       	subi	r25, 0x01	; 1
     8a6:	e0 40       	sbci	r30, 0x00	; 0
     8a8:	f0 40       	sbci	r31, 0x00	; 0
     8aa:	e1 f7       	brne	.-8      	; 0x8a4 <__LOCK_REGION_LENGTH__+0x4a4>
     8ac:	00 c0       	rjmp	.+0      	; 0x8ae <__LOCK_REGION_LENGTH__+0x4ae>
     8ae:	00 00       	nop
     8b0:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <__data_end+0x1>
				_delay_ms(400);
				MotorMode = 1;
     8b4:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <__data_end>
     8b8:	2f ef       	ldi	r18, 0xFF	; 255
     8ba:	81 ee       	ldi	r24, 0xE1	; 225
     8bc:	94 e0       	ldi	r25, 0x04	; 4
     8be:	21 50       	subi	r18, 0x01	; 1
     8c0:	80 40       	sbci	r24, 0x00	; 0
     8c2:	90 40       	sbci	r25, 0x00	; 0
     8c4:	e1 f7       	brne	.-8      	; 0x8be <__LOCK_REGION_LENGTH__+0x4be>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <__LOCK_REGION_LENGTH__+0x4c8>
     8c8:	00 00       	nop
				_delay_ms(100);
				TCNT1 = 0;
     8ca:	f8 01       	movw	r30, r16
     8cc:	11 82       	std	Z+1, r1	; 0x01
     8ce:	10 82       	st	Z, r1
				setSpeed(99.0);
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	86 ec       	ldi	r24, 0xC6	; 198
     8d6:	92 e4       	ldi	r25, 0x42	; 66
     8d8:	4c d0       	rcall	.+152    	; 0x972 <_Z8setSpeedf>
     8da:	90 92 05 02 	sts	0x0205, r9	; 0x800205 <counter+0x1>
				counter = 12;
     8de:	80 92 04 02 	sts	0x0204, r8	; 0x800204 <counter>
			}
			
			break;
			
			case 13: // Stop efter 7. brik
			if(newCount){
     8e2:	af cd       	rjmp	.-1186   	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     8e4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
				playCoinSound(); //Mario coin
     8e8:	88 23       	and	r24, r24
     8ea:	09 f4       	brne	.+2      	; 0x8ee <__LOCK_REGION_LENGTH__+0x4ee>
     8ec:	aa cd       	rjmp	.-1196   	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     8ee:	b7 d0       	rcall	.+366    	; 0xa5e <_Z13playCoinSoundv>
     8f0:	8f e3       	ldi	r24, 0x3F	; 63
     8f2:	9c e9       	ldi	r25, 0x9C	; 156
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <__LOCK_REGION_LENGTH__+0x4f4>
				_delay_ms(10);
				newCount = false;
     8f8:	00 c0       	rjmp	.+0      	; 0x8fa <__LOCK_REGION_LENGTH__+0x4fa>
     8fa:	00 00       	nop
     8fc:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
     900:	9f ef       	ldi	r25, 0xFF	; 255
     902:	e3 ed       	ldi	r30, 0xD3	; 211
     904:	f0 e3       	ldi	r31, 0x30	; 48
     906:	91 50       	subi	r25, 0x01	; 1
     908:	e0 40       	sbci	r30, 0x00	; 0
     90a:	f0 40       	sbci	r31, 0x00	; 0
     90c:	e1 f7       	brne	.-8      	; 0x906 <__LOCK_REGION_LENGTH__+0x506>
				_delay_ms(1000);
				TCNT3 = 0;
     90e:	00 c0       	rjmp	.+0      	; 0x910 <__LOCK_REGION_LENGTH__+0x510>
     910:	00 00       	nop
				bLightStrength(254);
     912:	19 82       	std	Y+1, r1	; 0x01
     914:	18 82       	st	Y, r1
     916:	8e ef       	ldi	r24, 0xFE	; 254
     918:	90 e0       	ldi	r25, 0x00	; 0
				MotorMode = 0;
     91a:	25 dc       	rcall	.-1974   	; 0x166 <_Z14bLightStrengthi>
     91c:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__data_end+0x1>
     920:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	89 e6       	ldi	r24, 0x69	; 105
     928:	98 e1       	ldi	r25, 0x18	; 24
     92a:	21 50       	subi	r18, 0x01	; 1
     92c:	80 40       	sbci	r24, 0x00	; 0
     92e:	90 40       	sbci	r25, 0x00	; 0
     930:	e1 f7       	brne	.-8      	; 0x92a <__LOCK_REGION_LENGTH__+0x52a>
     932:	00 c0       	rjmp	.+0      	; 0x934 <__LOCK_REGION_LENGTH__+0x534>
				_delay_ms(500);
				fLightOff();
     934:	00 00       	nop
     936:	31 dc       	rcall	.-1950   	; 0x19a <_Z9fLightOffv>
				stopSOMO();
     938:	81 d0       	rcall	.+258    	; 0xa3c <_Z8stopSOMOv>
     93a:	f5 01       	movw	r30, r10
				TIMSK3 = 0b00000000;
     93c:	10 82       	st	Z, r1
     93e:	18 b8       	out	0x08, r1	; 8
				PORTC = 0b00000000;
     940:	b0 d0       	rcall	.+352    	; 0xaa2 <_Z12playEndSoundv>
				playEndSound(); //Mario end
     942:	6b d0       	rcall	.+214    	; 0xa1a <_Z8playNextv>
     944:	7e cd       	rjmp	.-1284   	; 0x442 <__LOCK_REGION_LENGTH__+0x42>

00000946 <_Z9initMotorv>:
#include "MotorDriver.h"
#include <stdio.h>
#include <avr/io.h>

void initMotor(){
	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<WGM11)|(0<<WGM10); // Set compare mode 3 for OCR1A, clear on upcount, set on downcount.
     946:	82 e8       	ldi	r24, 0x82	; 130
     948:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = (1<<WGM13)|(0<<WGM12)|(1<<CS12)|(0<<CS11)|(0<<CS10); // Set Mode 10, PWM Phase correct ICR1 TOP & 256 prescaler
     94c:	84 e1       	ldi	r24, 0x14	; 20
     94e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	ICR1 = 125;
     952:	8d e7       	ldi	r24, 0x7D	; 125
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     95a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	TIMSK1 = 0b00000010;
     95e:	82 e0       	ldi	r24, 0x02	; 2
     960:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
	OCR1A = 0;
     964:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     968:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	DDRA = 0xFF; // Make pin A ports outputs, so we can trigger the H-Bridge.
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	81 b9       	out	0x01, r24	; 1
     970:	08 95       	ret

00000972 <_Z8setSpeedf>:
}

void setSpeed(float speed) {
     972:	cf 92       	push	r12
     974:	df 92       	push	r13
     976:	ef 92       	push	r14
     978:	ff 92       	push	r15
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	6b 01       	movw	r12, r22
     980:	7c 01       	movw	r14, r24
	
	if(speed > 100){
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	48 ec       	ldi	r20, 0xC8	; 200
     988:	52 e4       	ldi	r21, 0x42	; 66
     98a:	b4 d2       	rcall	.+1384   	; 0xef4 <__gesf2>
     98c:	18 16       	cp	r1, r24
     98e:	64 f0       	brlt	.+24     	; 0x9a8 <_Z8setSpeedf+0x36>
		speed = 100;
	}
	if(speed < 0){
     990:	20 e0       	ldi	r18, 0x00	; 0
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	a9 01       	movw	r20, r18
     996:	c7 01       	movw	r24, r14
     998:	b6 01       	movw	r22, r12
     99a:	62 d1       	rcall	.+708    	; 0xc60 <__cmpsf2>
     99c:	88 23       	and	r24, r24
     99e:	64 f4       	brge	.+24     	; 0x9b8 <_Z8setSpeedf+0x46>
		speed = 0;
     9a0:	c1 2c       	mov	r12, r1
     9a2:	d1 2c       	mov	r13, r1
     9a4:	76 01       	movw	r14, r12
     9a6:	08 c0       	rjmp	.+16     	; 0x9b8 <_Z8setSpeedf+0x46>
}

void setSpeed(float speed) {
	
	if(speed > 100){
		speed = 100;
     9a8:	0f 2e       	mov	r0, r31
     9aa:	c1 2c       	mov	r12, r1
     9ac:	d1 2c       	mov	r13, r1
     9ae:	f8 ec       	ldi	r31, 0xC8	; 200
     9b0:	ef 2e       	mov	r14, r31
     9b2:	f2 e4       	ldi	r31, 0x42	; 66
     9b4:	ff 2e       	mov	r15, r31
     9b6:	f0 2d       	mov	r31, r0
	}
	if(speed < 0){
		speed = 0;
	}
	speed = speed / 100;
	OCR1A = (1-speed)*ICR1;
     9b8:	c0 91 86 00 	lds	r28, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
     9bc:	d0 91 87 00 	lds	r29, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	48 ec       	ldi	r20, 0xC8	; 200
     9c6:	52 e4       	ldi	r21, 0x42	; 66
     9c8:	c7 01       	movw	r24, r14
     9ca:	b6 01       	movw	r22, r12
     9cc:	4d d1       	rcall	.+666    	; 0xc68 <__divsf3>
     9ce:	9b 01       	movw	r18, r22
     9d0:	ac 01       	movw	r20, r24
     9d2:	60 e0       	ldi	r22, 0x00	; 0
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	80 e8       	ldi	r24, 0x80	; 128
     9d8:	9f e3       	ldi	r25, 0x3F	; 63
     9da:	dd d0       	rcall	.+442    	; 0xb96 <__subsf3>
     9dc:	6b 01       	movw	r12, r22
     9de:	7c 01       	movw	r14, r24
     9e0:	be 01       	movw	r22, r28
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	d4 d1       	rcall	.+936    	; 0xd90 <__floatunsisf>
     9e8:	9b 01       	movw	r18, r22
     9ea:	ac 01       	movw	r20, r24
     9ec:	c7 01       	movw	r24, r14
     9ee:	b6 01       	movw	r22, r12
     9f0:	85 d2       	rcall	.+1290   	; 0xefc <__mulsf3>
     9f2:	a2 d1       	rcall	.+836    	; 0xd38 <__fixunssfsi>
     9f4:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     9f8:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	df 90       	pop	r13
     a06:	cf 90       	pop	r12
     a08:	08 95       	ret

00000a0a <_Z8SendCharc>:
	volumeMax();
}

void SendChar(char Tegn)
{
   while(!(UCSR2A & (1<<UDRE2))){
     a0a:	e0 ed       	ldi	r30, 0xD0	; 208
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	90 81       	ld	r25, Z
     a10:	95 ff       	sbrs	r25, 5
     a12:	fd cf       	rjmp	.-6      	; 0xa0e <_Z8SendCharc+0x4>
	   
   }
   UDR2 = Tegn;
     a14:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     a18:	08 95       	ret

00000a1a <_Z8playNextv>:
}

void playNext()
{

	SendChar(0x7E);
     a1a:	8e e7       	ldi	r24, 0x7E	; 126
     a1c:	f6 df       	rcall	.-20     	; 0xa0a <_Z8SendCharc>
	SendChar(0x01);
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	f4 df       	rcall	.-24     	; 0xa0a <_Z8SendCharc>
	SendChar(0x00);
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	f2 df       	rcall	.-28     	; 0xa0a <_Z8SendCharc>
	SendChar(0x00);
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	f0 df       	rcall	.-32     	; 0xa0a <_Z8SendCharc>
	SendChar(0x00);
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	ee df       	rcall	.-36     	; 0xa0a <_Z8SendCharc>
	SendChar(0xFF);
     a2e:	8f ef       	ldi	r24, 0xFF	; 255
     a30:	ec df       	rcall	.-40     	; 0xa0a <_Z8SendCharc>
	SendChar(0xFF);
     a32:	8f ef       	ldi	r24, 0xFF	; 255
     a34:	ea df       	rcall	.-44     	; 0xa0a <_Z8SendCharc>
     a36:	8f ee       	ldi	r24, 0xEF	; 239
	SendChar(0xEF);
     a38:	e8 cf       	rjmp	.-48     	; 0xa0a <_Z8SendCharc>
     a3a:	08 95       	ret

00000a3c <_Z8stopSOMOv>:
     a3c:	8e e7       	ldi	r24, 0x7E	; 126
     a3e:	e5 df       	rcall	.-54     	; 0xa0a <_Z8SendCharc>

void stopSOMO()
{

	SendChar(0x7E);
	SendChar(0x0C);
     a40:	8c e0       	ldi	r24, 0x0C	; 12
     a42:	e3 df       	rcall	.-58     	; 0xa0a <_Z8SendCharc>
	SendChar(0x00);
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	e1 df       	rcall	.-62     	; 0xa0a <_Z8SendCharc>
	SendChar(0x00);
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	df df       	rcall	.-66     	; 0xa0a <_Z8SendCharc>
	SendChar(0x00);
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	dd df       	rcall	.-70     	; 0xa0a <_Z8SendCharc>
	SendChar(0xFF);
     a50:	8f ef       	ldi	r24, 0xFF	; 255
     a52:	db df       	rcall	.-74     	; 0xa0a <_Z8SendCharc>
	SendChar(0xF4);
     a54:	84 ef       	ldi	r24, 0xF4	; 244
     a56:	d9 df       	rcall	.-78     	; 0xa0a <_Z8SendCharc>
     a58:	8f ee       	ldi	r24, 0xEF	; 239
	SendChar(0xEF);
     a5a:	d7 cf       	rjmp	.-82     	; 0xa0a <_Z8SendCharc>
     a5c:	08 95       	ret

00000a5e <_Z13playCoinSoundv>:
     a5e:	8e e7       	ldi	r24, 0x7E	; 126
     a60:	d4 df       	rcall	.-88     	; 0xa0a <_Z8SendCharc>
};

void playCoinSound()
{
	SendChar(0x7E);
	SendChar(0x0F);
     a62:	8f e0       	ldi	r24, 0x0F	; 15
     a64:	d2 df       	rcall	.-92     	; 0xa0a <_Z8SendCharc>
	SendChar(0x00);
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	d0 df       	rcall	.-96     	; 0xa0a <_Z8SendCharc>
	SendChar(0x03);
     a6a:	83 e0       	ldi	r24, 0x03	; 3
     a6c:	ce df       	rcall	.-100    	; 0xa0a <_Z8SendCharc>
	SendChar(0x01);
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	cc df       	rcall	.-104    	; 0xa0a <_Z8SendCharc>
	SendChar(0xFF);
     a72:	8f ef       	ldi	r24, 0xFF	; 255
     a74:	ca df       	rcall	.-108    	; 0xa0a <_Z8SendCharc>
	SendChar(0xEF);
     a76:	8f ee       	ldi	r24, 0xEF	; 239
     a78:	c8 df       	rcall	.-112    	; 0xa0a <_Z8SendCharc>
     a7a:	8f ee       	ldi	r24, 0xEF	; 239
	SendChar(0xEF);
     a7c:	c6 cf       	rjmp	.-116    	; 0xa0a <_Z8SendCharc>
     a7e:	08 95       	ret

00000a80 <_Z14playStartSoundv>:
     a80:	8e e7       	ldi	r24, 0x7E	; 126
     a82:	c3 df       	rcall	.-122    	; 0xa0a <_Z8SendCharc>


void playStartSound()
{
	SendChar(0x7E);
	SendChar(0x0F);
     a84:	8f e0       	ldi	r24, 0x0F	; 15
     a86:	c1 df       	rcall	.-126    	; 0xa0a <_Z8SendCharc>
	SendChar(0x00);
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	bf df       	rcall	.-130    	; 0xa0a <_Z8SendCharc>
	SendChar(0x01);
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	bd df       	rcall	.-134    	; 0xa0a <_Z8SendCharc>
	SendChar(0x01);
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	bb df       	rcall	.-138    	; 0xa0a <_Z8SendCharc>
	SendChar(0xFF);
     a94:	8f ef       	ldi	r24, 0xFF	; 255
     a96:	b9 df       	rcall	.-142    	; 0xa0a <_Z8SendCharc>
	SendChar(0xEF);
     a98:	8f ee       	ldi	r24, 0xEF	; 239
     a9a:	b7 df       	rcall	.-146    	; 0xa0a <_Z8SendCharc>
     a9c:	8f ee       	ldi	r24, 0xEF	; 239
	SendChar(0xEF);
     a9e:	b5 cf       	rjmp	.-150    	; 0xa0a <_Z8SendCharc>
     aa0:	08 95       	ret

00000aa2 <_Z12playEndSoundv>:
     aa2:	8e e7       	ldi	r24, 0x7E	; 126
     aa4:	b2 df       	rcall	.-156    	; 0xa0a <_Z8SendCharc>


void playEndSound()
{
	SendChar(0x7E);
	SendChar(0x0F);
     aa6:	8f e0       	ldi	r24, 0x0F	; 15
     aa8:	b0 df       	rcall	.-160    	; 0xa0a <_Z8SendCharc>
	SendChar(0x00);
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	ae df       	rcall	.-164    	; 0xa0a <_Z8SendCharc>
	SendChar(0x02);
     aae:	82 e0       	ldi	r24, 0x02	; 2
     ab0:	ac df       	rcall	.-168    	; 0xa0a <_Z8SendCharc>
	SendChar(0x01);
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	aa df       	rcall	.-172    	; 0xa0a <_Z8SendCharc>
	SendChar(0xFF);
     ab6:	8f ef       	ldi	r24, 0xFF	; 255
     ab8:	a8 df       	rcall	.-176    	; 0xa0a <_Z8SendCharc>
	SendChar(0xEF);
     aba:	8f ee       	ldi	r24, 0xEF	; 239
     abc:	a6 df       	rcall	.-180    	; 0xa0a <_Z8SendCharc>
     abe:	8f ee       	ldi	r24, 0xEF	; 239
	SendChar(0xEF);
     ac0:	a4 cf       	rjmp	.-184    	; 0xa0a <_Z8SendCharc>
     ac2:	08 95       	ret

00000ac4 <_Z9volumeMaxv>:
     ac4:	8e e7       	ldi	r24, 0x7E	; 126
     ac6:	a1 df       	rcall	.-190    	; 0xa0a <_Z8SendCharc>

void volumeMax()
{

	SendChar(0x7E);
	SendChar(0x06);
     ac8:	86 e0       	ldi	r24, 0x06	; 6
     aca:	9f df       	rcall	.-194    	; 0xa0a <_Z8SendCharc>
	SendChar(0x00);
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	9d df       	rcall	.-198    	; 0xa0a <_Z8SendCharc>
	SendChar(0x00);
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	9b df       	rcall	.-202    	; 0xa0a <_Z8SendCharc>
	SendChar(0x1E);
     ad4:	8e e1       	ldi	r24, 0x1E	; 30
     ad6:	99 df       	rcall	.-206    	; 0xa0a <_Z8SendCharc>
	SendChar(0xFF);
     ad8:	8f ef       	ldi	r24, 0xFF	; 255
     ada:	97 df       	rcall	.-210    	; 0xa0a <_Z8SendCharc>
	SendChar(0xDC);
     adc:	8c ed       	ldi	r24, 0xDC	; 220
     ade:	95 df       	rcall	.-214    	; 0xa0a <_Z8SendCharc>
     ae0:	8f ee       	ldi	r24, 0xEF	; 239
	SendChar(0xEF);
     ae2:	93 cf       	rjmp	.-218    	; 0xa0a <_Z8SendCharc>
     ae4:	08 95       	ret

00000ae6 <_Z8InitUARTmhb>:
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
    Baud rate = 9600.
    Data bits = 8.
*************************************************************************/
void InitUART(unsigned long BAUD, unsigned char DataBit, bool Rx_Int)
{
   if(Rx_Int){
     aea:	22 23       	and	r18, r18
     aec:	29 f0       	breq	.+10     	; 0xaf8 <_Z8InitUARTmhb+0x12>
	  UCSR2B = 0b10011000; 
     aee:	28 e9       	ldi	r18, 0x98	; 152
     af0:	20 93 d1 00 	sts	0x00D1, r18	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
	  sei();
     af4:	78 94       	sei
     af6:	03 c0       	rjmp	.+6      	; 0xafe <_Z8InitUARTmhb+0x18>
   }else{
	   UCSR2B = 0b00011000;
     af8:	28 e1       	ldi	r18, 0x18	; 24
     afa:	20 93 d1 00 	sts	0x00D1, r18	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
   }
   if((BAUD >= 300) && (BAUD <= 115200) && (DataBit >= 5) && (DataBit <= 8)){
     afe:	8b 01       	movw	r16, r22
     b00:	9c 01       	movw	r18, r24
     b02:	0c 52       	subi	r16, 0x2C	; 44
     b04:	11 40       	sbci	r17, 0x01	; 1
     b06:	21 09       	sbc	r18, r1
     b08:	31 09       	sbc	r19, r1
     b0a:	05 3d       	cpi	r16, 0xD5	; 213
     b0c:	10 4c       	sbci	r17, 0xC0	; 192
     b0e:	21 40       	sbci	r18, 0x01	; 1
     b10:	31 05       	cpc	r19, r1
     b12:	08 f5       	brcc	.+66     	; 0xb56 <_Z8InitUARTmhb+0x70>
     b14:	2b ef       	ldi	r18, 0xFB	; 251
     b16:	24 0f       	add	r18, r20
     b18:	24 30       	cpi	r18, 0x04	; 4
     b1a:	e8 f4       	brcc	.+58     	; 0xb56 <_Z8InitUARTmhb+0x70>
	   switch(DataBit){
     b1c:	46 30       	cpi	r20, 0x06	; 6
     b1e:	61 f0       	breq	.+24     	; 0xb38 <_Z8InitUARTmhb+0x52>
     b20:	18 f4       	brcc	.+6      	; 0xb28 <_Z8InitUARTmhb+0x42>
     b22:	45 30       	cpi	r20, 0x05	; 5
     b24:	31 f0       	breq	.+12     	; 0xb32 <_Z8InitUARTmhb+0x4c>
     b26:	14 c0       	rjmp	.+40     	; 0xb50 <_Z8InitUARTmhb+0x6a>
     b28:	47 30       	cpi	r20, 0x07	; 7
     b2a:	51 f0       	breq	.+20     	; 0xb40 <_Z8InitUARTmhb+0x5a>
     b2c:	48 30       	cpi	r20, 0x08	; 8
     b2e:	61 f0       	breq	.+24     	; 0xb48 <_Z8InitUARTmhb+0x62>
     b30:	0f c0       	rjmp	.+30     	; 0xb50 <_Z8InitUARTmhb+0x6a>
		   case 5:
			   UCSR2C = 0b00000000;
     b32:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			   break;
     b36:	0f c0       	rjmp	.+30     	; 0xb56 <_Z8InitUARTmhb+0x70>
		   
		   case 6:
			   UCSR2C = 0b00000010;
     b38:	22 e0       	ldi	r18, 0x02	; 2
     b3a:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			   break;
     b3e:	0b c0       	rjmp	.+22     	; 0xb56 <_Z8InitUARTmhb+0x70>
		   
		   case 7:
			   UCSR2C = 0b00000100;
     b40:	24 e0       	ldi	r18, 0x04	; 4
     b42:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			   break;
     b46:	07 c0       	rjmp	.+14     	; 0xb56 <_Z8InitUARTmhb+0x70>
		   
		   case 8:
			   UCSR2C = 0b00000110;
     b48:	26 e0       	ldi	r18, 0x06	; 6
     b4a:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			   break;
     b4e:	03 c0       	rjmp	.+6      	; 0xb56 <_Z8InitUARTmhb+0x70>
		   
		   default:
			   UCSR2C = 0b00000110;
     b50:	26 e0       	ldi	r18, 0x06	; 6
     b52:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			   break;
	   }
	}
	UBRR2L = ((F_CPU/(16*BAUD))-1);
     b56:	dc 01       	movw	r26, r24
     b58:	cb 01       	movw	r24, r22
     b5a:	88 0f       	add	r24, r24
     b5c:	99 1f       	adc	r25, r25
     b5e:	aa 1f       	adc	r26, r26
     b60:	bb 1f       	adc	r27, r27
     b62:	88 0f       	add	r24, r24
     b64:	99 1f       	adc	r25, r25
     b66:	aa 1f       	adc	r26, r26
     b68:	bb 1f       	adc	r27, r27
     b6a:	9c 01       	movw	r18, r24
     b6c:	ad 01       	movw	r20, r26
     b6e:	22 0f       	add	r18, r18
     b70:	33 1f       	adc	r19, r19
     b72:	44 1f       	adc	r20, r20
     b74:	55 1f       	adc	r21, r21
     b76:	22 0f       	add	r18, r18
     b78:	33 1f       	adc	r19, r19
     b7a:	44 1f       	adc	r20, r20
     b7c:	55 1f       	adc	r21, r21
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	74 e2       	ldi	r23, 0x24	; 36
     b82:	84 ef       	ldi	r24, 0xF4	; 244
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	1d d2       	rcall	.+1082   	; 0xfc2 <__udivmodsi4>
     b88:	21 50       	subi	r18, 0x01	; 1
     b8a:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	volumeMax();
     b8e:	9a df       	rcall	.-204    	; 0xac4 <_Z9volumeMaxv>
     b90:	1f 91       	pop	r17
}
     b92:	0f 91       	pop	r16
     b94:	08 95       	ret

00000b96 <__subsf3>:
     b96:	50 58       	subi	r21, 0x80	; 128

00000b98 <__addsf3>:
     b98:	bb 27       	eor	r27, r27
     b9a:	aa 27       	eor	r26, r26
     b9c:	0e d0       	rcall	.+28     	; 0xbba <__addsf3x>
     b9e:	70 c1       	rjmp	.+736    	; 0xe80 <__fp_round>
     ba0:	61 d1       	rcall	.+706    	; 0xe64 <__fp_pscA>
     ba2:	30 f0       	brcs	.+12     	; 0xbb0 <__addsf3+0x18>
     ba4:	66 d1       	rcall	.+716    	; 0xe72 <__fp_pscB>
     ba6:	20 f0       	brcs	.+8      	; 0xbb0 <__addsf3+0x18>
     ba8:	31 f4       	brne	.+12     	; 0xbb6 <__addsf3+0x1e>
     baa:	9f 3f       	cpi	r25, 0xFF	; 255
     bac:	11 f4       	brne	.+4      	; 0xbb2 <__addsf3+0x1a>
     bae:	1e f4       	brtc	.+6      	; 0xbb6 <__addsf3+0x1e>
     bb0:	56 c1       	rjmp	.+684    	; 0xe5e <__fp_nan>
     bb2:	0e f4       	brtc	.+2      	; 0xbb6 <__addsf3+0x1e>
     bb4:	e0 95       	com	r30
     bb6:	e7 fb       	bst	r30, 7
     bb8:	4c c1       	rjmp	.+664    	; 0xe52 <__fp_inf>

00000bba <__addsf3x>:
     bba:	e9 2f       	mov	r30, r25
     bbc:	72 d1       	rcall	.+740    	; 0xea2 <__fp_split3>
     bbe:	80 f3       	brcs	.-32     	; 0xba0 <__addsf3+0x8>
     bc0:	ba 17       	cp	r27, r26
     bc2:	62 07       	cpc	r22, r18
     bc4:	73 07       	cpc	r23, r19
     bc6:	84 07       	cpc	r24, r20
     bc8:	95 07       	cpc	r25, r21
     bca:	18 f0       	brcs	.+6      	; 0xbd2 <__addsf3x+0x18>
     bcc:	71 f4       	brne	.+28     	; 0xbea <__addsf3x+0x30>
     bce:	9e f5       	brtc	.+102    	; 0xc36 <__addsf3x+0x7c>
     bd0:	8a c1       	rjmp	.+788    	; 0xee6 <__fp_zero>
     bd2:	0e f4       	brtc	.+2      	; 0xbd6 <__addsf3x+0x1c>
     bd4:	e0 95       	com	r30
     bd6:	0b 2e       	mov	r0, r27
     bd8:	ba 2f       	mov	r27, r26
     bda:	a0 2d       	mov	r26, r0
     bdc:	0b 01       	movw	r0, r22
     bde:	b9 01       	movw	r22, r18
     be0:	90 01       	movw	r18, r0
     be2:	0c 01       	movw	r0, r24
     be4:	ca 01       	movw	r24, r20
     be6:	a0 01       	movw	r20, r0
     be8:	11 24       	eor	r1, r1
     bea:	ff 27       	eor	r31, r31
     bec:	59 1b       	sub	r21, r25
     bee:	99 f0       	breq	.+38     	; 0xc16 <__addsf3x+0x5c>
     bf0:	59 3f       	cpi	r21, 0xF9	; 249
     bf2:	50 f4       	brcc	.+20     	; 0xc08 <__addsf3x+0x4e>
     bf4:	50 3e       	cpi	r21, 0xE0	; 224
     bf6:	68 f1       	brcs	.+90     	; 0xc52 <__addsf3x+0x98>
     bf8:	1a 16       	cp	r1, r26
     bfa:	f0 40       	sbci	r31, 0x00	; 0
     bfc:	a2 2f       	mov	r26, r18
     bfe:	23 2f       	mov	r18, r19
     c00:	34 2f       	mov	r19, r20
     c02:	44 27       	eor	r20, r20
     c04:	58 5f       	subi	r21, 0xF8	; 248
     c06:	f3 cf       	rjmp	.-26     	; 0xbee <__addsf3x+0x34>
     c08:	46 95       	lsr	r20
     c0a:	37 95       	ror	r19
     c0c:	27 95       	ror	r18
     c0e:	a7 95       	ror	r26
     c10:	f0 40       	sbci	r31, 0x00	; 0
     c12:	53 95       	inc	r21
     c14:	c9 f7       	brne	.-14     	; 0xc08 <__addsf3x+0x4e>
     c16:	7e f4       	brtc	.+30     	; 0xc36 <__addsf3x+0x7c>
     c18:	1f 16       	cp	r1, r31
     c1a:	ba 0b       	sbc	r27, r26
     c1c:	62 0b       	sbc	r22, r18
     c1e:	73 0b       	sbc	r23, r19
     c20:	84 0b       	sbc	r24, r20
     c22:	ba f0       	brmi	.+46     	; 0xc52 <__addsf3x+0x98>
     c24:	91 50       	subi	r25, 0x01	; 1
     c26:	a1 f0       	breq	.+40     	; 0xc50 <__addsf3x+0x96>
     c28:	ff 0f       	add	r31, r31
     c2a:	bb 1f       	adc	r27, r27
     c2c:	66 1f       	adc	r22, r22
     c2e:	77 1f       	adc	r23, r23
     c30:	88 1f       	adc	r24, r24
     c32:	c2 f7       	brpl	.-16     	; 0xc24 <__addsf3x+0x6a>
     c34:	0e c0       	rjmp	.+28     	; 0xc52 <__addsf3x+0x98>
     c36:	ba 0f       	add	r27, r26
     c38:	62 1f       	adc	r22, r18
     c3a:	73 1f       	adc	r23, r19
     c3c:	84 1f       	adc	r24, r20
     c3e:	48 f4       	brcc	.+18     	; 0xc52 <__addsf3x+0x98>
     c40:	87 95       	ror	r24
     c42:	77 95       	ror	r23
     c44:	67 95       	ror	r22
     c46:	b7 95       	ror	r27
     c48:	f7 95       	ror	r31
     c4a:	9e 3f       	cpi	r25, 0xFE	; 254
     c4c:	08 f0       	brcs	.+2      	; 0xc50 <__addsf3x+0x96>
     c4e:	b3 cf       	rjmp	.-154    	; 0xbb6 <__addsf3+0x1e>
     c50:	93 95       	inc	r25
     c52:	88 0f       	add	r24, r24
     c54:	08 f0       	brcs	.+2      	; 0xc58 <__addsf3x+0x9e>
     c56:	99 27       	eor	r25, r25
     c58:	ee 0f       	add	r30, r30
     c5a:	97 95       	ror	r25
     c5c:	87 95       	ror	r24
     c5e:	08 95       	ret

00000c60 <__cmpsf2>:
     c60:	d4 d0       	rcall	.+424    	; 0xe0a <__fp_cmp>
     c62:	08 f4       	brcc	.+2      	; 0xc66 <__cmpsf2+0x6>
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	08 95       	ret

00000c68 <__divsf3>:
     c68:	0c d0       	rcall	.+24     	; 0xc82 <__divsf3x>
     c6a:	0a c1       	rjmp	.+532    	; 0xe80 <__fp_round>
     c6c:	02 d1       	rcall	.+516    	; 0xe72 <__fp_pscB>
     c6e:	40 f0       	brcs	.+16     	; 0xc80 <__divsf3+0x18>
     c70:	f9 d0       	rcall	.+498    	; 0xe64 <__fp_pscA>
     c72:	30 f0       	brcs	.+12     	; 0xc80 <__divsf3+0x18>
     c74:	21 f4       	brne	.+8      	; 0xc7e <__divsf3+0x16>
     c76:	5f 3f       	cpi	r21, 0xFF	; 255
     c78:	19 f0       	breq	.+6      	; 0xc80 <__divsf3+0x18>
     c7a:	eb c0       	rjmp	.+470    	; 0xe52 <__fp_inf>
     c7c:	51 11       	cpse	r21, r1
     c7e:	34 c1       	rjmp	.+616    	; 0xee8 <__fp_szero>
     c80:	ee c0       	rjmp	.+476    	; 0xe5e <__fp_nan>

00000c82 <__divsf3x>:
     c82:	0f d1       	rcall	.+542    	; 0xea2 <__fp_split3>
     c84:	98 f3       	brcs	.-26     	; 0xc6c <__divsf3+0x4>

00000c86 <__divsf3_pse>:
     c86:	99 23       	and	r25, r25
     c88:	c9 f3       	breq	.-14     	; 0xc7c <__divsf3+0x14>
     c8a:	55 23       	and	r21, r21
     c8c:	b1 f3       	breq	.-20     	; 0xc7a <__divsf3+0x12>
     c8e:	95 1b       	sub	r25, r21
     c90:	55 0b       	sbc	r21, r21
     c92:	bb 27       	eor	r27, r27
     c94:	aa 27       	eor	r26, r26
     c96:	62 17       	cp	r22, r18
     c98:	73 07       	cpc	r23, r19
     c9a:	84 07       	cpc	r24, r20
     c9c:	38 f0       	brcs	.+14     	; 0xcac <__divsf3_pse+0x26>
     c9e:	9f 5f       	subi	r25, 0xFF	; 255
     ca0:	5f 4f       	sbci	r21, 0xFF	; 255
     ca2:	22 0f       	add	r18, r18
     ca4:	33 1f       	adc	r19, r19
     ca6:	44 1f       	adc	r20, r20
     ca8:	aa 1f       	adc	r26, r26
     caa:	a9 f3       	breq	.-22     	; 0xc96 <__divsf3_pse+0x10>
     cac:	33 d0       	rcall	.+102    	; 0xd14 <__divsf3_pse+0x8e>
     cae:	0e 2e       	mov	r0, r30
     cb0:	3a f0       	brmi	.+14     	; 0xcc0 <__divsf3_pse+0x3a>
     cb2:	e0 e8       	ldi	r30, 0x80	; 128
     cb4:	30 d0       	rcall	.+96     	; 0xd16 <__divsf3_pse+0x90>
     cb6:	91 50       	subi	r25, 0x01	; 1
     cb8:	50 40       	sbci	r21, 0x00	; 0
     cba:	e6 95       	lsr	r30
     cbc:	00 1c       	adc	r0, r0
     cbe:	ca f7       	brpl	.-14     	; 0xcb2 <__divsf3_pse+0x2c>
     cc0:	29 d0       	rcall	.+82     	; 0xd14 <__divsf3_pse+0x8e>
     cc2:	fe 2f       	mov	r31, r30
     cc4:	27 d0       	rcall	.+78     	; 0xd14 <__divsf3_pse+0x8e>
     cc6:	66 0f       	add	r22, r22
     cc8:	77 1f       	adc	r23, r23
     cca:	88 1f       	adc	r24, r24
     ccc:	bb 1f       	adc	r27, r27
     cce:	26 17       	cp	r18, r22
     cd0:	37 07       	cpc	r19, r23
     cd2:	48 07       	cpc	r20, r24
     cd4:	ab 07       	cpc	r26, r27
     cd6:	b0 e8       	ldi	r27, 0x80	; 128
     cd8:	09 f0       	breq	.+2      	; 0xcdc <__divsf3_pse+0x56>
     cda:	bb 0b       	sbc	r27, r27
     cdc:	80 2d       	mov	r24, r0
     cde:	bf 01       	movw	r22, r30
     ce0:	ff 27       	eor	r31, r31
     ce2:	93 58       	subi	r25, 0x83	; 131
     ce4:	5f 4f       	sbci	r21, 0xFF	; 255
     ce6:	2a f0       	brmi	.+10     	; 0xcf2 <__divsf3_pse+0x6c>
     ce8:	9e 3f       	cpi	r25, 0xFE	; 254
     cea:	51 05       	cpc	r21, r1
     cec:	68 f0       	brcs	.+26     	; 0xd08 <__divsf3_pse+0x82>
     cee:	b1 c0       	rjmp	.+354    	; 0xe52 <__fp_inf>
     cf0:	fb c0       	rjmp	.+502    	; 0xee8 <__fp_szero>
     cf2:	5f 3f       	cpi	r21, 0xFF	; 255
     cf4:	ec f3       	brlt	.-6      	; 0xcf0 <__divsf3_pse+0x6a>
     cf6:	98 3e       	cpi	r25, 0xE8	; 232
     cf8:	dc f3       	brlt	.-10     	; 0xcf0 <__divsf3_pse+0x6a>
     cfa:	86 95       	lsr	r24
     cfc:	77 95       	ror	r23
     cfe:	67 95       	ror	r22
     d00:	b7 95       	ror	r27
     d02:	f7 95       	ror	r31
     d04:	9f 5f       	subi	r25, 0xFF	; 255
     d06:	c9 f7       	brne	.-14     	; 0xcfa <__divsf3_pse+0x74>
     d08:	88 0f       	add	r24, r24
     d0a:	91 1d       	adc	r25, r1
     d0c:	96 95       	lsr	r25
     d0e:	87 95       	ror	r24
     d10:	97 f9       	bld	r25, 7
     d12:	08 95       	ret
     d14:	e1 e0       	ldi	r30, 0x01	; 1
     d16:	66 0f       	add	r22, r22
     d18:	77 1f       	adc	r23, r23
     d1a:	88 1f       	adc	r24, r24
     d1c:	bb 1f       	adc	r27, r27
     d1e:	62 17       	cp	r22, r18
     d20:	73 07       	cpc	r23, r19
     d22:	84 07       	cpc	r24, r20
     d24:	ba 07       	cpc	r27, r26
     d26:	20 f0       	brcs	.+8      	; 0xd30 <__divsf3_pse+0xaa>
     d28:	62 1b       	sub	r22, r18
     d2a:	73 0b       	sbc	r23, r19
     d2c:	84 0b       	sbc	r24, r20
     d2e:	ba 0b       	sbc	r27, r26
     d30:	ee 1f       	adc	r30, r30
     d32:	88 f7       	brcc	.-30     	; 0xd16 <__divsf3_pse+0x90>
     d34:	e0 95       	com	r30
     d36:	08 95       	ret

00000d38 <__fixunssfsi>:
     d38:	bc d0       	rcall	.+376    	; 0xeb2 <__fp_splitA>
     d3a:	88 f0       	brcs	.+34     	; 0xd5e <__fixunssfsi+0x26>
     d3c:	9f 57       	subi	r25, 0x7F	; 127
     d3e:	90 f0       	brcs	.+36     	; 0xd64 <__fixunssfsi+0x2c>
     d40:	b9 2f       	mov	r27, r25
     d42:	99 27       	eor	r25, r25
     d44:	b7 51       	subi	r27, 0x17	; 23
     d46:	a0 f0       	brcs	.+40     	; 0xd70 <__fixunssfsi+0x38>
     d48:	d1 f0       	breq	.+52     	; 0xd7e <__fixunssfsi+0x46>
     d4a:	66 0f       	add	r22, r22
     d4c:	77 1f       	adc	r23, r23
     d4e:	88 1f       	adc	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	1a f0       	brmi	.+6      	; 0xd5a <__fixunssfsi+0x22>
     d54:	ba 95       	dec	r27
     d56:	c9 f7       	brne	.-14     	; 0xd4a <__fixunssfsi+0x12>
     d58:	12 c0       	rjmp	.+36     	; 0xd7e <__fixunssfsi+0x46>
     d5a:	b1 30       	cpi	r27, 0x01	; 1
     d5c:	81 f0       	breq	.+32     	; 0xd7e <__fixunssfsi+0x46>
     d5e:	c3 d0       	rcall	.+390    	; 0xee6 <__fp_zero>
     d60:	b1 e0       	ldi	r27, 0x01	; 1
     d62:	08 95       	ret
     d64:	c0 c0       	rjmp	.+384    	; 0xee6 <__fp_zero>
     d66:	67 2f       	mov	r22, r23
     d68:	78 2f       	mov	r23, r24
     d6a:	88 27       	eor	r24, r24
     d6c:	b8 5f       	subi	r27, 0xF8	; 248
     d6e:	39 f0       	breq	.+14     	; 0xd7e <__fixunssfsi+0x46>
     d70:	b9 3f       	cpi	r27, 0xF9	; 249
     d72:	cc f3       	brlt	.-14     	; 0xd66 <__fixunssfsi+0x2e>
     d74:	86 95       	lsr	r24
     d76:	77 95       	ror	r23
     d78:	67 95       	ror	r22
     d7a:	b3 95       	inc	r27
     d7c:	d9 f7       	brne	.-10     	; 0xd74 <__fixunssfsi+0x3c>
     d7e:	3e f4       	brtc	.+14     	; 0xd8e <__fixunssfsi+0x56>
     d80:	90 95       	com	r25
     d82:	80 95       	com	r24
     d84:	70 95       	com	r23
     d86:	61 95       	neg	r22
     d88:	7f 4f       	sbci	r23, 0xFF	; 255
     d8a:	8f 4f       	sbci	r24, 0xFF	; 255
     d8c:	9f 4f       	sbci	r25, 0xFF	; 255
     d8e:	08 95       	ret

00000d90 <__floatunsisf>:
     d90:	e8 94       	clt
     d92:	09 c0       	rjmp	.+18     	; 0xda6 <__floatsisf+0x12>

00000d94 <__floatsisf>:
     d94:	97 fb       	bst	r25, 7
     d96:	3e f4       	brtc	.+14     	; 0xda6 <__floatsisf+0x12>
     d98:	90 95       	com	r25
     d9a:	80 95       	com	r24
     d9c:	70 95       	com	r23
     d9e:	61 95       	neg	r22
     da0:	7f 4f       	sbci	r23, 0xFF	; 255
     da2:	8f 4f       	sbci	r24, 0xFF	; 255
     da4:	9f 4f       	sbci	r25, 0xFF	; 255
     da6:	99 23       	and	r25, r25
     da8:	a9 f0       	breq	.+42     	; 0xdd4 <__floatsisf+0x40>
     daa:	f9 2f       	mov	r31, r25
     dac:	96 e9       	ldi	r25, 0x96	; 150
     dae:	bb 27       	eor	r27, r27
     db0:	93 95       	inc	r25
     db2:	f6 95       	lsr	r31
     db4:	87 95       	ror	r24
     db6:	77 95       	ror	r23
     db8:	67 95       	ror	r22
     dba:	b7 95       	ror	r27
     dbc:	f1 11       	cpse	r31, r1
     dbe:	f8 cf       	rjmp	.-16     	; 0xdb0 <__floatsisf+0x1c>
     dc0:	fa f4       	brpl	.+62     	; 0xe00 <__floatsisf+0x6c>
     dc2:	bb 0f       	add	r27, r27
     dc4:	11 f4       	brne	.+4      	; 0xdca <__floatsisf+0x36>
     dc6:	60 ff       	sbrs	r22, 0
     dc8:	1b c0       	rjmp	.+54     	; 0xe00 <__floatsisf+0x6c>
     dca:	6f 5f       	subi	r22, 0xFF	; 255
     dcc:	7f 4f       	sbci	r23, 0xFF	; 255
     dce:	8f 4f       	sbci	r24, 0xFF	; 255
     dd0:	9f 4f       	sbci	r25, 0xFF	; 255
     dd2:	16 c0       	rjmp	.+44     	; 0xe00 <__floatsisf+0x6c>
     dd4:	88 23       	and	r24, r24
     dd6:	11 f0       	breq	.+4      	; 0xddc <__floatsisf+0x48>
     dd8:	96 e9       	ldi	r25, 0x96	; 150
     dda:	11 c0       	rjmp	.+34     	; 0xdfe <__floatsisf+0x6a>
     ddc:	77 23       	and	r23, r23
     dde:	21 f0       	breq	.+8      	; 0xde8 <__floatsisf+0x54>
     de0:	9e e8       	ldi	r25, 0x8E	; 142
     de2:	87 2f       	mov	r24, r23
     de4:	76 2f       	mov	r23, r22
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__floatsisf+0x5e>
     de8:	66 23       	and	r22, r22
     dea:	71 f0       	breq	.+28     	; 0xe08 <__floatsisf+0x74>
     dec:	96 e8       	ldi	r25, 0x86	; 134
     dee:	86 2f       	mov	r24, r22
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	2a f0       	brmi	.+10     	; 0xe00 <__floatsisf+0x6c>
     df6:	9a 95       	dec	r25
     df8:	66 0f       	add	r22, r22
     dfa:	77 1f       	adc	r23, r23
     dfc:	88 1f       	adc	r24, r24
     dfe:	da f7       	brpl	.-10     	; 0xdf6 <__floatsisf+0x62>
     e00:	88 0f       	add	r24, r24
     e02:	96 95       	lsr	r25
     e04:	87 95       	ror	r24
     e06:	97 f9       	bld	r25, 7
     e08:	08 95       	ret

00000e0a <__fp_cmp>:
     e0a:	99 0f       	add	r25, r25
     e0c:	00 08       	sbc	r0, r0
     e0e:	55 0f       	add	r21, r21
     e10:	aa 0b       	sbc	r26, r26
     e12:	e0 e8       	ldi	r30, 0x80	; 128
     e14:	fe ef       	ldi	r31, 0xFE	; 254
     e16:	16 16       	cp	r1, r22
     e18:	17 06       	cpc	r1, r23
     e1a:	e8 07       	cpc	r30, r24
     e1c:	f9 07       	cpc	r31, r25
     e1e:	c0 f0       	brcs	.+48     	; 0xe50 <__fp_cmp+0x46>
     e20:	12 16       	cp	r1, r18
     e22:	13 06       	cpc	r1, r19
     e24:	e4 07       	cpc	r30, r20
     e26:	f5 07       	cpc	r31, r21
     e28:	98 f0       	brcs	.+38     	; 0xe50 <__fp_cmp+0x46>
     e2a:	62 1b       	sub	r22, r18
     e2c:	73 0b       	sbc	r23, r19
     e2e:	84 0b       	sbc	r24, r20
     e30:	95 0b       	sbc	r25, r21
     e32:	39 f4       	brne	.+14     	; 0xe42 <__fp_cmp+0x38>
     e34:	0a 26       	eor	r0, r26
     e36:	61 f0       	breq	.+24     	; 0xe50 <__fp_cmp+0x46>
     e38:	23 2b       	or	r18, r19
     e3a:	24 2b       	or	r18, r20
     e3c:	25 2b       	or	r18, r21
     e3e:	21 f4       	brne	.+8      	; 0xe48 <__fp_cmp+0x3e>
     e40:	08 95       	ret
     e42:	0a 26       	eor	r0, r26
     e44:	09 f4       	brne	.+2      	; 0xe48 <__fp_cmp+0x3e>
     e46:	a1 40       	sbci	r26, 0x01	; 1
     e48:	a6 95       	lsr	r26
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	81 1d       	adc	r24, r1
     e4e:	81 1d       	adc	r24, r1
     e50:	08 95       	ret

00000e52 <__fp_inf>:
     e52:	97 f9       	bld	r25, 7
     e54:	9f 67       	ori	r25, 0x7F	; 127
     e56:	80 e8       	ldi	r24, 0x80	; 128
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	08 95       	ret

00000e5e <__fp_nan>:
     e5e:	9f ef       	ldi	r25, 0xFF	; 255
     e60:	80 ec       	ldi	r24, 0xC0	; 192
     e62:	08 95       	ret

00000e64 <__fp_pscA>:
     e64:	00 24       	eor	r0, r0
     e66:	0a 94       	dec	r0
     e68:	16 16       	cp	r1, r22
     e6a:	17 06       	cpc	r1, r23
     e6c:	18 06       	cpc	r1, r24
     e6e:	09 06       	cpc	r0, r25
     e70:	08 95       	ret

00000e72 <__fp_pscB>:
     e72:	00 24       	eor	r0, r0
     e74:	0a 94       	dec	r0
     e76:	12 16       	cp	r1, r18
     e78:	13 06       	cpc	r1, r19
     e7a:	14 06       	cpc	r1, r20
     e7c:	05 06       	cpc	r0, r21
     e7e:	08 95       	ret

00000e80 <__fp_round>:
     e80:	09 2e       	mov	r0, r25
     e82:	03 94       	inc	r0
     e84:	00 0c       	add	r0, r0
     e86:	11 f4       	brne	.+4      	; 0xe8c <__fp_round+0xc>
     e88:	88 23       	and	r24, r24
     e8a:	52 f0       	brmi	.+20     	; 0xea0 <__fp_round+0x20>
     e8c:	bb 0f       	add	r27, r27
     e8e:	40 f4       	brcc	.+16     	; 0xea0 <__fp_round+0x20>
     e90:	bf 2b       	or	r27, r31
     e92:	11 f4       	brne	.+4      	; 0xe98 <__fp_round+0x18>
     e94:	60 ff       	sbrs	r22, 0
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <__fp_round+0x20>
     e98:	6f 5f       	subi	r22, 0xFF	; 255
     e9a:	7f 4f       	sbci	r23, 0xFF	; 255
     e9c:	8f 4f       	sbci	r24, 0xFF	; 255
     e9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ea0:	08 95       	ret

00000ea2 <__fp_split3>:
     ea2:	57 fd       	sbrc	r21, 7
     ea4:	90 58       	subi	r25, 0x80	; 128
     ea6:	44 0f       	add	r20, r20
     ea8:	55 1f       	adc	r21, r21
     eaa:	59 f0       	breq	.+22     	; 0xec2 <__fp_splitA+0x10>
     eac:	5f 3f       	cpi	r21, 0xFF	; 255
     eae:	71 f0       	breq	.+28     	; 0xecc <__fp_splitA+0x1a>
     eb0:	47 95       	ror	r20

00000eb2 <__fp_splitA>:
     eb2:	88 0f       	add	r24, r24
     eb4:	97 fb       	bst	r25, 7
     eb6:	99 1f       	adc	r25, r25
     eb8:	61 f0       	breq	.+24     	; 0xed2 <__fp_splitA+0x20>
     eba:	9f 3f       	cpi	r25, 0xFF	; 255
     ebc:	79 f0       	breq	.+30     	; 0xedc <__fp_splitA+0x2a>
     ebe:	87 95       	ror	r24
     ec0:	08 95       	ret
     ec2:	12 16       	cp	r1, r18
     ec4:	13 06       	cpc	r1, r19
     ec6:	14 06       	cpc	r1, r20
     ec8:	55 1f       	adc	r21, r21
     eca:	f2 cf       	rjmp	.-28     	; 0xeb0 <__fp_split3+0xe>
     ecc:	46 95       	lsr	r20
     ece:	f1 df       	rcall	.-30     	; 0xeb2 <__fp_splitA>
     ed0:	08 c0       	rjmp	.+16     	; 0xee2 <__fp_splitA+0x30>
     ed2:	16 16       	cp	r1, r22
     ed4:	17 06       	cpc	r1, r23
     ed6:	18 06       	cpc	r1, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	f1 cf       	rjmp	.-30     	; 0xebe <__fp_splitA+0xc>
     edc:	86 95       	lsr	r24
     ede:	71 05       	cpc	r23, r1
     ee0:	61 05       	cpc	r22, r1
     ee2:	08 94       	sec
     ee4:	08 95       	ret

00000ee6 <__fp_zero>:
     ee6:	e8 94       	clt

00000ee8 <__fp_szero>:
     ee8:	bb 27       	eor	r27, r27
     eea:	66 27       	eor	r22, r22
     eec:	77 27       	eor	r23, r23
     eee:	cb 01       	movw	r24, r22
     ef0:	97 f9       	bld	r25, 7
     ef2:	08 95       	ret

00000ef4 <__gesf2>:
     ef4:	8a df       	rcall	.-236    	; 0xe0a <__fp_cmp>
     ef6:	08 f4       	brcc	.+2      	; 0xefa <__gesf2+0x6>
     ef8:	8f ef       	ldi	r24, 0xFF	; 255
     efa:	08 95       	ret

00000efc <__mulsf3>:
     efc:	0b d0       	rcall	.+22     	; 0xf14 <__mulsf3x>
     efe:	c0 cf       	rjmp	.-128    	; 0xe80 <__fp_round>
     f00:	b1 df       	rcall	.-158    	; 0xe64 <__fp_pscA>
     f02:	28 f0       	brcs	.+10     	; 0xf0e <__mulsf3+0x12>
     f04:	b6 df       	rcall	.-148    	; 0xe72 <__fp_pscB>
     f06:	18 f0       	brcs	.+6      	; 0xf0e <__mulsf3+0x12>
     f08:	95 23       	and	r25, r21
     f0a:	09 f0       	breq	.+2      	; 0xf0e <__mulsf3+0x12>
     f0c:	a2 cf       	rjmp	.-188    	; 0xe52 <__fp_inf>
     f0e:	a7 cf       	rjmp	.-178    	; 0xe5e <__fp_nan>
     f10:	11 24       	eor	r1, r1
     f12:	ea cf       	rjmp	.-44     	; 0xee8 <__fp_szero>

00000f14 <__mulsf3x>:
     f14:	c6 df       	rcall	.-116    	; 0xea2 <__fp_split3>
     f16:	a0 f3       	brcs	.-24     	; 0xf00 <__mulsf3+0x4>

00000f18 <__mulsf3_pse>:
     f18:	95 9f       	mul	r25, r21
     f1a:	d1 f3       	breq	.-12     	; 0xf10 <__mulsf3+0x14>
     f1c:	95 0f       	add	r25, r21
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	55 1f       	adc	r21, r21
     f22:	62 9f       	mul	r22, r18
     f24:	f0 01       	movw	r30, r0
     f26:	72 9f       	mul	r23, r18
     f28:	bb 27       	eor	r27, r27
     f2a:	f0 0d       	add	r31, r0
     f2c:	b1 1d       	adc	r27, r1
     f2e:	63 9f       	mul	r22, r19
     f30:	aa 27       	eor	r26, r26
     f32:	f0 0d       	add	r31, r0
     f34:	b1 1d       	adc	r27, r1
     f36:	aa 1f       	adc	r26, r26
     f38:	64 9f       	mul	r22, r20
     f3a:	66 27       	eor	r22, r22
     f3c:	b0 0d       	add	r27, r0
     f3e:	a1 1d       	adc	r26, r1
     f40:	66 1f       	adc	r22, r22
     f42:	82 9f       	mul	r24, r18
     f44:	22 27       	eor	r18, r18
     f46:	b0 0d       	add	r27, r0
     f48:	a1 1d       	adc	r26, r1
     f4a:	62 1f       	adc	r22, r18
     f4c:	73 9f       	mul	r23, r19
     f4e:	b0 0d       	add	r27, r0
     f50:	a1 1d       	adc	r26, r1
     f52:	62 1f       	adc	r22, r18
     f54:	83 9f       	mul	r24, r19
     f56:	a0 0d       	add	r26, r0
     f58:	61 1d       	adc	r22, r1
     f5a:	22 1f       	adc	r18, r18
     f5c:	74 9f       	mul	r23, r20
     f5e:	33 27       	eor	r19, r19
     f60:	a0 0d       	add	r26, r0
     f62:	61 1d       	adc	r22, r1
     f64:	23 1f       	adc	r18, r19
     f66:	84 9f       	mul	r24, r20
     f68:	60 0d       	add	r22, r0
     f6a:	21 1d       	adc	r18, r1
     f6c:	82 2f       	mov	r24, r18
     f6e:	76 2f       	mov	r23, r22
     f70:	6a 2f       	mov	r22, r26
     f72:	11 24       	eor	r1, r1
     f74:	9f 57       	subi	r25, 0x7F	; 127
     f76:	50 40       	sbci	r21, 0x00	; 0
     f78:	8a f0       	brmi	.+34     	; 0xf9c <__mulsf3_pse+0x84>
     f7a:	e1 f0       	breq	.+56     	; 0xfb4 <__mulsf3_pse+0x9c>
     f7c:	88 23       	and	r24, r24
     f7e:	4a f0       	brmi	.+18     	; 0xf92 <__mulsf3_pse+0x7a>
     f80:	ee 0f       	add	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	bb 1f       	adc	r27, r27
     f86:	66 1f       	adc	r22, r22
     f88:	77 1f       	adc	r23, r23
     f8a:	88 1f       	adc	r24, r24
     f8c:	91 50       	subi	r25, 0x01	; 1
     f8e:	50 40       	sbci	r21, 0x00	; 0
     f90:	a9 f7       	brne	.-22     	; 0xf7c <__mulsf3_pse+0x64>
     f92:	9e 3f       	cpi	r25, 0xFE	; 254
     f94:	51 05       	cpc	r21, r1
     f96:	70 f0       	brcs	.+28     	; 0xfb4 <__mulsf3_pse+0x9c>
     f98:	5c cf       	rjmp	.-328    	; 0xe52 <__fp_inf>
     f9a:	a6 cf       	rjmp	.-180    	; 0xee8 <__fp_szero>
     f9c:	5f 3f       	cpi	r21, 0xFF	; 255
     f9e:	ec f3       	brlt	.-6      	; 0xf9a <__mulsf3_pse+0x82>
     fa0:	98 3e       	cpi	r25, 0xE8	; 232
     fa2:	dc f3       	brlt	.-10     	; 0xf9a <__mulsf3_pse+0x82>
     fa4:	86 95       	lsr	r24
     fa6:	77 95       	ror	r23
     fa8:	67 95       	ror	r22
     faa:	b7 95       	ror	r27
     fac:	f7 95       	ror	r31
     fae:	e7 95       	ror	r30
     fb0:	9f 5f       	subi	r25, 0xFF	; 255
     fb2:	c1 f7       	brne	.-16     	; 0xfa4 <__mulsf3_pse+0x8c>
     fb4:	fe 2b       	or	r31, r30
     fb6:	88 0f       	add	r24, r24
     fb8:	91 1d       	adc	r25, r1
     fba:	96 95       	lsr	r25
     fbc:	87 95       	ror	r24
     fbe:	97 f9       	bld	r25, 7
     fc0:	08 95       	ret

00000fc2 <__udivmodsi4>:
     fc2:	a1 e2       	ldi	r26, 0x21	; 33
     fc4:	1a 2e       	mov	r1, r26
     fc6:	aa 1b       	sub	r26, r26
     fc8:	bb 1b       	sub	r27, r27
     fca:	fd 01       	movw	r30, r26
     fcc:	0d c0       	rjmp	.+26     	; 0xfe8 <__udivmodsi4_ep>

00000fce <__udivmodsi4_loop>:
     fce:	aa 1f       	adc	r26, r26
     fd0:	bb 1f       	adc	r27, r27
     fd2:	ee 1f       	adc	r30, r30
     fd4:	ff 1f       	adc	r31, r31
     fd6:	a2 17       	cp	r26, r18
     fd8:	b3 07       	cpc	r27, r19
     fda:	e4 07       	cpc	r30, r20
     fdc:	f5 07       	cpc	r31, r21
     fde:	20 f0       	brcs	.+8      	; 0xfe8 <__udivmodsi4_ep>
     fe0:	a2 1b       	sub	r26, r18
     fe2:	b3 0b       	sbc	r27, r19
     fe4:	e4 0b       	sbc	r30, r20
     fe6:	f5 0b       	sbc	r31, r21

00000fe8 <__udivmodsi4_ep>:
     fe8:	66 1f       	adc	r22, r22
     fea:	77 1f       	adc	r23, r23
     fec:	88 1f       	adc	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	1a 94       	dec	r1
     ff2:	69 f7       	brne	.-38     	; 0xfce <__udivmodsi4_loop>
     ff4:	60 95       	com	r22
     ff6:	70 95       	com	r23
     ff8:	80 95       	com	r24
     ffa:	90 95       	com	r25
     ffc:	9b 01       	movw	r18, r22
     ffe:	ac 01       	movw	r20, r24
    1000:	bd 01       	movw	r22, r26
    1002:	cf 01       	movw	r24, r30
    1004:	08 95       	ret

00001006 <__tablejump2__>:
    1006:	ee 0f       	add	r30, r30
    1008:	ff 1f       	adc	r31, r31
    100a:	88 1f       	adc	r24, r24
    100c:	8b bf       	out	0x3b, r24	; 59
    100e:	07 90       	elpm	r0, Z+
    1010:	f6 91       	elpm	r31, Z
    1012:	e0 2d       	mov	r30, r0
    1014:	19 94       	eijmp

00001016 <__itoa_ncheck>:
    1016:	bb 27       	eor	r27, r27
    1018:	4a 30       	cpi	r20, 0x0A	; 10
    101a:	31 f4       	brne	.+12     	; 0x1028 <__itoa_ncheck+0x12>
    101c:	99 23       	and	r25, r25
    101e:	22 f4       	brpl	.+8      	; 0x1028 <__itoa_ncheck+0x12>
    1020:	bd e2       	ldi	r27, 0x2D	; 45
    1022:	90 95       	com	r25
    1024:	81 95       	neg	r24
    1026:	9f 4f       	sbci	r25, 0xFF	; 255
    1028:	01 c0       	rjmp	.+2      	; 0x102c <__utoa_common>

0000102a <__utoa_ncheck>:
    102a:	bb 27       	eor	r27, r27

0000102c <__utoa_common>:
    102c:	fb 01       	movw	r30, r22
    102e:	55 27       	eor	r21, r21
    1030:	aa 27       	eor	r26, r26
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	aa 1f       	adc	r26, r26
    1038:	a4 17       	cp	r26, r20
    103a:	10 f0       	brcs	.+4      	; 0x1040 <__utoa_common+0x14>
    103c:	a4 1b       	sub	r26, r20
    103e:	83 95       	inc	r24
    1040:	50 51       	subi	r21, 0x10	; 16
    1042:	b9 f7       	brne	.-18     	; 0x1032 <__utoa_common+0x6>
    1044:	a0 5d       	subi	r26, 0xD0	; 208
    1046:	aa 33       	cpi	r26, 0x3A	; 58
    1048:	08 f0       	brcs	.+2      	; 0x104c <__utoa_common+0x20>
    104a:	a9 5d       	subi	r26, 0xD9	; 217
    104c:	a1 93       	st	Z+, r26
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	79 f7       	brne	.-34     	; 0x1030 <__utoa_common+0x4>
    1052:	b1 11       	cpse	r27, r1
    1054:	b1 93       	st	Z+, r27
    1056:	11 92       	st	Z+, r1
    1058:	cb 01       	movw	r24, r22
    105a:	00 c0       	rjmp	.+0      	; 0x105c <strrev>

0000105c <strrev>:
    105c:	dc 01       	movw	r26, r24
    105e:	fc 01       	movw	r30, r24
    1060:	67 2f       	mov	r22, r23
    1062:	71 91       	ld	r23, Z+
    1064:	77 23       	and	r23, r23
    1066:	e1 f7       	brne	.-8      	; 0x1060 <strrev+0x4>
    1068:	32 97       	sbiw	r30, 0x02	; 2
    106a:	04 c0       	rjmp	.+8      	; 0x1074 <strrev+0x18>
    106c:	7c 91       	ld	r23, X
    106e:	6d 93       	st	X+, r22
    1070:	70 83       	st	Z, r23
    1072:	62 91       	ld	r22, -Z
    1074:	ae 17       	cp	r26, r30
    1076:	bf 07       	cpc	r27, r31
    1078:	c8 f3       	brcs	.-14     	; 0x106c <strrev+0x10>
    107a:	08 95       	ret

0000107c <_exit>:
    107c:	f8 94       	cli

0000107e <__stop_program>:
    107e:	ff cf       	rjmp	.-2      	; 0x107e <__stop_program>
