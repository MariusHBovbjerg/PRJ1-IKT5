
PRJ1-IKT5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000fdc  00001070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fdc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800202  00800202  00001072  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001072  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000232a  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc9  00000000  00000000  0000356e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e3a  00000000  00000000  00004537  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  00005374  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008fe  00000000  00000000  00005668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d8d  00000000  00000000  00005f66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00006cf3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
   2:	00 00       	nop
   4:	9b c0       	rjmp	.+310    	; 0x13c <__bad_interrupt>
   6:	00 00       	nop
   8:	99 c0       	rjmp	.+306    	; 0x13c <__bad_interrupt>
   a:	00 00       	nop
   c:	97 c0       	rjmp	.+302    	; 0x13c <__bad_interrupt>
   e:	00 00       	nop
  10:	95 c0       	rjmp	.+298    	; 0x13c <__bad_interrupt>
  12:	00 00       	nop
  14:	f5 c0       	rjmp	.+490    	; 0x200 <__vector_5>
  16:	00 00       	nop
  18:	3c c1       	rjmp	.+632    	; 0x292 <__vector_6>
  1a:	00 00       	nop
  1c:	8f c0       	rjmp	.+286    	; 0x13c <__bad_interrupt>
  1e:	00 00       	nop
  20:	8d c0       	rjmp	.+282    	; 0x13c <__bad_interrupt>
  22:	00 00       	nop
  24:	8b c0       	rjmp	.+278    	; 0x13c <__bad_interrupt>
  26:	00 00       	nop
  28:	89 c0       	rjmp	.+274    	; 0x13c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	87 c0       	rjmp	.+270    	; 0x13c <__bad_interrupt>
  2e:	00 00       	nop
  30:	85 c0       	rjmp	.+266    	; 0x13c <__bad_interrupt>
  32:	00 00       	nop
  34:	83 c0       	rjmp	.+262    	; 0x13c <__bad_interrupt>
  36:	00 00       	nop
  38:	81 c0       	rjmp	.+258    	; 0x13c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7f c0       	rjmp	.+254    	; 0x13c <__bad_interrupt>
  3e:	00 00       	nop
  40:	7d c0       	rjmp	.+250    	; 0x13c <__bad_interrupt>
  42:	00 00       	nop
  44:	6f c1       	rjmp	.+734    	; 0x324 <__vector_17>
  46:	00 00       	nop
  48:	79 c0       	rjmp	.+242    	; 0x13c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	77 c0       	rjmp	.+238    	; 0x13c <__bad_interrupt>
  4e:	00 00       	nop
  50:	75 c0       	rjmp	.+234    	; 0x13c <__bad_interrupt>
  52:	00 00       	nop
  54:	73 c0       	rjmp	.+230    	; 0x13c <__bad_interrupt>
  56:	00 00       	nop
  58:	71 c0       	rjmp	.+226    	; 0x13c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6f c0       	rjmp	.+222    	; 0x13c <__bad_interrupt>
  5e:	00 00       	nop
  60:	6d c0       	rjmp	.+218    	; 0x13c <__bad_interrupt>
  62:	00 00       	nop
  64:	6b c0       	rjmp	.+214    	; 0x13c <__bad_interrupt>
  66:	00 00       	nop
  68:	69 c0       	rjmp	.+210    	; 0x13c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	67 c0       	rjmp	.+206    	; 0x13c <__bad_interrupt>
  6e:	00 00       	nop
  70:	65 c0       	rjmp	.+202    	; 0x13c <__bad_interrupt>
  72:	00 00       	nop
  74:	63 c0       	rjmp	.+198    	; 0x13c <__bad_interrupt>
  76:	00 00       	nop
  78:	61 c0       	rjmp	.+194    	; 0x13c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	5f c0       	rjmp	.+190    	; 0x13c <__bad_interrupt>
  7e:	00 00       	nop
  80:	7b c1       	rjmp	.+758    	; 0x378 <__vector_32>
  82:	00 00       	nop
  84:	5b c0       	rjmp	.+182    	; 0x13c <__bad_interrupt>
  86:	00 00       	nop
  88:	59 c0       	rjmp	.+178    	; 0x13c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	57 c0       	rjmp	.+174    	; 0x13c <__bad_interrupt>
  8e:	00 00       	nop
  90:	55 c0       	rjmp	.+170    	; 0x13c <__bad_interrupt>
  92:	00 00       	nop
  94:	53 c0       	rjmp	.+166    	; 0x13c <__bad_interrupt>
  96:	00 00       	nop
  98:	51 c0       	rjmp	.+162    	; 0x13c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	4f c0       	rjmp	.+158    	; 0x13c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	4d c0       	rjmp	.+154    	; 0x13c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	4b c0       	rjmp	.+150    	; 0x13c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	49 c0       	rjmp	.+146    	; 0x13c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	47 c0       	rjmp	.+142    	; 0x13c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	45 c0       	rjmp	.+138    	; 0x13c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	43 c0       	rjmp	.+134    	; 0x13c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	41 c0       	rjmp	.+130    	; 0x13c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	3f c0       	rjmp	.+126    	; 0x13c <__bad_interrupt>
  be:	00 00       	nop
  c0:	3d c0       	rjmp	.+122    	; 0x13c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	3b c0       	rjmp	.+118    	; 0x13c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	39 c0       	rjmp	.+114    	; 0x13c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	37 c0       	rjmp	.+110    	; 0x13c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	35 c0       	rjmp	.+106    	; 0x13c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	33 c0       	rjmp	.+102    	; 0x13c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	31 c0       	rjmp	.+98     	; 0x13c <__bad_interrupt>
  da:	00 00       	nop
  dc:	2f c0       	rjmp	.+94     	; 0x13c <__bad_interrupt>
  de:	00 00       	nop
  e0:	2d c0       	rjmp	.+90     	; 0x13c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	3e 02       	muls	r19, r30
  e6:	6c 02       	muls	r22, r28
  e8:	95 02       	muls	r25, r21
  ea:	c0 02       	muls	r28, r16
  ec:	eb 02       	muls	r30, r27
  ee:	16 03       	mulsu	r17, r22
  f0:	42 03       	mulsu	r20, r18
  f2:	77 03       	mulsu	r23, r23
  f4:	a1 03       	fmuls	r18, r17
  f6:	ab 03       	fmulsu	r18, r19
  f8:	e3 03       	fmuls	r22, r19
  fa:	11 04       	cpc	r1, r1
  fc:	55 04       	cpc	r5, r5

000000fe <__ctors_end>:
  fe:	11 24       	eor	r1, r1
 100:	1f be       	out	0x3f, r1	; 63
 102:	cf ef       	ldi	r28, 0xFF	; 255
 104:	d1 e2       	ldi	r29, 0x21	; 33
 106:	de bf       	out	0x3e, r29	; 62
 108:	cd bf       	out	0x3d, r28	; 61
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	ec ed       	ldi	r30, 0xDC	; 220
 116:	ff e0       	ldi	r31, 0x0F	; 15
 118:	00 e0       	ldi	r16, 0x00	; 0
 11a:	0b bf       	out	0x3b, r16	; 59
 11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
 11e:	07 90       	elpm	r0, Z+
 120:	0d 92       	st	X+, r0
 122:	a2 30       	cpi	r26, 0x02	; 2
 124:	b1 07       	cpc	r27, r17
 126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
 128:	22 e0       	ldi	r18, 0x02	; 2
 12a:	a2 e0       	ldi	r26, 0x02	; 2
 12c:	b2 e0       	ldi	r27, 0x02	; 2
 12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
 130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
 132:	a6 30       	cpi	r26, 0x06	; 6
 134:	b2 07       	cpc	r27, r18
 136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
 138:	46 d1       	rcall	.+652    	; 0x3c6 <main>
 13a:	4e c7       	rjmp	.+3740   	; 0xfd8 <_exit>

0000013c <__bad_interrupt>:
 13c:	61 cf       	rjmp	.-318    	; 0x0 <__vectors>

0000013e <_Z10bLightInitv>:
#include "BLightDriver.h"
#include <stdio.h>
#include <avr/io.h>

void bLightInit(void){
	DDRC = 0xFF;
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	87 b9       	out	0x07, r24	; 7
	TCCR3A = (0<<COM3A1)|(1<<COM3A0)|(0<<WGM31)|(1<<WGM30); // Set compare mode for OCR1A
 142:	81 e4       	ldi	r24, 0x41	; 65
 144:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = (0<<WGM33)|(0<<WGM32)|(1<<CS32)|(0<<CS31)|(0<<CS30); // Set Mode 1, PWM Phase correct 8-bit & 256 prescaler
 148:	84 e0       	ldi	r24, 0x04	; 4
 14a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	TIMSK3 = 0b00000010;
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
	OCR3A = 0;
 154:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 158:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
 15c:	08 95       	ret

0000015e <_Z12bLightTogglev>:
}

void bLightToggle(void){
	
	PINC |= 0b00000101; // ben 35 og 37
 15e:	86 b1       	in	r24, 0x06	; 6
 160:	85 60       	ori	r24, 0x05	; 5
 162:	86 b9       	out	0x06, r24	; 6
 164:	08 95       	ret

00000166 <_Z14bLightStrengthi>:

void bLightStrength(int Brightness){

	int dutyCycle = 0;
	
	if (Brightness > 254) {
 166:	8f 3f       	cpi	r24, 0xFF	; 255
 168:	91 05       	cpc	r25, r1
 16a:	24 f4       	brge	.+8      	; 0x174 <_Z14bLightStrengthi+0xe>
		dutyCycle = 254;
	}
	else if (Brightness <= 0) {
 16c:	18 16       	cp	r1, r24
 16e:	19 06       	cpc	r1, r25
 170:	34 f0       	brlt	.+12     	; 0x17e <_Z14bLightStrengthi+0x18>
 172:	03 c0       	rjmp	.+6      	; 0x17a <_Z14bLightStrengthi+0x14>
void bLightStrength(int Brightness){

	int dutyCycle = 0;
	
	if (Brightness > 254) {
		dutyCycle = 254;
 174:	8e ef       	ldi	r24, 0xFE	; 254
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <_Z14bLightStrengthi+0x18>
	}
	else if (Brightness <= 0) {
		dutyCycle = 1;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
	}
	else {
		dutyCycle = Brightness;
	}

	OCR3A = dutyCycle;
 17e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 182:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
 186:	08 95       	ret

00000188 <_Z11initCounterv>:
#include "Sensor.h"
#include <avr/interrupt.h>


void initCounter(){
	EIMSK = 0b00110000; // INT 4 & INT 5 active - BEN 2 & 3.
 188:	80 e3       	ldi	r24, 0x30	; 48
 18a:	8d bb       	out	0x1d, r24	; 29
	EICRB = 0b00001111; // INT 4 & INT 5 rising edge.
 18c:	8f e0       	ldi	r24, 0x0F	; 15
 18e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
 192:	08 95       	ret

00000194 <_Z8fLightOnv>:
void fLightInit(void){
	DDRG = 0xFF; 
}

void fLightOn(void){
	PORTG = 0b00000101; //ben 39 og 41
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	84 bb       	out	0x14, r24	; 20
 198:	08 95       	ret

0000019a <_Z9fLightOffv>:
}
void fLightOff(void){
	PORTG = 0b00000000;
 19a:	14 ba       	out	0x14, r1	; 20
 19c:	08 95       	ret

0000019e <_Z11SendCharnulc>:
	UBRR0L = ((F_CPU/(16*BAUD))-1);
}

void SendCharnul(char Tegn)
{
	while(!(UCSR0A & (1<<UDRE0))){
 19e:	e0 ec       	ldi	r30, 0xC0	; 192
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	90 81       	ld	r25, Z
 1a4:	95 ff       	sbrs	r25, 5
 1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <_Z11SendCharnulc+0x4>
		
	}
	UDR0 = Tegn;
 1a8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 1ac:	08 95       	ret

000001ae <_Z10SendStringPc>:
}

void SendString(char* Streng)
{
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24
	while(*Streng != '\0'){
 1b4:	88 81       	ld	r24, Y
 1b6:	88 23       	and	r24, r24
 1b8:	29 f0       	breq	.+10     	; 0x1c4 <_Z10SendStringPc+0x16>
 1ba:	21 96       	adiw	r28, 0x01	; 1
		SendCharnul(*Streng);
 1bc:	f0 df       	rcall	.-32     	; 0x19e <_Z11SendCharnulc>
	UDR0 = Tegn;
}

void SendString(char* Streng)
{
	while(*Streng != '\0'){
 1be:	89 91       	ld	r24, Y+
 1c0:	81 11       	cpse	r24, r1
 1c2:	fc cf       	rjmp	.-8      	; 0x1bc <_Z10SendStringPc+0xe>
		SendCharnul(*Streng);
		Streng++;
	}
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <_Z11SendIntegeri>:

void SendInteger(int Tal)
{
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	6e 97       	sbiw	r28, 0x1e	; 30
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	de bf       	out	0x3e, r29	; 62
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1de:	4a e0       	ldi	r20, 0x0A	; 10
 1e0:	be 01       	movw	r22, r28
 1e2:	6f 5f       	subi	r22, 0xFF	; 255
 1e4:	7f 4f       	sbci	r23, 0xFF	; 255
 1e6:	c5 d6       	rcall	.+3466   	; 0xf72 <__itoa_ncheck>
	char intStr[30];
	itoa(Tal, intStr, 10);
	SendString(intStr);
 1e8:	ce 01       	movw	r24, r28
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	e0 df       	rcall	.-64     	; 0x1ae <_Z10SendStringPc>
}
 1ee:	6e 96       	adiw	r28, 0x1e	; 30
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	cd bf       	out	0x3d, r28	; 61
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <__vector_5>:


ISR(INT4_vect){ //On rising edge, count + 1
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	2f 93       	push	r18
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
	if(counter == 3){
 210:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
 214:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
 218:	03 97       	sbiw	r24, 0x03	; 3
 21a:	d1 f4       	brne	.+52     	; 0x250 <__vector_5+0x50>
		
		newCount = true;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		counter++;
 222:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
 226:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
 230:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
		EIMSK = 0b00000000;
 234:	1d ba       	out	0x1d, r1	; 29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	2f ef       	ldi	r18, 0xFF	; 255
 238:	89 e6       	ldi	r24, 0x69	; 105
 23a:	98 e1       	ldi	r25, 0x18	; 24
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <__vector_5+0x3c>
 244:	00 c0       	rjmp	.+0      	; 0x246 <__vector_5+0x46>
 246:	00 00       	nop
		_delay_ms(500);
		EIFR = 0b00110000;
 248:	80 e3       	ldi	r24, 0x30	; 48
 24a:	8c bb       	out	0x1c, r24	; 28
		EIMSK = 0b00110000;
 24c:	8d bb       	out	0x1d, r24	; 29
 24e:	19 c0       	rjmp	.+50     	; 0x282 <__vector_5+0x82>
	}
	else {
		newCount = true;
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		counter++;
 256:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
 25a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
 25e:	01 96       	adiw	r24, 0x01	; 1
 260:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
 264:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
		EIMSK = 0b00000000;
 268:	1d ba       	out	0x1d, r1	; 29
 26a:	2f ef       	ldi	r18, 0xFF	; 255
 26c:	85 ea       	ldi	r24, 0xA5	; 165
 26e:	9e e0       	ldi	r25, 0x0E	; 14
 270:	21 50       	subi	r18, 0x01	; 1
 272:	80 40       	sbci	r24, 0x00	; 0
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <__vector_5+0x70>
 278:	00 c0       	rjmp	.+0      	; 0x27a <__vector_5+0x7a>
 27a:	00 00       	nop
		_delay_ms(300);
		EIFR = 0b00110000;
 27c:	80 e3       	ldi	r24, 0x30	; 48
 27e:	8c bb       	out	0x1c, r24	; 28
		EIMSK = 0b00110000;
 280:	8d bb       	out	0x1d, r24	; 29
	}
}
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	2f 91       	pop	r18
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <__vector_6>:
ISR(INT5_vect){
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	2f 93       	push	r18
 29e:	8f 93       	push	r24
 2a0:	9f 93       	push	r25
	if(counter == 3){
 2a2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
 2a6:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
 2aa:	03 97       	sbiw	r24, 0x03	; 3
 2ac:	d1 f4       	brne	.+52     	; 0x2e2 <__vector_6+0x50>
		
		newCount = true;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		counter++;
 2b4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
 2b8:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
 2c2:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
		EIMSK = 0b00000000;
 2c6:	1d ba       	out	0x1d, r1	; 29
 2c8:	2f ef       	ldi	r18, 0xFF	; 255
 2ca:	89 e6       	ldi	r24, 0x69	; 105
 2cc:	98 e1       	ldi	r25, 0x18	; 24
 2ce:	21 50       	subi	r18, 0x01	; 1
 2d0:	80 40       	sbci	r24, 0x00	; 0
 2d2:	90 40       	sbci	r25, 0x00	; 0
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <__vector_6+0x3c>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <__vector_6+0x46>
 2d8:	00 00       	nop
		_delay_ms(500);
		EIFR = 0b00110000;
 2da:	80 e3       	ldi	r24, 0x30	; 48
 2dc:	8c bb       	out	0x1c, r24	; 28
		EIMSK = 0b00110000;
 2de:	8d bb       	out	0x1d, r24	; 29
 2e0:	19 c0       	rjmp	.+50     	; 0x314 <__vector_6+0x82>
	}
	else {
		newCount = true;
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		counter++;
 2e8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
 2ec:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
 2f6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
		EIMSK = 0b00000000;
 2fa:	1d ba       	out	0x1d, r1	; 29
 2fc:	2f ef       	ldi	r18, 0xFF	; 255
 2fe:	85 ea       	ldi	r24, 0xA5	; 165
 300:	9e e0       	ldi	r25, 0x0E	; 14
 302:	21 50       	subi	r18, 0x01	; 1
 304:	80 40       	sbci	r24, 0x00	; 0
 306:	90 40       	sbci	r25, 0x00	; 0
 308:	e1 f7       	brne	.-8      	; 0x302 <__vector_6+0x70>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <__vector_6+0x7a>
 30c:	00 00       	nop
		_delay_ms(300);
		EIFR = 0b00110000;
 30e:	80 e3       	ldi	r24, 0x30	; 48
 310:	8c bb       	out	0x1c, r24	; 28
		EIMSK = 0b00110000;
 312:	8d bb       	out	0x1d, r24	; 29
	}
}
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	2f 91       	pop	r18
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <__vector_17>:


ISR(TIMER1_COMPA_vect){
 324:	1f 92       	push	r1
 326:	0f 92       	push	r0
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	0f 92       	push	r0
 32c:	11 24       	eor	r1, r1
 32e:	8f 93       	push	r24
 330:	9f 93       	push	r25
	                                                                                                                                          
	switch(MotorMode){
 332:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 336:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	91 05       	cpc	r25, r1
 33e:	31 f0       	breq	.+12     	; 0x34c <__vector_17+0x28>
 340:	18 f0       	brcs	.+6      	; 0x348 <__vector_17+0x24>
 342:	02 97       	sbiw	r24, 0x02	; 2
 344:	59 f0       	breq	.+22     	; 0x35c <__vector_17+0x38>
 346:	11 c0       	rjmp	.+34     	; 0x36a <__vector_17+0x46>
		case 0:
			PORTA = 0b00000000;
 348:	12 b8       	out	0x02, r1	; 2
		break;
 34a:	0f c0       	rjmp	.+30     	; 0x36a <__vector_17+0x46>
		case 1:
			if(PINA == 0b00000001){
 34c:	80 b1       	in	r24, 0x00	; 0
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	11 f4       	brne	.+4      	; 0x356 <__vector_17+0x32>
				PORTA = 0b00000000;
 352:	12 b8       	out	0x02, r1	; 2
 354:	0a c0       	rjmp	.+20     	; 0x36a <__vector_17+0x46>
			}else{
				PORTA = 0b00000001;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	82 b9       	out	0x02, r24	; 2
 35a:	07 c0       	rjmp	.+14     	; 0x36a <__vector_17+0x46>
			}
		break;
		case 2:
			if(PINA == 0b00000010){
 35c:	80 b1       	in	r24, 0x00	; 0
 35e:	82 30       	cpi	r24, 0x02	; 2
 360:	11 f4       	brne	.+4      	; 0x366 <__vector_17+0x42>
				PORTA = 0b00000000;
 362:	12 b8       	out	0x02, r1	; 2
 364:	02 c0       	rjmp	.+4      	; 0x36a <__vector_17+0x46>
				}else{
				PORTA = 0b00000010;
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	82 b9       	out	0x02, r24	; 2
			}
		break;
			
	}
	
}
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <__vector_32>:

ISR(TIMER3_COMPA_vect){
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1
 382:	0b b6       	in	r0, 0x3b	; 59
 384:	0f 92       	push	r0
 386:	2f 93       	push	r18
 388:	3f 93       	push	r19
 38a:	4f 93       	push	r20
 38c:	5f 93       	push	r21
 38e:	6f 93       	push	r22
 390:	7f 93       	push	r23
 392:	8f 93       	push	r24
 394:	9f 93       	push	r25
 396:	af 93       	push	r26
 398:	bf 93       	push	r27
 39a:	ef 93       	push	r30
 39c:	ff 93       	push	r31
	
	bLightToggle();
 39e:	df de       	rcall	.-578    	; 0x15e <_Z12bLightTogglev>
}
 3a0:	ff 91       	pop	r31
 3a2:	ef 91       	pop	r30
 3a4:	bf 91       	pop	r27
 3a6:	af 91       	pop	r26
 3a8:	9f 91       	pop	r25
 3aa:	8f 91       	pop	r24
 3ac:	7f 91       	pop	r23
 3ae:	6f 91       	pop	r22
 3b0:	5f 91       	pop	r21
 3b2:	4f 91       	pop	r20
 3b4:	3f 91       	pop	r19
 3b6:	2f 91       	pop	r18
 3b8:	0f 90       	pop	r0
 3ba:	0b be       	out	0x3b, r0	; 59
 3bc:	0f 90       	pop	r0
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	0f 90       	pop	r0
 3c2:	1f 90       	pop	r1
 3c4:	18 95       	reti

000003c6 <main>:


int main(void)
{
	sei();
 3c6:	78 94       	sei
	initCounter();
 3c8:	df de       	rcall	.-578    	; 0x188 <_Z11initCounterv>
	initMotor();
 3ca:	9f d2       	rcall	.+1342   	; 0x90a <_Z9initMotorv>
 3cc:	20 e0       	ldi	r18, 0x00	; 0
	InitUART(9600, 8, 0);
 3ce:	48 e0       	ldi	r20, 0x08	; 8
 3d0:	60 e8       	ldi	r22, 0x80	; 128
 3d2:	75 e2       	ldi	r23, 0x25	; 37
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	fa d2       	rcall	.+1524   	; 0x9ce <_Z8InitUARTmhb>
 3da:	88 e1       	ldi	r24, 0x18	; 24
volatile unsigned int MotorMode = 0;

void InitUARTnul(unsigned long BAUD)
{
	
	UCSR0B = 0b00011000;
 3dc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 3e0:	86 e0       	ldi	r24, 0x06	; 6
	
	UCSR0C = 0b00000110;
 3e2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 3e6:	87 e6       	ldi	r24, 0x67	; 103
	
	UBRR0L = ((F_CPU/(16*BAUD))-1);
 3e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	sei();
	initCounter();
	initMotor();
	InitUART(9600, 8, 0);
	InitUARTnul(9600);
	bLightInit();
 3ec:	a8 de       	rcall	.-688    	; 0x13e <_Z10bLightInitv>
 3ee:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
	TCNT3 = 0;
 3f2:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	bLightStrength(15);
 3f6:	8f e0       	ldi	r24, 0x0F	; 15
 3f8:	90 e0       	ldi	r25, 0x00	; 0
	volumeUp();
 3fa:	b5 de       	rcall	.-662    	; 0x166 <_Z14bLightStrengthi>
 3fc:	69 d3       	rcall	.+1746   	; 0xad0 <_Z8volumeUpv>
	volumeUp();
 3fe:	68 d3       	rcall	.+1744   	; 0xad0 <_Z8volumeUpv>
 400:	67 d3       	rcall	.+1742   	; 0xad0 <_Z8volumeUpv>
	volumeUp();
 402:	66 d3       	rcall	.+1740   	; 0xad0 <_Z8volumeUpv>
 404:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <counter+0x1>
	volumeUp();
 408:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <counter>
	counter = 0;
 40c:	12 b8       	out	0x02, r1	; 2
 40e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
	PORTA = 0b00000000;
 412:	c4 e9       	ldi	r28, 0x94	; 148
	TIMSK3 = 0b00000000;
 414:	d0 e0       	ldi	r29, 0x00	; 0
 416:	0f 2e       	mov	r0, r31
				
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
				_delay_ms(1000);
				TCNT3 = 0;
 418:	f1 e7       	ldi	r31, 0x71	; 113
 41a:	af 2e       	mov	r10, r31
				bLightStrength(254);
				MotorMode = 0;
				_delay_ms(500);
				fLightOff();
				stopSOMO();
				TIMSK3 = 0b00000000;
 41c:	b1 2c       	mov	r11, r1
 41e:	f0 2d       	mov	r31, r0
 420:	ee 24       	eor	r14, r14
 422:	e3 94       	inc	r14
 424:	f1 2c       	mov	r15, r1
				bLightStrength(254);
				_delay_ms(500);
				TCNT3 = 0;
				bLightStrength(15);
				_delay_ms(1500);
				MotorMode = 1;
 426:	04 e8       	ldi	r16, 0x84	; 132
 428:	10 e0       	ldi	r17, 0x00	; 0
 42a:	0f 2e       	mov	r0, r31
				TCNT1 = 0;
 42c:	fc e0       	ldi	r31, 0x0C	; 12
 42e:	8f 2e       	mov	r8, r31
				setSpeed(99.0);
				counter = 12;
 430:	91 2c       	mov	r9, r1
 432:	f0 2d       	mov	r31, r0
 434:	0f 2e       	mov	r0, r31
 436:	fb e0       	ldi	r31, 0x0B	; 11
 438:	6f 2e       	mov	r6, r31
				newCount = false;
				MotorMode = 1;
				TCNT1 = 0;
				setSpeed(99.0);
				_delay_ms(500);
				counter = 11;
 43a:	71 2c       	mov	r7, r1
 43c:	f0 2d       	mov	r31, r0
 43e:	0f 2e       	mov	r0, r31
 440:	fa e0       	ldi	r31, 0x0A	; 10
 442:	4f 2e       	mov	r4, r31
				bLightStrength(254);
				MotorMode = 1;
				_delay_ms(10);
				TCNT1 = 0;
				setSpeed(99.0);
				counter = 10;
 444:	51 2c       	mov	r5, r1
 446:	f0 2d       	mov	r31, r0
 448:	68 94       	set
 44a:	22 24       	eor	r2, r2
 44c:	23 f8       	bld	r2, 3
				_delay_ms(10);
				newCount = false;
				TCNT1 = 0;
				setSpeed(99.0);
				_delay_ms(150);
				counter = 8;
 44e:	31 2c       	mov	r3, r1
 450:	68 94       	set
 452:	cc 24       	eor	r12, r12
				stopSOMO();
				playNext();
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
				MotorMode = 2;
 454:	c1 f8       	bld	r12, 1
 456:	d1 2c       	mov	r13, r1
 458:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
	counter = 0;
	PORTA = 0b00000000;
	TIMSK3 = 0b00000000;
	while(1){
		
		SendInteger(counter);		
 45c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
 460:	b4 de       	rcall	.-664    	; 0x1ca <_Z11SendIntegeri>
 462:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <counter>
 466:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <counter+0x1>
		switch(counter){
 46a:	31 97       	sbiw	r30, 0x01	; 1
 46c:	ed 30       	cpi	r30, 0x0D	; 13
 46e:	f1 05       	cpc	r31, r1
 470:	98 f7       	brcc	.-26     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 472:	88 27       	eor	r24, r24
 474:	ee 58       	subi	r30, 0x8E	; 142
 476:	ff 4f       	sbci	r31, 0xFF	; 255
 478:	8f 4f       	sbci	r24, 0xFF	; 255
 47a:	73 c5       	rjmp	.+2790   	; 0xf62 <__tablejump2__>
 47c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 480:	88 23       	and	r24, r24
			case 1:   // Start manuelt med brik
			if(newCount){
 482:	29 f1       	breq	.+74     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 484:	82 e0       	ldi	r24, 0x02	; 2
 486:	f5 01       	movw	r30, r10
				TIMSK3 = 0b00000010;
 488:	80 83       	st	Z, r24
 48a:	19 82       	std	Y+1, r1	; 0x01
				TCNT3 = 0;
 48c:	18 82       	st	Y, r1
 48e:	8f e0       	ldi	r24, 0x0F	; 15
				bLightStrength(15);
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	69 de       	rcall	.-814    	; 0x166 <_Z14bLightStrengthi>
 494:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				newCount = false;
 498:	f9 d2       	rcall	.+1522   	; 0xa8c <_Z8playNextv>
 49a:	7c de       	rcall	.-776    	; 0x194 <_Z8fLightOnv>
				playNext();
 49c:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <__data_end+0x1>
				//playStartSound(); //Mario Intro
				fLightOn();
 4a0:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <__data_end>
				MotorMode = 1;
 4a4:	ff ef       	ldi	r31, 0xFF	; 255
 4a6:	2d e3       	ldi	r18, 0x3D	; 61
 4a8:	89 e4       	ldi	r24, 0x49	; 73
 4aa:	f1 50       	subi	r31, 0x01	; 1
 4ac:	20 40       	sbci	r18, 0x00	; 0
 4ae:	80 40       	sbci	r24, 0x00	; 0
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4b4:	00 00       	nop
 4b6:	f8 01       	movw	r30, r16
 4b8:	11 82       	std	Z+1, r1	; 0x01
 4ba:	10 82       	st	Z, r1
				_delay_ms(1500); //Delay for at spille intro 10 sek
				TCNT1 = 0;
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	86 ec       	ldi	r24, 0xC6	; 198
				setSpeed(99.0);
 4c2:	92 e4       	ldi	r25, 0x42	; 66
 4c4:	38 d2       	rcall	.+1136   	; 0x936 <_Z8setSpeedf>
 4c6:	f0 92 05 02 	sts	0x0205, r15	; 0x800205 <counter+0x1>
 4ca:	e0 92 04 02 	sts	0x0204, r14	; 0x800204 <counter>
				counter = 1;
 4ce:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <__data_end+0x1>
 4d2:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <__data_end>
			}
			
			MotorMode = 1;
 4d6:	c0 cf       	rjmp	.-128    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 4d8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
			break;
			
			case 2:  // 1. brik
			if(newCount){
 4dc:	88 23       	and	r24, r24
 4de:	09 f4       	brne	.+2      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4e0:	bb cf       	rjmp	.-138    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 4e2:	19 82       	std	Y+1, r1	; 0x01
 4e4:	18 82       	st	Y, r1
				TCNT3 = 0;
 4e6:	8f e0       	ldi	r24, 0x0F	; 15
 4e8:	90 e0       	ldi	r25, 0x00	; 0
				bLightStrength(15);
 4ea:	3d de       	rcall	.-902    	; 0x166 <_Z14bLightStrengthi>
 4ec:	cf d2       	rcall	.+1438   	; 0xa8c <_Z8playNextv>
 4ee:	8f e3       	ldi	r24, 0x3F	; 63
 4f0:	9c e9       	ldi	r25, 0x9C	; 156
				//stopSOMO();
				playNext();
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4f8:	00 00       	nop
 4fa:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
 4fe:	f8 01       	movw	r30, r16
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
 500:	11 82       	std	Z+1, r1	; 0x01
 502:	10 82       	st	Z, r1
				TCNT1 = 0;
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	86 ec       	ldi	r24, 0xC6	; 198
				setSpeed(99.0);
 50a:	92 e4       	ldi	r25, 0x42	; 66
 50c:	14 d2       	rcall	.+1064   	; 0x936 <_Z8setSpeedf>
 50e:	ff ef       	ldi	r31, 0xFF	; 255
 510:	22 e5       	ldi	r18, 0x52	; 82
 512:	87 e0       	ldi	r24, 0x07	; 7
 514:	f1 50       	subi	r31, 0x01	; 1
 516:	20 40       	sbci	r18, 0x00	; 0
 518:	80 40       	sbci	r24, 0x00	; 0
 51a:	e1 f7       	brne	.-8      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 51e:	00 00       	nop
 520:	d0 92 05 02 	sts	0x0205, r13	; 0x800205 <counter+0x1>
				_delay_ms(150);
				counter = 2;
 524:	c0 92 04 02 	sts	0x0204, r12	; 0x800204 <counter>
 528:	97 cf       	rjmp	.-210    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 52a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
			}
			
			break;
			
			case 3:   // 2. brik
			if(newCount){
 52e:	88 23       	and	r24, r24
 530:	09 f4       	brne	.+2      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 532:	92 cf       	rjmp	.-220    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 534:	19 82       	std	Y+1, r1	; 0x01
 536:	18 82       	st	Y, r1
				TCNT3 = 0;
 538:	8f e0       	ldi	r24, 0x0F	; 15
 53a:	90 e0       	ldi	r25, 0x00	; 0
				bLightStrength(15);
 53c:	14 de       	rcall	.-984    	; 0x166 <_Z14bLightStrengthi>
 53e:	a6 d2       	rcall	.+1356   	; 0xa8c <_Z8playNextv>
 540:	ef e3       	ldi	r30, 0x3F	; 63
				playNext();
 542:	fc e9       	ldi	r31, 0x9C	; 156
 544:	31 97       	sbiw	r30, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 548:	00 c0       	rjmp	.+0      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 54a:	00 00       	nop
 54c:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
 550:	f8 01       	movw	r30, r16
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
 552:	11 82       	std	Z+1, r1	; 0x01
 554:	10 82       	st	Z, r1
				TCNT1 = 0;
 556:	60 e0       	ldi	r22, 0x00	; 0
 558:	70 e0       	ldi	r23, 0x00	; 0
 55a:	86 ec       	ldi	r24, 0xC6	; 198
				setSpeed(99.0);
 55c:	92 e4       	ldi	r25, 0x42	; 66
 55e:	eb d1       	rcall	.+982    	; 0x936 <_Z8setSpeedf>
 560:	ff ef       	ldi	r31, 0xFF	; 255
 562:	22 e5       	ldi	r18, 0x52	; 82
 564:	87 e0       	ldi	r24, 0x07	; 7
 566:	f1 50       	subi	r31, 0x01	; 1
 568:	20 40       	sbci	r18, 0x00	; 0
 56a:	80 40       	sbci	r24, 0x00	; 0
 56c:	e1 f7       	brne	.-8      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
 570:	00 00       	nop
 572:	83 e0       	ldi	r24, 0x03	; 3
 574:	90 e0       	ldi	r25, 0x00	; 0
				_delay_ms(150);
				counter = 3;
 576:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
 57a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
 57e:	6c cf       	rjmp	.-296    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 580:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
		
			
			break;
			
			case 4:   // 3. brik på bakken
			if(newCount){
 584:	88 23       	and	r24, r24
 586:	09 f4       	brne	.+2      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 588:	67 cf       	rjmp	.-306    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 58a:	19 82       	std	Y+1, r1	; 0x01
 58c:	18 82       	st	Y, r1
				TCNT3 = 0;
 58e:	8f e0       	ldi	r24, 0x0F	; 15
				bLightStrength(15);
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	e9 dd       	rcall	.-1070   	; 0x166 <_Z14bLightStrengthi>
 594:	7b d2       	rcall	.+1270   	; 0xa8c <_Z8playNextv>
 596:	ef e3       	ldi	r30, 0x3F	; 63
				_delay_ms(10);
				newCount = false;
				TCNT1 = 0;
				setSpeed(80.0);
				_delay_ms(150);*/
				playNext();
 598:	fc e9       	ldi	r31, 0x9C	; 156
 59a:	31 97       	sbiw	r30, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 5a0:	00 00       	nop
 5a2:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
 5a6:	f8 01       	movw	r30, r16
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
 5a8:	11 82       	std	Z+1, r1	; 0x01
 5aa:	10 82       	st	Z, r1
				TCNT1 = 0;
 5ac:	60 e0       	ldi	r22, 0x00	; 0
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	86 ec       	ldi	r24, 0xC6	; 198
				setSpeed(99.0);
 5b2:	92 e4       	ldi	r25, 0x42	; 66
 5b4:	c0 d1       	rcall	.+896    	; 0x936 <_Z8setSpeedf>
 5b6:	ff ef       	ldi	r31, 0xFF	; 255
 5b8:	22 e5       	ldi	r18, 0x52	; 82
 5ba:	87 e0       	ldi	r24, 0x07	; 7
 5bc:	f1 50       	subi	r31, 0x01	; 1
 5be:	20 40       	sbci	r18, 0x00	; 0
 5c0:	80 40       	sbci	r24, 0x00	; 0
 5c2:	e1 f7       	brne	.-8      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 5c6:	00 00       	nop
 5c8:	e4 e0       	ldi	r30, 0x04	; 4
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
				_delay_ms(150);
				counter = 4;
 5cc:	f0 93 05 02 	sts	0x0205, r31	; 0x800205 <counter+0x1>
 5d0:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <counter>
 5d4:	41 cf       	rjmp	.-382    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 5d6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
			}
			break;
			
			case 5:  // 4. brik
			if(newCount){
 5da:	88 23       	and	r24, r24
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 5de:	3c cf       	rjmp	.-392    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 5e0:	19 82       	std	Y+1, r1	; 0x01
				TCNT3 = 0;
 5e2:	18 82       	st	Y, r1
 5e4:	8f e0       	ldi	r24, 0x0F	; 15
				bLightStrength(15);
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	be dd       	rcall	.-1156   	; 0x166 <_Z14bLightStrengthi>
 5ea:	50 d2       	rcall	.+1184   	; 0xa8c <_Z8playNextv>
 5ec:	8f e3       	ldi	r24, 0x3F	; 63
				//stopSOMO();
				playNext();
 5ee:	9c e9       	ldi	r25, 0x9C	; 156
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5f6:	00 00       	nop
 5f8:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
 5fc:	f8 01       	movw	r30, r16
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
 5fe:	11 82       	std	Z+1, r1	; 0x01
 600:	10 82       	st	Z, r1
				TCNT1 = 0;
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	86 ec       	ldi	r24, 0xC6	; 198
				setSpeed(99.0);
 608:	92 e4       	ldi	r25, 0x42	; 66
 60a:	95 d1       	rcall	.+810    	; 0x936 <_Z8setSpeedf>
 60c:	ff ef       	ldi	r31, 0xFF	; 255
 60e:	22 e5       	ldi	r18, 0x52	; 82
 610:	87 e0       	ldi	r24, 0x07	; 7
 612:	f1 50       	subi	r31, 0x01	; 1
 614:	20 40       	sbci	r18, 0x00	; 0
 616:	80 40       	sbci	r24, 0x00	; 0
 618:	e1 f7       	brne	.-8      	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 61c:	00 00       	nop
 61e:	e5 e0       	ldi	r30, 0x05	; 5
 620:	f0 e0       	ldi	r31, 0x00	; 0
				_delay_ms(150);
				counter = 5;
 622:	f0 93 05 02 	sts	0x0205, r31	; 0x800205 <counter+0x1>
 626:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <counter>
 62a:	16 cf       	rjmp	.-468    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 62c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
			}
			
			break;
			
			case 6:  // 5. brik
			if(newCount){
 630:	88 23       	and	r24, r24
 632:	09 f4       	brne	.+2      	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 634:	11 cf       	rjmp	.-478    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 636:	19 82       	std	Y+1, r1	; 0x01
				TCNT3 = 0;
 638:	18 82       	st	Y, r1
 63a:	8f e0       	ldi	r24, 0x0F	; 15
				bLightStrength(15);
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	93 dd       	rcall	.-1242   	; 0x166 <_Z14bLightStrengthi>
 640:	36 d2       	rcall	.+1132   	; 0xaae <_Z8stopSOMOv>
 642:	24 d2       	rcall	.+1096   	; 0xa8c <_Z8playNextv>
				stopSOMO();
 644:	8f e3       	ldi	r24, 0x3F	; 63
 646:	9c e9       	ldi	r25, 0x9C	; 156
				playNext();
 648:	01 97       	sbiw	r24, 0x01	; 1
 64a:	f1 f7       	brne	.-4      	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 64c:	00 c0       	rjmp	.+0      	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
 64e:	00 00       	nop
 650:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
 654:	f8 01       	movw	r30, r16
 656:	11 82       	std	Z+1, r1	; 0x01
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
 658:	10 82       	st	Z, r1
				TCNT1 = 0;
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	70 e0       	ldi	r23, 0x00	; 0
				setSpeed(90);
 65e:	84 eb       	ldi	r24, 0xB4	; 180
 660:	92 e4       	ldi	r25, 0x42	; 66
 662:	69 d1       	rcall	.+722    	; 0x936 <_Z8setSpeedf>
 664:	ff ef       	ldi	r31, 0xFF	; 255
 666:	22 e5       	ldi	r18, 0x52	; 82
 668:	87 e0       	ldi	r24, 0x07	; 7
 66a:	f1 50       	subi	r31, 0x01	; 1
 66c:	20 40       	sbci	r18, 0x00	; 0
 66e:	80 40       	sbci	r24, 0x00	; 0
 670:	e1 f7       	brne	.-8      	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 672:	00 c0       	rjmp	.+0      	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
 674:	00 00       	nop
 676:	e6 e0       	ldi	r30, 0x06	; 6
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	f0 93 05 02 	sts	0x0205, r31	; 0x800205 <counter+0x1>
				_delay_ms(150);
				counter = 6;
 67e:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <counter>
 682:	ea ce       	rjmp	.-556    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 684:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
			}
			
			break;
			
			case 7: // stop ved 6. brik
			if(newCount){
 688:	88 23       	and	r24, r24
 68a:	09 f4       	brne	.+2      	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 68c:	e5 ce       	rjmp	.-566    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 68e:	0f d2       	rcall	.+1054   	; 0xaae <_Z8stopSOMOv>
				stopSOMO();
 690:	fd d1       	rcall	.+1018   	; 0xa8c <_Z8playNextv>
 692:	8f e3       	ldi	r24, 0x3F	; 63
				playNext();
 694:	9c e9       	ldi	r25, 0x9C	; 156
 696:	01 97       	sbiw	r24, 0x01	; 1
 698:	f1 f7       	brne	.-4      	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
 69a:	00 c0       	rjmp	.+0      	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
 69c:	00 00       	nop
 69e:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
 6a2:	d0 92 03 02 	sts	0x0203, r13	; 0x800203 <__data_end+0x1>
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
 6a6:	c0 92 02 02 	sts	0x0202, r12	; 0x800202 <__data_end>
				MotorMode = 2;
 6aa:	f8 01       	movw	r30, r16
 6ac:	11 82       	std	Z+1, r1	; 0x01
				TCNT1 = 0;
 6ae:	10 82       	st	Z, r1
 6b0:	60 e0       	ldi	r22, 0x00	; 0
 6b2:	70 e0       	ldi	r23, 0x00	; 0
				setSpeed(99.0);
 6b4:	86 ec       	ldi	r24, 0xC6	; 198
 6b6:	92 e4       	ldi	r25, 0x42	; 66
 6b8:	3e d1       	rcall	.+636    	; 0x936 <_Z8setSpeedf>
 6ba:	19 82       	std	Y+1, r1	; 0x01
 6bc:	18 82       	st	Y, r1
 6be:	8e ef       	ldi	r24, 0xFE	; 254
				TCNT3 = 0;
 6c0:	90 e0       	ldi	r25, 0x00	; 0
				bLightStrength(254);
 6c2:	51 dd       	rcall	.-1374   	; 0x166 <_Z14bLightStrengthi>
 6c4:	87 e0       	ldi	r24, 0x07	; 7
				counter = 7;
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
 6cc:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
 6d0:	9f ef       	ldi	r25, 0xFF	; 255
 6d2:	e9 e6       	ldi	r30, 0x69	; 105
 6d4:	f8 e1       	ldi	r31, 0x18	; 24
 6d6:	91 50       	subi	r25, 0x01	; 1
 6d8:	e0 40       	sbci	r30, 0x00	; 0
 6da:	f0 40       	sbci	r31, 0x00	; 0
 6dc:	e1 f7       	brne	.-8      	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
 6de:	00 c0       	rjmp	.+0      	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
 6e0:	00 00       	nop
				_delay_ms(500);
				TCNT3 = 0;
 6e2:	19 82       	std	Y+1, r1	; 0x01
 6e4:	18 82       	st	Y, r1
				bLightStrength(15);
 6e6:	8f e0       	ldi	r24, 0x0F	; 15
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	3d dd       	rcall	.-1414   	; 0x166 <_Z14bLightStrengthi>
 6ec:	b5 ce       	rjmp	.-662    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 6ee:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
			}
			
			break;
			
			case 8: // tilbage forbi 6. brik
			if(newCount){
 6f2:	88 23       	and	r24, r24
 6f4:	09 f4       	brne	.+2      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 6f6:	b0 ce       	rjmp	.-672    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 6f8:	19 82       	std	Y+1, r1	; 0x01
				TCNT3 = 0;
 6fa:	18 82       	st	Y, r1
 6fc:	8f e0       	ldi	r24, 0x0F	; 15
				bLightStrength(15);
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	32 dd       	rcall	.-1436   	; 0x166 <_Z14bLightStrengthi>
 702:	d5 d1       	rcall	.+938    	; 0xaae <_Z8stopSOMOv>
 704:	c3 d1       	rcall	.+902    	; 0xa8c <_Z8playNextv>
				stopSOMO();
 706:	8f e3       	ldi	r24, 0x3F	; 63
 708:	9c e9       	ldi	r25, 0x9C	; 156
				playNext();
 70a:	01 97       	sbiw	r24, 0x01	; 1
 70c:	f1 f7       	brne	.-4      	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
 70e:	00 c0       	rjmp	.+0      	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
 710:	00 00       	nop
 712:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
 716:	f8 01       	movw	r30, r16
 718:	11 82       	std	Z+1, r1	; 0x01
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
 71a:	10 82       	st	Z, r1
				TCNT1 = 0;
 71c:	60 e0       	ldi	r22, 0x00	; 0
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	86 ec       	ldi	r24, 0xC6	; 198
				setSpeed(99.0);
 722:	92 e4       	ldi	r25, 0x42	; 66
 724:	08 d1       	rcall	.+528    	; 0x936 <_Z8setSpeedf>
 726:	ff ef       	ldi	r31, 0xFF	; 255
 728:	22 e5       	ldi	r18, 0x52	; 82
 72a:	87 e0       	ldi	r24, 0x07	; 7
 72c:	f1 50       	subi	r31, 0x01	; 1
 72e:	20 40       	sbci	r18, 0x00	; 0
 730:	80 40       	sbci	r24, 0x00	; 0
 732:	e1 f7       	brne	.-8      	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
 734:	00 c0       	rjmp	.+0      	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
 736:	00 00       	nop
 738:	30 92 05 02 	sts	0x0205, r3	; 0x800205 <counter+0x1>
 73c:	20 92 04 02 	sts	0x0204, r2	; 0x800204 <counter>
				_delay_ms(150);
				counter = 8;
 740:	8b ce       	rjmp	.-746    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 742:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
 746:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
				//newCount = false;
				//
				//TCNT1 = 0;
				//setSpeed(99);
			//}
			counter++;
 74a:	01 96       	adiw	r24, 0x01	; 1
 74c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
 750:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
 754:	81 ce       	rjmp	.-766    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 756:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
			break;
			
			case 10: //Stop ved 5. brik igen
			if(newCount){
 75a:	88 23       	and	r24, r24
 75c:	09 f4       	brne	.+2      	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
 75e:	7c ce       	rjmp	.-776    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 760:	95 d1       	rcall	.+810    	; 0xa8c <_Z8playNextv>
 762:	ef e3       	ldi	r30, 0x3F	; 63
				//stopSOMO();
				playNext();
 764:	fc e9       	ldi	r31, 0x9C	; 156
 766:	31 97       	sbiw	r30, 0x01	; 1
 768:	f1 f7       	brne	.-4      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 76a:	00 c0       	rjmp	.+0      	; 0x76c <__LOCK_REGION_LENGTH__+0x36c>
 76c:	00 00       	nop
 76e:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
 772:	19 82       	std	Y+1, r1	; 0x01
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
 774:	18 82       	st	Y, r1
				TCNT3 = 0;
 776:	8e ef       	ldi	r24, 0xFE	; 254
 778:	90 e0       	ldi	r25, 0x00	; 0
				bLightStrength(254);
 77a:	f5 dc       	rcall	.-1558   	; 0x166 <_Z14bLightStrengthi>
 77c:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <__data_end+0x1>
 780:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <__data_end>
				MotorMode = 1;
 784:	8f e3       	ldi	r24, 0x3F	; 63
 786:	9c e9       	ldi	r25, 0x9C	; 156
 788:	01 97       	sbiw	r24, 0x01	; 1
 78a:	f1 f7       	brne	.-4      	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
 78c:	00 c0       	rjmp	.+0      	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
 78e:	00 00       	nop
				_delay_ms(10);
				TCNT1 = 0;
 790:	f8 01       	movw	r30, r16
 792:	11 82       	std	Z+1, r1	; 0x01
 794:	10 82       	st	Z, r1
				setSpeed(99.0);
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	70 e0       	ldi	r23, 0x00	; 0
 79a:	86 ec       	ldi	r24, 0xC6	; 198
 79c:	92 e4       	ldi	r25, 0x42	; 66
 79e:	cb d0       	rcall	.+406    	; 0x936 <_Z8setSpeedf>
 7a0:	50 92 05 02 	sts	0x0205, r5	; 0x800205 <counter+0x1>
				counter = 10;
 7a4:	40 92 04 02 	sts	0x0204, r4	; 0x800204 <counter>
 7a8:	ff ef       	ldi	r31, 0xFF	; 255
 7aa:	29 e6       	ldi	r18, 0x69	; 105
 7ac:	88 e1       	ldi	r24, 0x18	; 24
 7ae:	f1 50       	subi	r31, 0x01	; 1
 7b0:	20 40       	sbci	r18, 0x00	; 0
 7b2:	80 40       	sbci	r24, 0x00	; 0
 7b4:	e1 f7       	brne	.-8      	; 0x7ae <__LOCK_REGION_LENGTH__+0x3ae>
 7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <__LOCK_REGION_LENGTH__+0x3b8>
 7b8:	00 00       	nop
				_delay_ms(500);
				TCNT3 = 0;
 7ba:	19 82       	std	Y+1, r1	; 0x01
 7bc:	18 82       	st	Y, r1
				bLightStrength(15);
 7be:	8f e0       	ldi	r24, 0x0F	; 15
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	d1 dc       	rcall	.-1630   	; 0x166 <_Z14bLightStrengthi>
 7c4:	49 ce       	rjmp	.-878    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 7c6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
		
			}
			break;
			
			case 11: // 5. brik igen
			if(newCount){
 7ca:	88 23       	and	r24, r24
 7cc:	09 f4       	brne	.+2      	; 0x7d0 <__LOCK_REGION_LENGTH__+0x3d0>
 7ce:	44 ce       	rjmp	.-888    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 7d0:	19 82       	std	Y+1, r1	; 0x01
				TCNT3 = 0;
 7d2:	18 82       	st	Y, r1
 7d4:	8f e0       	ldi	r24, 0x0F	; 15
				bLightStrength(15);
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	c6 dc       	rcall	.-1652   	; 0x166 <_Z14bLightStrengthi>
				stopSOMO();
 7da:	69 d1       	rcall	.+722    	; 0xaae <_Z8stopSOMOv>
 7dc:	57 d1       	rcall	.+686    	; 0xa8c <_Z8playNextv>
				playNext();
 7de:	ef e3       	ldi	r30, 0x3F	; 63
 7e0:	fc e9       	ldi	r31, 0x9C	; 156
 7e2:	31 97       	sbiw	r30, 0x01	; 1
 7e4:	f1 f7       	brne	.-4      	; 0x7e2 <__LOCK_REGION_LENGTH__+0x3e2>
 7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <__LOCK_REGION_LENGTH__+0x3e8>
 7e8:	00 00       	nop
 7ea:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
 7ee:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <__data_end+0x1>
				MotorMode = 1;
 7f2:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <__data_end>
 7f6:	f8 01       	movw	r30, r16
				TCNT1 = 0;
 7f8:	11 82       	std	Z+1, r1	; 0x01
 7fa:	10 82       	st	Z, r1
				setSpeed(99.0);
 7fc:	60 e0       	ldi	r22, 0x00	; 0
 7fe:	70 e0       	ldi	r23, 0x00	; 0
 800:	86 ec       	ldi	r24, 0xC6	; 198
 802:	92 e4       	ldi	r25, 0x42	; 66
 804:	98 d0       	rcall	.+304    	; 0x936 <_Z8setSpeedf>
 806:	ff ef       	ldi	r31, 0xFF	; 255
 808:	29 e6       	ldi	r18, 0x69	; 105
 80a:	88 e1       	ldi	r24, 0x18	; 24
 80c:	f1 50       	subi	r31, 0x01	; 1
 80e:	20 40       	sbci	r18, 0x00	; 0
 810:	80 40       	sbci	r24, 0x00	; 0
 812:	e1 f7       	brne	.-8      	; 0x80c <__LOCK_REGION_LENGTH__+0x40c>
 814:	00 c0       	rjmp	.+0      	; 0x816 <__LOCK_REGION_LENGTH__+0x416>
 816:	00 00       	nop
				_delay_ms(500);
				counter = 11;
 818:	70 92 05 02 	sts	0x0205, r7	; 0x800205 <counter+0x1>
 81c:	60 92 04 02 	sts	0x0204, r6	; 0x800204 <counter>
 820:	1b ce       	rjmp	.-970    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			}
			break;
			
			case 12: // 6. brik igen 
			if(newCount){
 822:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 826:	88 23       	and	r24, r24
 828:	09 f4       	brne	.+2      	; 0x82c <__LOCK_REGION_LENGTH__+0x42c>
 82a:	16 ce       	rjmp	.-980    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
				stopSOMO();
 82c:	40 d1       	rcall	.+640    	; 0xaae <_Z8stopSOMOv>
 82e:	2e d1       	rcall	.+604    	; 0xa8c <_Z8playNextv>
				playNext();
 830:	ef e3       	ldi	r30, 0x3F	; 63
 832:	fc e9       	ldi	r31, 0x9C	; 156
 834:	31 97       	sbiw	r30, 0x01	; 1
 836:	f1 f7       	brne	.-4      	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
 838:	00 c0       	rjmp	.+0      	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
 83a:	00 00       	nop
 83c:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
 840:	60 e0       	ldi	r22, 0x00	; 0
				setSpeed(0);
 842:	70 e0       	ldi	r23, 0x00	; 0
 844:	cb 01       	movw	r24, r22
 846:	77 d0       	rcall	.+238    	; 0x936 <_Z8setSpeedf>
 848:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__data_end+0x1>
				MotorMode = 0;
 84c:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
 850:	19 82       	std	Y+1, r1	; 0x01
				TCNT3 = 0;
 852:	18 82       	st	Y, r1
 854:	8e ef       	ldi	r24, 0xFE	; 254
				bLightStrength(254);
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	86 dc       	rcall	.-1780   	; 0x166 <_Z14bLightStrengthi>
 85a:	ff ef       	ldi	r31, 0xFF	; 255
 85c:	29 e6       	ldi	r18, 0x69	; 105
 85e:	88 e1       	ldi	r24, 0x18	; 24
 860:	f1 50       	subi	r31, 0x01	; 1
 862:	20 40       	sbci	r18, 0x00	; 0
 864:	80 40       	sbci	r24, 0x00	; 0
 866:	e1 f7       	brne	.-8      	; 0x860 <__LOCK_REGION_LENGTH__+0x460>
 868:	00 c0       	rjmp	.+0      	; 0x86a <__LOCK_REGION_LENGTH__+0x46a>
 86a:	00 00       	nop
 86c:	19 82       	std	Y+1, r1	; 0x01
 86e:	18 82       	st	Y, r1
				_delay_ms(500);
				TCNT3 = 0;
 870:	8f e0       	ldi	r24, 0x0F	; 15
 872:	90 e0       	ldi	r25, 0x00	; 0
				bLightStrength(15);
 874:	78 dc       	rcall	.-1808   	; 0x166 <_Z14bLightStrengthi>
 876:	9f ef       	ldi	r25, 0xFF	; 255
 878:	ed e3       	ldi	r30, 0x3D	; 61
 87a:	f9 e4       	ldi	r31, 0x49	; 73
 87c:	91 50       	subi	r25, 0x01	; 1
 87e:	e0 40       	sbci	r30, 0x00	; 0
 880:	f0 40       	sbci	r31, 0x00	; 0
 882:	e1 f7       	brne	.-8      	; 0x87c <__LOCK_REGION_LENGTH__+0x47c>
 884:	00 c0       	rjmp	.+0      	; 0x886 <__LOCK_REGION_LENGTH__+0x486>
 886:	00 00       	nop
 888:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <__data_end+0x1>
				_delay_ms(1500);
				MotorMode = 1;
 88c:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <__data_end>
 890:	f8 01       	movw	r30, r16
 892:	11 82       	std	Z+1, r1	; 0x01
				TCNT1 = 0;
 894:	10 82       	st	Z, r1
 896:	60 e0       	ldi	r22, 0x00	; 0
				setSpeed(99.0);
 898:	70 e0       	ldi	r23, 0x00	; 0
 89a:	86 ec       	ldi	r24, 0xC6	; 198
 89c:	92 e4       	ldi	r25, 0x42	; 66
 89e:	4b d0       	rcall	.+150    	; 0x936 <_Z8setSpeedf>
 8a0:	90 92 05 02 	sts	0x0205, r9	; 0x800205 <counter+0x1>
				counter = 12;
 8a4:	80 92 04 02 	sts	0x0204, r8	; 0x800204 <counter>
 8a8:	d7 cd       	rjmp	.-1106   	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 8aa:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
			}
			
			break;
			
			case 13: // Stop efter 7. brik
			if(newCount){
 8ae:	88 23       	and	r24, r24
 8b0:	09 f4       	brne	.+2      	; 0x8b4 <__LOCK_REGION_LENGTH__+0x4b4>
 8b2:	d2 cd       	rjmp	.-1116   	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 8b4:	fc d0       	rcall	.+504    	; 0xaae <_Z8stopSOMOv>
				stopSOMO();
 8b6:	8f e3       	ldi	r24, 0x3F	; 63
 8b8:	9c e9       	ldi	r25, 0x9C	; 156
 8ba:	01 97       	sbiw	r24, 0x01	; 1
 8bc:	f1 f7       	brne	.-4      	; 0x8ba <__LOCK_REGION_LENGTH__+0x4ba>
 8be:	00 c0       	rjmp	.+0      	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
 8c0:	00 00       	nop
 8c2:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				
				//playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
 8c6:	9f ef       	ldi	r25, 0xFF	; 255
 8c8:	e3 ed       	ldi	r30, 0xD3	; 211
 8ca:	f0 e3       	ldi	r31, 0x30	; 48
 8cc:	91 50       	subi	r25, 0x01	; 1
 8ce:	e0 40       	sbci	r30, 0x00	; 0
 8d0:	f0 40       	sbci	r31, 0x00	; 0
 8d2:	e1 f7       	brne	.-8      	; 0x8cc <__LOCK_REGION_LENGTH__+0x4cc>
 8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <__LOCK_REGION_LENGTH__+0x4d6>
 8d6:	00 00       	nop
 8d8:	19 82       	std	Y+1, r1	; 0x01
 8da:	18 82       	st	Y, r1
				_delay_ms(1000);
				TCNT3 = 0;
 8dc:	8e ef       	ldi	r24, 0xFE	; 254
 8de:	90 e0       	ldi	r25, 0x00	; 0
				bLightStrength(254);
 8e0:	42 dc       	rcall	.-1916   	; 0x166 <_Z14bLightStrengthi>
 8e2:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__data_end+0x1>
 8e6:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
				MotorMode = 0;
 8ea:	2f ef       	ldi	r18, 0xFF	; 255
 8ec:	89 e6       	ldi	r24, 0x69	; 105
 8ee:	98 e1       	ldi	r25, 0x18	; 24
 8f0:	21 50       	subi	r18, 0x01	; 1
 8f2:	80 40       	sbci	r24, 0x00	; 0
 8f4:	90 40       	sbci	r25, 0x00	; 0
 8f6:	e1 f7       	brne	.-8      	; 0x8f0 <__LOCK_REGION_LENGTH__+0x4f0>
 8f8:	00 c0       	rjmp	.+0      	; 0x8fa <__LOCK_REGION_LENGTH__+0x4fa>
 8fa:	00 00       	nop
 8fc:	4e dc       	rcall	.-1892   	; 0x19a <_Z9fLightOffv>
 8fe:	d7 d0       	rcall	.+430    	; 0xaae <_Z8stopSOMOv>
 900:	f5 01       	movw	r30, r10
				_delay_ms(500);
				fLightOff();
 902:	10 82       	st	Z, r1
 904:	18 b8       	out	0x08, r1	; 8
				stopSOMO();
 906:	c2 d0       	rcall	.+388    	; 0xa8c <_Z8playNextv>
 908:	a7 cd       	rjmp	.-1202   	; 0x458 <__LOCK_REGION_LENGTH__+0x58>

0000090a <_Z9initMotorv>:
#include "MotorDriver.h"
#include <stdio.h>
#include <avr/io.h>

void initMotor(){
	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<WGM11)|(0<<WGM10); // Set compare mode 3 for OCR1A, clear on upcount, set on downcount.
 90a:	82 e8       	ldi	r24, 0x82	; 130
 90c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = (1<<WGM13)|(0<<WGM12)|(1<<CS12)|(0<<CS11)|(0<<CS10); // Set Mode 10, PWM Phase correct ICR1 TOP & 256 prescaler
 910:	84 e1       	ldi	r24, 0x14	; 20
 912:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	ICR1 = 125;
 916:	8d e7       	ldi	r24, 0x7D	; 125
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 91e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	TIMSK1 = 0b00000010;
 922:	82 e0       	ldi	r24, 0x02	; 2
 924:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
	OCR1A = 0;
 928:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 92c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	DDRA = 0xFF; // Make pin A ports outputs, so we can trigger the H-Bridge.
 930:	8f ef       	ldi	r24, 0xFF	; 255
 932:	81 b9       	out	0x01, r24	; 1
 934:	08 95       	ret

00000936 <_Z8setSpeedf>:
}

void setSpeed(float speed) {
 936:	cf 92       	push	r12
 938:	df 92       	push	r13
 93a:	ef 92       	push	r14
 93c:	ff 92       	push	r15
 93e:	cf 93       	push	r28
 940:	df 93       	push	r29
 942:	6b 01       	movw	r12, r22
 944:	7c 01       	movw	r14, r24
	
	if(speed > 100){
 946:	20 e0       	ldi	r18, 0x00	; 0
 948:	30 e0       	ldi	r19, 0x00	; 0
 94a:	48 ec       	ldi	r20, 0xC8	; 200
 94c:	52 e4       	ldi	r21, 0x42	; 66
 94e:	80 d2       	rcall	.+1280   	; 0xe50 <__gesf2>
 950:	18 16       	cp	r1, r24
 952:	64 f0       	brlt	.+24     	; 0x96c <_Z8setSpeedf+0x36>
		speed = 100;
	}
	if(speed < 0){
 954:	20 e0       	ldi	r18, 0x00	; 0
 956:	30 e0       	ldi	r19, 0x00	; 0
 958:	a9 01       	movw	r20, r18
 95a:	c7 01       	movw	r24, r14
 95c:	b6 01       	movw	r22, r12
 95e:	2e d1       	rcall	.+604    	; 0xbbc <__cmpsf2>
 960:	88 23       	and	r24, r24
 962:	64 f4       	brge	.+24     	; 0x97c <_Z8setSpeedf+0x46>
		speed = 0;
 964:	c1 2c       	mov	r12, r1
 966:	d1 2c       	mov	r13, r1
 968:	76 01       	movw	r14, r12
 96a:	08 c0       	rjmp	.+16     	; 0x97c <_Z8setSpeedf+0x46>
}

void setSpeed(float speed) {
	
	if(speed > 100){
		speed = 100;
 96c:	0f 2e       	mov	r0, r31
 96e:	c1 2c       	mov	r12, r1
 970:	d1 2c       	mov	r13, r1
 972:	f8 ec       	ldi	r31, 0xC8	; 200
 974:	ef 2e       	mov	r14, r31
 976:	f2 e4       	ldi	r31, 0x42	; 66
 978:	ff 2e       	mov	r15, r31
 97a:	f0 2d       	mov	r31, r0
	}
	if(speed < 0){
		speed = 0;
	}
	speed = speed / 100;
	OCR1A = (1-speed)*ICR1;
 97c:	c0 91 86 00 	lds	r28, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
 980:	d0 91 87 00 	lds	r29, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 984:	20 e0       	ldi	r18, 0x00	; 0
 986:	30 e0       	ldi	r19, 0x00	; 0
 988:	48 ec       	ldi	r20, 0xC8	; 200
 98a:	52 e4       	ldi	r21, 0x42	; 66
 98c:	c7 01       	movw	r24, r14
 98e:	b6 01       	movw	r22, r12
 990:	19 d1       	rcall	.+562    	; 0xbc4 <__divsf3>
 992:	9b 01       	movw	r18, r22
 994:	ac 01       	movw	r20, r24
 996:	60 e0       	ldi	r22, 0x00	; 0
 998:	70 e0       	ldi	r23, 0x00	; 0
 99a:	80 e8       	ldi	r24, 0x80	; 128
 99c:	9f e3       	ldi	r25, 0x3F	; 63
 99e:	a9 d0       	rcall	.+338    	; 0xaf2 <__subsf3>
 9a0:	6b 01       	movw	r12, r22
 9a2:	7c 01       	movw	r14, r24
 9a4:	be 01       	movw	r22, r28
 9a6:	80 e0       	ldi	r24, 0x00	; 0
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	a0 d1       	rcall	.+832    	; 0xcec <__floatunsisf>
 9ac:	9b 01       	movw	r18, r22
 9ae:	ac 01       	movw	r20, r24
 9b0:	c7 01       	movw	r24, r14
 9b2:	b6 01       	movw	r22, r12
 9b4:	51 d2       	rcall	.+1186   	; 0xe58 <__mulsf3>
 9b6:	6e d1       	rcall	.+732    	; 0xc94 <__fixunssfsi>
 9b8:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 9bc:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 9c0:	df 91       	pop	r29
 9c2:	cf 91       	pop	r28
 9c4:	ff 90       	pop	r15
 9c6:	ef 90       	pop	r14
 9c8:	df 90       	pop	r13
 9ca:	cf 90       	pop	r12
 9cc:	08 95       	ret

000009ce <_Z8InitUARTmhb>:
	SendChar(0x00);
	SendChar(0x00);
	SendChar(0x03);
	SendChar(0xFF);
	SendChar(0xFA);
	SendChar(0xEF);
 9ce:	0f 93       	push	r16
 9d0:	1f 93       	push	r17
 9d2:	22 23       	and	r18, r18
 9d4:	29 f0       	breq	.+10     	; 0x9e0 <_Z8InitUARTmhb+0x12>
 9d6:	28 e9       	ldi	r18, 0x98	; 152
 9d8:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
 9dc:	78 94       	sei
 9de:	03 c0       	rjmp	.+6      	; 0x9e6 <_Z8InitUARTmhb+0x18>
 9e0:	28 e1       	ldi	r18, 0x18	; 24
 9e2:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
 9e6:	8b 01       	movw	r16, r22
 9e8:	9c 01       	movw	r18, r24
 9ea:	0c 52       	subi	r16, 0x2C	; 44
 9ec:	11 40       	sbci	r17, 0x01	; 1
 9ee:	21 09       	sbc	r18, r1
 9f0:	31 09       	sbc	r19, r1
 9f2:	05 3d       	cpi	r16, 0xD5	; 213
 9f4:	10 4c       	sbci	r17, 0xC0	; 192
 9f6:	21 40       	sbci	r18, 0x01	; 1
 9f8:	31 05       	cpc	r19, r1
 9fa:	08 f5       	brcc	.+66     	; 0xa3e <_Z8InitUARTmhb+0x70>
 9fc:	2b ef       	ldi	r18, 0xFB	; 251
 9fe:	24 0f       	add	r18, r20
 a00:	24 30       	cpi	r18, 0x04	; 4
 a02:	e8 f4       	brcc	.+58     	; 0xa3e <_Z8InitUARTmhb+0x70>
 a04:	46 30       	cpi	r20, 0x06	; 6
 a06:	61 f0       	breq	.+24     	; 0xa20 <_Z8InitUARTmhb+0x52>
 a08:	18 f4       	brcc	.+6      	; 0xa10 <_Z8InitUARTmhb+0x42>
 a0a:	45 30       	cpi	r20, 0x05	; 5
 a0c:	31 f0       	breq	.+12     	; 0xa1a <_Z8InitUARTmhb+0x4c>
 a0e:	14 c0       	rjmp	.+40     	; 0xa38 <_Z8InitUARTmhb+0x6a>
 a10:	47 30       	cpi	r20, 0x07	; 7
 a12:	51 f0       	breq	.+20     	; 0xa28 <_Z8InitUARTmhb+0x5a>
 a14:	48 30       	cpi	r20, 0x08	; 8
 a16:	61 f0       	breq	.+24     	; 0xa30 <_Z8InitUARTmhb+0x62>
 a18:	0f c0       	rjmp	.+30     	; 0xa38 <_Z8InitUARTmhb+0x6a>
 a1a:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
 a1e:	0f c0       	rjmp	.+30     	; 0xa3e <_Z8InitUARTmhb+0x70>
 a20:	22 e0       	ldi	r18, 0x02	; 2
 a22:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
 a26:	0b c0       	rjmp	.+22     	; 0xa3e <_Z8InitUARTmhb+0x70>
 a28:	24 e0       	ldi	r18, 0x04	; 4
 a2a:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
 a2e:	07 c0       	rjmp	.+14     	; 0xa3e <_Z8InitUARTmhb+0x70>
 a30:	26 e0       	ldi	r18, 0x06	; 6
 a32:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
 a36:	03 c0       	rjmp	.+6      	; 0xa3e <_Z8InitUARTmhb+0x70>
 a38:	26 e0       	ldi	r18, 0x06	; 6
 a3a:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
 a3e:	dc 01       	movw	r26, r24
 a40:	cb 01       	movw	r24, r22
 a42:	88 0f       	add	r24, r24
 a44:	99 1f       	adc	r25, r25
 a46:	aa 1f       	adc	r26, r26
 a48:	bb 1f       	adc	r27, r27
 a4a:	88 0f       	add	r24, r24
 a4c:	99 1f       	adc	r25, r25
 a4e:	aa 1f       	adc	r26, r26
 a50:	bb 1f       	adc	r27, r27
 a52:	9c 01       	movw	r18, r24
 a54:	ad 01       	movw	r20, r26
 a56:	22 0f       	add	r18, r18
 a58:	33 1f       	adc	r19, r19
 a5a:	44 1f       	adc	r20, r20
 a5c:	55 1f       	adc	r21, r21
 a5e:	22 0f       	add	r18, r18
 a60:	33 1f       	adc	r19, r19
 a62:	44 1f       	adc	r20, r20
 a64:	55 1f       	adc	r21, r21
 a66:	60 e0       	ldi	r22, 0x00	; 0
 a68:	74 e2       	ldi	r23, 0x24	; 36
 a6a:	84 ef       	ldi	r24, 0xF4	; 244
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	57 d2       	rcall	.+1198   	; 0xf1e <__udivmodsi4>
 a70:	21 50       	subi	r18, 0x01	; 1
 a72:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
 a76:	1f 91       	pop	r17
 a78:	0f 91       	pop	r16
 a7a:	08 95       	ret

00000a7c <_Z8SendCharc>:
 a7c:	e8 ec       	ldi	r30, 0xC8	; 200
 a7e:	f0 e0       	ldi	r31, 0x00	; 0
 a80:	90 81       	ld	r25, Z
 a82:	95 ff       	sbrs	r25, 5
 a84:	fd cf       	rjmp	.-6      	; 0xa80 <_Z8SendCharc+0x4>
 a86:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 a8a:	08 95       	ret

00000a8c <_Z8playNextv>:
 a8c:	8e e7       	ldi	r24, 0x7E	; 126
 a8e:	f6 df       	rcall	.-20     	; 0xa7c <_Z8SendCharc>
 a90:	81 e0       	ldi	r24, 0x01	; 1
 a92:	f4 df       	rcall	.-24     	; 0xa7c <_Z8SendCharc>
 a94:	80 e0       	ldi	r24, 0x00	; 0
 a96:	f2 df       	rcall	.-28     	; 0xa7c <_Z8SendCharc>
 a98:	80 e0       	ldi	r24, 0x00	; 0
 a9a:	f0 df       	rcall	.-32     	; 0xa7c <_Z8SendCharc>
 a9c:	80 e0       	ldi	r24, 0x00	; 0
 a9e:	ee df       	rcall	.-36     	; 0xa7c <_Z8SendCharc>
 aa0:	8f ef       	ldi	r24, 0xFF	; 255
 aa2:	ec df       	rcall	.-40     	; 0xa7c <_Z8SendCharc>
 aa4:	8f ef       	ldi	r24, 0xFF	; 255
 aa6:	ea df       	rcall	.-44     	; 0xa7c <_Z8SendCharc>
 aa8:	8f ee       	ldi	r24, 0xEF	; 239
 aaa:	e8 cf       	rjmp	.-48     	; 0xa7c <_Z8SendCharc>
 aac:	08 95       	ret

00000aae <_Z8stopSOMOv>:
 aae:	8e e7       	ldi	r24, 0x7E	; 126
 ab0:	e5 df       	rcall	.-54     	; 0xa7c <_Z8SendCharc>
 ab2:	86 e1       	ldi	r24, 0x16	; 22
 ab4:	e3 df       	rcall	.-58     	; 0xa7c <_Z8SendCharc>
 ab6:	80 e0       	ldi	r24, 0x00	; 0
 ab8:	e1 df       	rcall	.-62     	; 0xa7c <_Z8SendCharc>
 aba:	80 e0       	ldi	r24, 0x00	; 0
 abc:	df df       	rcall	.-66     	; 0xa7c <_Z8SendCharc>
 abe:	80 e0       	ldi	r24, 0x00	; 0
 ac0:	dd df       	rcall	.-70     	; 0xa7c <_Z8SendCharc>
 ac2:	8f ef       	ldi	r24, 0xFF	; 255
 ac4:	db df       	rcall	.-74     	; 0xa7c <_Z8SendCharc>
 ac6:	8a ee       	ldi	r24, 0xEA	; 234
 ac8:	d9 df       	rcall	.-78     	; 0xa7c <_Z8SendCharc>
 aca:	8f ee       	ldi	r24, 0xEF	; 239
 acc:	d7 cf       	rjmp	.-82     	; 0xa7c <_Z8SendCharc>
 ace:	08 95       	ret

00000ad0 <_Z8volumeUpv>:
};

void volumeUp()
{

	SendChar(0x7E);
 ad0:	8e e7       	ldi	r24, 0x7E	; 126
 ad2:	d4 df       	rcall	.-88     	; 0xa7c <_Z8SendCharc>
	SendChar(0x04);
 ad4:	84 e0       	ldi	r24, 0x04	; 4
 ad6:	d2 df       	rcall	.-92     	; 0xa7c <_Z8SendCharc>
	SendChar(0x00);
 ad8:	80 e0       	ldi	r24, 0x00	; 0
 ada:	d0 df       	rcall	.-96     	; 0xa7c <_Z8SendCharc>
	SendChar(0x00);
 adc:	80 e0       	ldi	r24, 0x00	; 0
 ade:	ce df       	rcall	.-100    	; 0xa7c <_Z8SendCharc>
	SendChar(0x00);
 ae0:	80 e0       	ldi	r24, 0x00	; 0
 ae2:	cc df       	rcall	.-104    	; 0xa7c <_Z8SendCharc>
	SendChar(0xFF);
 ae4:	8f ef       	ldi	r24, 0xFF	; 255
 ae6:	ca df       	rcall	.-108    	; 0xa7c <_Z8SendCharc>
	SendChar(0xFC);
 ae8:	8c ef       	ldi	r24, 0xFC	; 252
 aea:	c8 df       	rcall	.-112    	; 0xa7c <_Z8SendCharc>
 aec:	8f ee       	ldi	r24, 0xEF	; 239
	SendChar(0xEF);
 aee:	c6 cf       	rjmp	.-116    	; 0xa7c <_Z8SendCharc>
 af0:	08 95       	ret

00000af2 <__subsf3>:
 af2:	50 58       	subi	r21, 0x80	; 128

00000af4 <__addsf3>:
 af4:	bb 27       	eor	r27, r27
 af6:	aa 27       	eor	r26, r26
 af8:	0e d0       	rcall	.+28     	; 0xb16 <__addsf3x>
 afa:	70 c1       	rjmp	.+736    	; 0xddc <__fp_round>
 afc:	61 d1       	rcall	.+706    	; 0xdc0 <__fp_pscA>
 afe:	30 f0       	brcs	.+12     	; 0xb0c <__addsf3+0x18>
 b00:	66 d1       	rcall	.+716    	; 0xdce <__fp_pscB>
 b02:	20 f0       	brcs	.+8      	; 0xb0c <__addsf3+0x18>
 b04:	31 f4       	brne	.+12     	; 0xb12 <__addsf3+0x1e>
 b06:	9f 3f       	cpi	r25, 0xFF	; 255
 b08:	11 f4       	brne	.+4      	; 0xb0e <__addsf3+0x1a>
 b0a:	1e f4       	brtc	.+6      	; 0xb12 <__addsf3+0x1e>
 b0c:	56 c1       	rjmp	.+684    	; 0xdba <__fp_nan>
 b0e:	0e f4       	brtc	.+2      	; 0xb12 <__addsf3+0x1e>
 b10:	e0 95       	com	r30
 b12:	e7 fb       	bst	r30, 7
 b14:	4c c1       	rjmp	.+664    	; 0xdae <__fp_inf>

00000b16 <__addsf3x>:
 b16:	e9 2f       	mov	r30, r25
 b18:	72 d1       	rcall	.+740    	; 0xdfe <__fp_split3>
 b1a:	80 f3       	brcs	.-32     	; 0xafc <__addsf3+0x8>
 b1c:	ba 17       	cp	r27, r26
 b1e:	62 07       	cpc	r22, r18
 b20:	73 07       	cpc	r23, r19
 b22:	84 07       	cpc	r24, r20
 b24:	95 07       	cpc	r25, r21
 b26:	18 f0       	brcs	.+6      	; 0xb2e <__addsf3x+0x18>
 b28:	71 f4       	brne	.+28     	; 0xb46 <__addsf3x+0x30>
 b2a:	9e f5       	brtc	.+102    	; 0xb92 <__addsf3x+0x7c>
 b2c:	8a c1       	rjmp	.+788    	; 0xe42 <__fp_zero>
 b2e:	0e f4       	brtc	.+2      	; 0xb32 <__addsf3x+0x1c>
 b30:	e0 95       	com	r30
 b32:	0b 2e       	mov	r0, r27
 b34:	ba 2f       	mov	r27, r26
 b36:	a0 2d       	mov	r26, r0
 b38:	0b 01       	movw	r0, r22
 b3a:	b9 01       	movw	r22, r18
 b3c:	90 01       	movw	r18, r0
 b3e:	0c 01       	movw	r0, r24
 b40:	ca 01       	movw	r24, r20
 b42:	a0 01       	movw	r20, r0
 b44:	11 24       	eor	r1, r1
 b46:	ff 27       	eor	r31, r31
 b48:	59 1b       	sub	r21, r25
 b4a:	99 f0       	breq	.+38     	; 0xb72 <__addsf3x+0x5c>
 b4c:	59 3f       	cpi	r21, 0xF9	; 249
 b4e:	50 f4       	brcc	.+20     	; 0xb64 <__addsf3x+0x4e>
 b50:	50 3e       	cpi	r21, 0xE0	; 224
 b52:	68 f1       	brcs	.+90     	; 0xbae <__addsf3x+0x98>
 b54:	1a 16       	cp	r1, r26
 b56:	f0 40       	sbci	r31, 0x00	; 0
 b58:	a2 2f       	mov	r26, r18
 b5a:	23 2f       	mov	r18, r19
 b5c:	34 2f       	mov	r19, r20
 b5e:	44 27       	eor	r20, r20
 b60:	58 5f       	subi	r21, 0xF8	; 248
 b62:	f3 cf       	rjmp	.-26     	; 0xb4a <__addsf3x+0x34>
 b64:	46 95       	lsr	r20
 b66:	37 95       	ror	r19
 b68:	27 95       	ror	r18
 b6a:	a7 95       	ror	r26
 b6c:	f0 40       	sbci	r31, 0x00	; 0
 b6e:	53 95       	inc	r21
 b70:	c9 f7       	brne	.-14     	; 0xb64 <__addsf3x+0x4e>
 b72:	7e f4       	brtc	.+30     	; 0xb92 <__addsf3x+0x7c>
 b74:	1f 16       	cp	r1, r31
 b76:	ba 0b       	sbc	r27, r26
 b78:	62 0b       	sbc	r22, r18
 b7a:	73 0b       	sbc	r23, r19
 b7c:	84 0b       	sbc	r24, r20
 b7e:	ba f0       	brmi	.+46     	; 0xbae <__addsf3x+0x98>
 b80:	91 50       	subi	r25, 0x01	; 1
 b82:	a1 f0       	breq	.+40     	; 0xbac <__addsf3x+0x96>
 b84:	ff 0f       	add	r31, r31
 b86:	bb 1f       	adc	r27, r27
 b88:	66 1f       	adc	r22, r22
 b8a:	77 1f       	adc	r23, r23
 b8c:	88 1f       	adc	r24, r24
 b8e:	c2 f7       	brpl	.-16     	; 0xb80 <__addsf3x+0x6a>
 b90:	0e c0       	rjmp	.+28     	; 0xbae <__addsf3x+0x98>
 b92:	ba 0f       	add	r27, r26
 b94:	62 1f       	adc	r22, r18
 b96:	73 1f       	adc	r23, r19
 b98:	84 1f       	adc	r24, r20
 b9a:	48 f4       	brcc	.+18     	; 0xbae <__addsf3x+0x98>
 b9c:	87 95       	ror	r24
 b9e:	77 95       	ror	r23
 ba0:	67 95       	ror	r22
 ba2:	b7 95       	ror	r27
 ba4:	f7 95       	ror	r31
 ba6:	9e 3f       	cpi	r25, 0xFE	; 254
 ba8:	08 f0       	brcs	.+2      	; 0xbac <__addsf3x+0x96>
 baa:	b3 cf       	rjmp	.-154    	; 0xb12 <__addsf3+0x1e>
 bac:	93 95       	inc	r25
 bae:	88 0f       	add	r24, r24
 bb0:	08 f0       	brcs	.+2      	; 0xbb4 <__addsf3x+0x9e>
 bb2:	99 27       	eor	r25, r25
 bb4:	ee 0f       	add	r30, r30
 bb6:	97 95       	ror	r25
 bb8:	87 95       	ror	r24
 bba:	08 95       	ret

00000bbc <__cmpsf2>:
 bbc:	d4 d0       	rcall	.+424    	; 0xd66 <__fp_cmp>
 bbe:	08 f4       	brcc	.+2      	; 0xbc2 <__cmpsf2+0x6>
 bc0:	81 e0       	ldi	r24, 0x01	; 1
 bc2:	08 95       	ret

00000bc4 <__divsf3>:
 bc4:	0c d0       	rcall	.+24     	; 0xbde <__divsf3x>
 bc6:	0a c1       	rjmp	.+532    	; 0xddc <__fp_round>
 bc8:	02 d1       	rcall	.+516    	; 0xdce <__fp_pscB>
 bca:	40 f0       	brcs	.+16     	; 0xbdc <__divsf3+0x18>
 bcc:	f9 d0       	rcall	.+498    	; 0xdc0 <__fp_pscA>
 bce:	30 f0       	brcs	.+12     	; 0xbdc <__divsf3+0x18>
 bd0:	21 f4       	brne	.+8      	; 0xbda <__divsf3+0x16>
 bd2:	5f 3f       	cpi	r21, 0xFF	; 255
 bd4:	19 f0       	breq	.+6      	; 0xbdc <__divsf3+0x18>
 bd6:	eb c0       	rjmp	.+470    	; 0xdae <__fp_inf>
 bd8:	51 11       	cpse	r21, r1
 bda:	34 c1       	rjmp	.+616    	; 0xe44 <__fp_szero>
 bdc:	ee c0       	rjmp	.+476    	; 0xdba <__fp_nan>

00000bde <__divsf3x>:
 bde:	0f d1       	rcall	.+542    	; 0xdfe <__fp_split3>
 be0:	98 f3       	brcs	.-26     	; 0xbc8 <__divsf3+0x4>

00000be2 <__divsf3_pse>:
 be2:	99 23       	and	r25, r25
 be4:	c9 f3       	breq	.-14     	; 0xbd8 <__divsf3+0x14>
 be6:	55 23       	and	r21, r21
 be8:	b1 f3       	breq	.-20     	; 0xbd6 <__divsf3+0x12>
 bea:	95 1b       	sub	r25, r21
 bec:	55 0b       	sbc	r21, r21
 bee:	bb 27       	eor	r27, r27
 bf0:	aa 27       	eor	r26, r26
 bf2:	62 17       	cp	r22, r18
 bf4:	73 07       	cpc	r23, r19
 bf6:	84 07       	cpc	r24, r20
 bf8:	38 f0       	brcs	.+14     	; 0xc08 <__divsf3_pse+0x26>
 bfa:	9f 5f       	subi	r25, 0xFF	; 255
 bfc:	5f 4f       	sbci	r21, 0xFF	; 255
 bfe:	22 0f       	add	r18, r18
 c00:	33 1f       	adc	r19, r19
 c02:	44 1f       	adc	r20, r20
 c04:	aa 1f       	adc	r26, r26
 c06:	a9 f3       	breq	.-22     	; 0xbf2 <__divsf3_pse+0x10>
 c08:	33 d0       	rcall	.+102    	; 0xc70 <__divsf3_pse+0x8e>
 c0a:	0e 2e       	mov	r0, r30
 c0c:	3a f0       	brmi	.+14     	; 0xc1c <__divsf3_pse+0x3a>
 c0e:	e0 e8       	ldi	r30, 0x80	; 128
 c10:	30 d0       	rcall	.+96     	; 0xc72 <__divsf3_pse+0x90>
 c12:	91 50       	subi	r25, 0x01	; 1
 c14:	50 40       	sbci	r21, 0x00	; 0
 c16:	e6 95       	lsr	r30
 c18:	00 1c       	adc	r0, r0
 c1a:	ca f7       	brpl	.-14     	; 0xc0e <__divsf3_pse+0x2c>
 c1c:	29 d0       	rcall	.+82     	; 0xc70 <__divsf3_pse+0x8e>
 c1e:	fe 2f       	mov	r31, r30
 c20:	27 d0       	rcall	.+78     	; 0xc70 <__divsf3_pse+0x8e>
 c22:	66 0f       	add	r22, r22
 c24:	77 1f       	adc	r23, r23
 c26:	88 1f       	adc	r24, r24
 c28:	bb 1f       	adc	r27, r27
 c2a:	26 17       	cp	r18, r22
 c2c:	37 07       	cpc	r19, r23
 c2e:	48 07       	cpc	r20, r24
 c30:	ab 07       	cpc	r26, r27
 c32:	b0 e8       	ldi	r27, 0x80	; 128
 c34:	09 f0       	breq	.+2      	; 0xc38 <__divsf3_pse+0x56>
 c36:	bb 0b       	sbc	r27, r27
 c38:	80 2d       	mov	r24, r0
 c3a:	bf 01       	movw	r22, r30
 c3c:	ff 27       	eor	r31, r31
 c3e:	93 58       	subi	r25, 0x83	; 131
 c40:	5f 4f       	sbci	r21, 0xFF	; 255
 c42:	2a f0       	brmi	.+10     	; 0xc4e <__divsf3_pse+0x6c>
 c44:	9e 3f       	cpi	r25, 0xFE	; 254
 c46:	51 05       	cpc	r21, r1
 c48:	68 f0       	brcs	.+26     	; 0xc64 <__divsf3_pse+0x82>
 c4a:	b1 c0       	rjmp	.+354    	; 0xdae <__fp_inf>
 c4c:	fb c0       	rjmp	.+502    	; 0xe44 <__fp_szero>
 c4e:	5f 3f       	cpi	r21, 0xFF	; 255
 c50:	ec f3       	brlt	.-6      	; 0xc4c <__divsf3_pse+0x6a>
 c52:	98 3e       	cpi	r25, 0xE8	; 232
 c54:	dc f3       	brlt	.-10     	; 0xc4c <__divsf3_pse+0x6a>
 c56:	86 95       	lsr	r24
 c58:	77 95       	ror	r23
 c5a:	67 95       	ror	r22
 c5c:	b7 95       	ror	r27
 c5e:	f7 95       	ror	r31
 c60:	9f 5f       	subi	r25, 0xFF	; 255
 c62:	c9 f7       	brne	.-14     	; 0xc56 <__divsf3_pse+0x74>
 c64:	88 0f       	add	r24, r24
 c66:	91 1d       	adc	r25, r1
 c68:	96 95       	lsr	r25
 c6a:	87 95       	ror	r24
 c6c:	97 f9       	bld	r25, 7
 c6e:	08 95       	ret
 c70:	e1 e0       	ldi	r30, 0x01	; 1
 c72:	66 0f       	add	r22, r22
 c74:	77 1f       	adc	r23, r23
 c76:	88 1f       	adc	r24, r24
 c78:	bb 1f       	adc	r27, r27
 c7a:	62 17       	cp	r22, r18
 c7c:	73 07       	cpc	r23, r19
 c7e:	84 07       	cpc	r24, r20
 c80:	ba 07       	cpc	r27, r26
 c82:	20 f0       	brcs	.+8      	; 0xc8c <__divsf3_pse+0xaa>
 c84:	62 1b       	sub	r22, r18
 c86:	73 0b       	sbc	r23, r19
 c88:	84 0b       	sbc	r24, r20
 c8a:	ba 0b       	sbc	r27, r26
 c8c:	ee 1f       	adc	r30, r30
 c8e:	88 f7       	brcc	.-30     	; 0xc72 <__divsf3_pse+0x90>
 c90:	e0 95       	com	r30
 c92:	08 95       	ret

00000c94 <__fixunssfsi>:
 c94:	bc d0       	rcall	.+376    	; 0xe0e <__fp_splitA>
 c96:	88 f0       	brcs	.+34     	; 0xcba <__fixunssfsi+0x26>
 c98:	9f 57       	subi	r25, 0x7F	; 127
 c9a:	90 f0       	brcs	.+36     	; 0xcc0 <__fixunssfsi+0x2c>
 c9c:	b9 2f       	mov	r27, r25
 c9e:	99 27       	eor	r25, r25
 ca0:	b7 51       	subi	r27, 0x17	; 23
 ca2:	a0 f0       	brcs	.+40     	; 0xccc <__fixunssfsi+0x38>
 ca4:	d1 f0       	breq	.+52     	; 0xcda <__fixunssfsi+0x46>
 ca6:	66 0f       	add	r22, r22
 ca8:	77 1f       	adc	r23, r23
 caa:	88 1f       	adc	r24, r24
 cac:	99 1f       	adc	r25, r25
 cae:	1a f0       	brmi	.+6      	; 0xcb6 <__fixunssfsi+0x22>
 cb0:	ba 95       	dec	r27
 cb2:	c9 f7       	brne	.-14     	; 0xca6 <__fixunssfsi+0x12>
 cb4:	12 c0       	rjmp	.+36     	; 0xcda <__fixunssfsi+0x46>
 cb6:	b1 30       	cpi	r27, 0x01	; 1
 cb8:	81 f0       	breq	.+32     	; 0xcda <__fixunssfsi+0x46>
 cba:	c3 d0       	rcall	.+390    	; 0xe42 <__fp_zero>
 cbc:	b1 e0       	ldi	r27, 0x01	; 1
 cbe:	08 95       	ret
 cc0:	c0 c0       	rjmp	.+384    	; 0xe42 <__fp_zero>
 cc2:	67 2f       	mov	r22, r23
 cc4:	78 2f       	mov	r23, r24
 cc6:	88 27       	eor	r24, r24
 cc8:	b8 5f       	subi	r27, 0xF8	; 248
 cca:	39 f0       	breq	.+14     	; 0xcda <__fixunssfsi+0x46>
 ccc:	b9 3f       	cpi	r27, 0xF9	; 249
 cce:	cc f3       	brlt	.-14     	; 0xcc2 <__fixunssfsi+0x2e>
 cd0:	86 95       	lsr	r24
 cd2:	77 95       	ror	r23
 cd4:	67 95       	ror	r22
 cd6:	b3 95       	inc	r27
 cd8:	d9 f7       	brne	.-10     	; 0xcd0 <__fixunssfsi+0x3c>
 cda:	3e f4       	brtc	.+14     	; 0xcea <__fixunssfsi+0x56>
 cdc:	90 95       	com	r25
 cde:	80 95       	com	r24
 ce0:	70 95       	com	r23
 ce2:	61 95       	neg	r22
 ce4:	7f 4f       	sbci	r23, 0xFF	; 255
 ce6:	8f 4f       	sbci	r24, 0xFF	; 255
 ce8:	9f 4f       	sbci	r25, 0xFF	; 255
 cea:	08 95       	ret

00000cec <__floatunsisf>:
 cec:	e8 94       	clt
 cee:	09 c0       	rjmp	.+18     	; 0xd02 <__floatsisf+0x12>

00000cf0 <__floatsisf>:
 cf0:	97 fb       	bst	r25, 7
 cf2:	3e f4       	brtc	.+14     	; 0xd02 <__floatsisf+0x12>
 cf4:	90 95       	com	r25
 cf6:	80 95       	com	r24
 cf8:	70 95       	com	r23
 cfa:	61 95       	neg	r22
 cfc:	7f 4f       	sbci	r23, 0xFF	; 255
 cfe:	8f 4f       	sbci	r24, 0xFF	; 255
 d00:	9f 4f       	sbci	r25, 0xFF	; 255
 d02:	99 23       	and	r25, r25
 d04:	a9 f0       	breq	.+42     	; 0xd30 <__floatsisf+0x40>
 d06:	f9 2f       	mov	r31, r25
 d08:	96 e9       	ldi	r25, 0x96	; 150
 d0a:	bb 27       	eor	r27, r27
 d0c:	93 95       	inc	r25
 d0e:	f6 95       	lsr	r31
 d10:	87 95       	ror	r24
 d12:	77 95       	ror	r23
 d14:	67 95       	ror	r22
 d16:	b7 95       	ror	r27
 d18:	f1 11       	cpse	r31, r1
 d1a:	f8 cf       	rjmp	.-16     	; 0xd0c <__floatsisf+0x1c>
 d1c:	fa f4       	brpl	.+62     	; 0xd5c <__floatsisf+0x6c>
 d1e:	bb 0f       	add	r27, r27
 d20:	11 f4       	brne	.+4      	; 0xd26 <__floatsisf+0x36>
 d22:	60 ff       	sbrs	r22, 0
 d24:	1b c0       	rjmp	.+54     	; 0xd5c <__floatsisf+0x6c>
 d26:	6f 5f       	subi	r22, 0xFF	; 255
 d28:	7f 4f       	sbci	r23, 0xFF	; 255
 d2a:	8f 4f       	sbci	r24, 0xFF	; 255
 d2c:	9f 4f       	sbci	r25, 0xFF	; 255
 d2e:	16 c0       	rjmp	.+44     	; 0xd5c <__floatsisf+0x6c>
 d30:	88 23       	and	r24, r24
 d32:	11 f0       	breq	.+4      	; 0xd38 <__floatsisf+0x48>
 d34:	96 e9       	ldi	r25, 0x96	; 150
 d36:	11 c0       	rjmp	.+34     	; 0xd5a <__floatsisf+0x6a>
 d38:	77 23       	and	r23, r23
 d3a:	21 f0       	breq	.+8      	; 0xd44 <__floatsisf+0x54>
 d3c:	9e e8       	ldi	r25, 0x8E	; 142
 d3e:	87 2f       	mov	r24, r23
 d40:	76 2f       	mov	r23, r22
 d42:	05 c0       	rjmp	.+10     	; 0xd4e <__floatsisf+0x5e>
 d44:	66 23       	and	r22, r22
 d46:	71 f0       	breq	.+28     	; 0xd64 <__floatsisf+0x74>
 d48:	96 e8       	ldi	r25, 0x86	; 134
 d4a:	86 2f       	mov	r24, r22
 d4c:	70 e0       	ldi	r23, 0x00	; 0
 d4e:	60 e0       	ldi	r22, 0x00	; 0
 d50:	2a f0       	brmi	.+10     	; 0xd5c <__floatsisf+0x6c>
 d52:	9a 95       	dec	r25
 d54:	66 0f       	add	r22, r22
 d56:	77 1f       	adc	r23, r23
 d58:	88 1f       	adc	r24, r24
 d5a:	da f7       	brpl	.-10     	; 0xd52 <__floatsisf+0x62>
 d5c:	88 0f       	add	r24, r24
 d5e:	96 95       	lsr	r25
 d60:	87 95       	ror	r24
 d62:	97 f9       	bld	r25, 7
 d64:	08 95       	ret

00000d66 <__fp_cmp>:
 d66:	99 0f       	add	r25, r25
 d68:	00 08       	sbc	r0, r0
 d6a:	55 0f       	add	r21, r21
 d6c:	aa 0b       	sbc	r26, r26
 d6e:	e0 e8       	ldi	r30, 0x80	; 128
 d70:	fe ef       	ldi	r31, 0xFE	; 254
 d72:	16 16       	cp	r1, r22
 d74:	17 06       	cpc	r1, r23
 d76:	e8 07       	cpc	r30, r24
 d78:	f9 07       	cpc	r31, r25
 d7a:	c0 f0       	brcs	.+48     	; 0xdac <__fp_cmp+0x46>
 d7c:	12 16       	cp	r1, r18
 d7e:	13 06       	cpc	r1, r19
 d80:	e4 07       	cpc	r30, r20
 d82:	f5 07       	cpc	r31, r21
 d84:	98 f0       	brcs	.+38     	; 0xdac <__fp_cmp+0x46>
 d86:	62 1b       	sub	r22, r18
 d88:	73 0b       	sbc	r23, r19
 d8a:	84 0b       	sbc	r24, r20
 d8c:	95 0b       	sbc	r25, r21
 d8e:	39 f4       	brne	.+14     	; 0xd9e <__fp_cmp+0x38>
 d90:	0a 26       	eor	r0, r26
 d92:	61 f0       	breq	.+24     	; 0xdac <__fp_cmp+0x46>
 d94:	23 2b       	or	r18, r19
 d96:	24 2b       	or	r18, r20
 d98:	25 2b       	or	r18, r21
 d9a:	21 f4       	brne	.+8      	; 0xda4 <__fp_cmp+0x3e>
 d9c:	08 95       	ret
 d9e:	0a 26       	eor	r0, r26
 da0:	09 f4       	brne	.+2      	; 0xda4 <__fp_cmp+0x3e>
 da2:	a1 40       	sbci	r26, 0x01	; 1
 da4:	a6 95       	lsr	r26
 da6:	8f ef       	ldi	r24, 0xFF	; 255
 da8:	81 1d       	adc	r24, r1
 daa:	81 1d       	adc	r24, r1
 dac:	08 95       	ret

00000dae <__fp_inf>:
 dae:	97 f9       	bld	r25, 7
 db0:	9f 67       	ori	r25, 0x7F	; 127
 db2:	80 e8       	ldi	r24, 0x80	; 128
 db4:	70 e0       	ldi	r23, 0x00	; 0
 db6:	60 e0       	ldi	r22, 0x00	; 0
 db8:	08 95       	ret

00000dba <__fp_nan>:
 dba:	9f ef       	ldi	r25, 0xFF	; 255
 dbc:	80 ec       	ldi	r24, 0xC0	; 192
 dbe:	08 95       	ret

00000dc0 <__fp_pscA>:
 dc0:	00 24       	eor	r0, r0
 dc2:	0a 94       	dec	r0
 dc4:	16 16       	cp	r1, r22
 dc6:	17 06       	cpc	r1, r23
 dc8:	18 06       	cpc	r1, r24
 dca:	09 06       	cpc	r0, r25
 dcc:	08 95       	ret

00000dce <__fp_pscB>:
 dce:	00 24       	eor	r0, r0
 dd0:	0a 94       	dec	r0
 dd2:	12 16       	cp	r1, r18
 dd4:	13 06       	cpc	r1, r19
 dd6:	14 06       	cpc	r1, r20
 dd8:	05 06       	cpc	r0, r21
 dda:	08 95       	ret

00000ddc <__fp_round>:
 ddc:	09 2e       	mov	r0, r25
 dde:	03 94       	inc	r0
 de0:	00 0c       	add	r0, r0
 de2:	11 f4       	brne	.+4      	; 0xde8 <__fp_round+0xc>
 de4:	88 23       	and	r24, r24
 de6:	52 f0       	brmi	.+20     	; 0xdfc <__fp_round+0x20>
 de8:	bb 0f       	add	r27, r27
 dea:	40 f4       	brcc	.+16     	; 0xdfc <__fp_round+0x20>
 dec:	bf 2b       	or	r27, r31
 dee:	11 f4       	brne	.+4      	; 0xdf4 <__fp_round+0x18>
 df0:	60 ff       	sbrs	r22, 0
 df2:	04 c0       	rjmp	.+8      	; 0xdfc <__fp_round+0x20>
 df4:	6f 5f       	subi	r22, 0xFF	; 255
 df6:	7f 4f       	sbci	r23, 0xFF	; 255
 df8:	8f 4f       	sbci	r24, 0xFF	; 255
 dfa:	9f 4f       	sbci	r25, 0xFF	; 255
 dfc:	08 95       	ret

00000dfe <__fp_split3>:
 dfe:	57 fd       	sbrc	r21, 7
 e00:	90 58       	subi	r25, 0x80	; 128
 e02:	44 0f       	add	r20, r20
 e04:	55 1f       	adc	r21, r21
 e06:	59 f0       	breq	.+22     	; 0xe1e <__fp_splitA+0x10>
 e08:	5f 3f       	cpi	r21, 0xFF	; 255
 e0a:	71 f0       	breq	.+28     	; 0xe28 <__fp_splitA+0x1a>
 e0c:	47 95       	ror	r20

00000e0e <__fp_splitA>:
 e0e:	88 0f       	add	r24, r24
 e10:	97 fb       	bst	r25, 7
 e12:	99 1f       	adc	r25, r25
 e14:	61 f0       	breq	.+24     	; 0xe2e <__fp_splitA+0x20>
 e16:	9f 3f       	cpi	r25, 0xFF	; 255
 e18:	79 f0       	breq	.+30     	; 0xe38 <__fp_splitA+0x2a>
 e1a:	87 95       	ror	r24
 e1c:	08 95       	ret
 e1e:	12 16       	cp	r1, r18
 e20:	13 06       	cpc	r1, r19
 e22:	14 06       	cpc	r1, r20
 e24:	55 1f       	adc	r21, r21
 e26:	f2 cf       	rjmp	.-28     	; 0xe0c <__fp_split3+0xe>
 e28:	46 95       	lsr	r20
 e2a:	f1 df       	rcall	.-30     	; 0xe0e <__fp_splitA>
 e2c:	08 c0       	rjmp	.+16     	; 0xe3e <__fp_splitA+0x30>
 e2e:	16 16       	cp	r1, r22
 e30:	17 06       	cpc	r1, r23
 e32:	18 06       	cpc	r1, r24
 e34:	99 1f       	adc	r25, r25
 e36:	f1 cf       	rjmp	.-30     	; 0xe1a <__fp_splitA+0xc>
 e38:	86 95       	lsr	r24
 e3a:	71 05       	cpc	r23, r1
 e3c:	61 05       	cpc	r22, r1
 e3e:	08 94       	sec
 e40:	08 95       	ret

00000e42 <__fp_zero>:
 e42:	e8 94       	clt

00000e44 <__fp_szero>:
 e44:	bb 27       	eor	r27, r27
 e46:	66 27       	eor	r22, r22
 e48:	77 27       	eor	r23, r23
 e4a:	cb 01       	movw	r24, r22
 e4c:	97 f9       	bld	r25, 7
 e4e:	08 95       	ret

00000e50 <__gesf2>:
 e50:	8a df       	rcall	.-236    	; 0xd66 <__fp_cmp>
 e52:	08 f4       	brcc	.+2      	; 0xe56 <__gesf2+0x6>
 e54:	8f ef       	ldi	r24, 0xFF	; 255
 e56:	08 95       	ret

00000e58 <__mulsf3>:
 e58:	0b d0       	rcall	.+22     	; 0xe70 <__mulsf3x>
 e5a:	c0 cf       	rjmp	.-128    	; 0xddc <__fp_round>
 e5c:	b1 df       	rcall	.-158    	; 0xdc0 <__fp_pscA>
 e5e:	28 f0       	brcs	.+10     	; 0xe6a <__mulsf3+0x12>
 e60:	b6 df       	rcall	.-148    	; 0xdce <__fp_pscB>
 e62:	18 f0       	brcs	.+6      	; 0xe6a <__mulsf3+0x12>
 e64:	95 23       	and	r25, r21
 e66:	09 f0       	breq	.+2      	; 0xe6a <__mulsf3+0x12>
 e68:	a2 cf       	rjmp	.-188    	; 0xdae <__fp_inf>
 e6a:	a7 cf       	rjmp	.-178    	; 0xdba <__fp_nan>
 e6c:	11 24       	eor	r1, r1
 e6e:	ea cf       	rjmp	.-44     	; 0xe44 <__fp_szero>

00000e70 <__mulsf3x>:
 e70:	c6 df       	rcall	.-116    	; 0xdfe <__fp_split3>
 e72:	a0 f3       	brcs	.-24     	; 0xe5c <__mulsf3+0x4>

00000e74 <__mulsf3_pse>:
 e74:	95 9f       	mul	r25, r21
 e76:	d1 f3       	breq	.-12     	; 0xe6c <__mulsf3+0x14>
 e78:	95 0f       	add	r25, r21
 e7a:	50 e0       	ldi	r21, 0x00	; 0
 e7c:	55 1f       	adc	r21, r21
 e7e:	62 9f       	mul	r22, r18
 e80:	f0 01       	movw	r30, r0
 e82:	72 9f       	mul	r23, r18
 e84:	bb 27       	eor	r27, r27
 e86:	f0 0d       	add	r31, r0
 e88:	b1 1d       	adc	r27, r1
 e8a:	63 9f       	mul	r22, r19
 e8c:	aa 27       	eor	r26, r26
 e8e:	f0 0d       	add	r31, r0
 e90:	b1 1d       	adc	r27, r1
 e92:	aa 1f       	adc	r26, r26
 e94:	64 9f       	mul	r22, r20
 e96:	66 27       	eor	r22, r22
 e98:	b0 0d       	add	r27, r0
 e9a:	a1 1d       	adc	r26, r1
 e9c:	66 1f       	adc	r22, r22
 e9e:	82 9f       	mul	r24, r18
 ea0:	22 27       	eor	r18, r18
 ea2:	b0 0d       	add	r27, r0
 ea4:	a1 1d       	adc	r26, r1
 ea6:	62 1f       	adc	r22, r18
 ea8:	73 9f       	mul	r23, r19
 eaa:	b0 0d       	add	r27, r0
 eac:	a1 1d       	adc	r26, r1
 eae:	62 1f       	adc	r22, r18
 eb0:	83 9f       	mul	r24, r19
 eb2:	a0 0d       	add	r26, r0
 eb4:	61 1d       	adc	r22, r1
 eb6:	22 1f       	adc	r18, r18
 eb8:	74 9f       	mul	r23, r20
 eba:	33 27       	eor	r19, r19
 ebc:	a0 0d       	add	r26, r0
 ebe:	61 1d       	adc	r22, r1
 ec0:	23 1f       	adc	r18, r19
 ec2:	84 9f       	mul	r24, r20
 ec4:	60 0d       	add	r22, r0
 ec6:	21 1d       	adc	r18, r1
 ec8:	82 2f       	mov	r24, r18
 eca:	76 2f       	mov	r23, r22
 ecc:	6a 2f       	mov	r22, r26
 ece:	11 24       	eor	r1, r1
 ed0:	9f 57       	subi	r25, 0x7F	; 127
 ed2:	50 40       	sbci	r21, 0x00	; 0
 ed4:	8a f0       	brmi	.+34     	; 0xef8 <__mulsf3_pse+0x84>
 ed6:	e1 f0       	breq	.+56     	; 0xf10 <__mulsf3_pse+0x9c>
 ed8:	88 23       	and	r24, r24
 eda:	4a f0       	brmi	.+18     	; 0xeee <__mulsf3_pse+0x7a>
 edc:	ee 0f       	add	r30, r30
 ede:	ff 1f       	adc	r31, r31
 ee0:	bb 1f       	adc	r27, r27
 ee2:	66 1f       	adc	r22, r22
 ee4:	77 1f       	adc	r23, r23
 ee6:	88 1f       	adc	r24, r24
 ee8:	91 50       	subi	r25, 0x01	; 1
 eea:	50 40       	sbci	r21, 0x00	; 0
 eec:	a9 f7       	brne	.-22     	; 0xed8 <__mulsf3_pse+0x64>
 eee:	9e 3f       	cpi	r25, 0xFE	; 254
 ef0:	51 05       	cpc	r21, r1
 ef2:	70 f0       	brcs	.+28     	; 0xf10 <__mulsf3_pse+0x9c>
 ef4:	5c cf       	rjmp	.-328    	; 0xdae <__fp_inf>
 ef6:	a6 cf       	rjmp	.-180    	; 0xe44 <__fp_szero>
 ef8:	5f 3f       	cpi	r21, 0xFF	; 255
 efa:	ec f3       	brlt	.-6      	; 0xef6 <__mulsf3_pse+0x82>
 efc:	98 3e       	cpi	r25, 0xE8	; 232
 efe:	dc f3       	brlt	.-10     	; 0xef6 <__mulsf3_pse+0x82>
 f00:	86 95       	lsr	r24
 f02:	77 95       	ror	r23
 f04:	67 95       	ror	r22
 f06:	b7 95       	ror	r27
 f08:	f7 95       	ror	r31
 f0a:	e7 95       	ror	r30
 f0c:	9f 5f       	subi	r25, 0xFF	; 255
 f0e:	c1 f7       	brne	.-16     	; 0xf00 <__mulsf3_pse+0x8c>
 f10:	fe 2b       	or	r31, r30
 f12:	88 0f       	add	r24, r24
 f14:	91 1d       	adc	r25, r1
 f16:	96 95       	lsr	r25
 f18:	87 95       	ror	r24
 f1a:	97 f9       	bld	r25, 7
 f1c:	08 95       	ret

00000f1e <__udivmodsi4>:
 f1e:	a1 e2       	ldi	r26, 0x21	; 33
 f20:	1a 2e       	mov	r1, r26
 f22:	aa 1b       	sub	r26, r26
 f24:	bb 1b       	sub	r27, r27
 f26:	fd 01       	movw	r30, r26
 f28:	0d c0       	rjmp	.+26     	; 0xf44 <__udivmodsi4_ep>

00000f2a <__udivmodsi4_loop>:
 f2a:	aa 1f       	adc	r26, r26
 f2c:	bb 1f       	adc	r27, r27
 f2e:	ee 1f       	adc	r30, r30
 f30:	ff 1f       	adc	r31, r31
 f32:	a2 17       	cp	r26, r18
 f34:	b3 07       	cpc	r27, r19
 f36:	e4 07       	cpc	r30, r20
 f38:	f5 07       	cpc	r31, r21
 f3a:	20 f0       	brcs	.+8      	; 0xf44 <__udivmodsi4_ep>
 f3c:	a2 1b       	sub	r26, r18
 f3e:	b3 0b       	sbc	r27, r19
 f40:	e4 0b       	sbc	r30, r20
 f42:	f5 0b       	sbc	r31, r21

00000f44 <__udivmodsi4_ep>:
 f44:	66 1f       	adc	r22, r22
 f46:	77 1f       	adc	r23, r23
 f48:	88 1f       	adc	r24, r24
 f4a:	99 1f       	adc	r25, r25
 f4c:	1a 94       	dec	r1
 f4e:	69 f7       	brne	.-38     	; 0xf2a <__udivmodsi4_loop>
 f50:	60 95       	com	r22
 f52:	70 95       	com	r23
 f54:	80 95       	com	r24
 f56:	90 95       	com	r25
 f58:	9b 01       	movw	r18, r22
 f5a:	ac 01       	movw	r20, r24
 f5c:	bd 01       	movw	r22, r26
 f5e:	cf 01       	movw	r24, r30
 f60:	08 95       	ret

00000f62 <__tablejump2__>:
 f62:	ee 0f       	add	r30, r30
 f64:	ff 1f       	adc	r31, r31
 f66:	88 1f       	adc	r24, r24
 f68:	8b bf       	out	0x3b, r24	; 59
 f6a:	07 90       	elpm	r0, Z+
 f6c:	f6 91       	elpm	r31, Z
 f6e:	e0 2d       	mov	r30, r0
 f70:	19 94       	eijmp

00000f72 <__itoa_ncheck>:
 f72:	bb 27       	eor	r27, r27
 f74:	4a 30       	cpi	r20, 0x0A	; 10
 f76:	31 f4       	brne	.+12     	; 0xf84 <__itoa_ncheck+0x12>
 f78:	99 23       	and	r25, r25
 f7a:	22 f4       	brpl	.+8      	; 0xf84 <__itoa_ncheck+0x12>
 f7c:	bd e2       	ldi	r27, 0x2D	; 45
 f7e:	90 95       	com	r25
 f80:	81 95       	neg	r24
 f82:	9f 4f       	sbci	r25, 0xFF	; 255
 f84:	01 c0       	rjmp	.+2      	; 0xf88 <__utoa_common>

00000f86 <__utoa_ncheck>:
 f86:	bb 27       	eor	r27, r27

00000f88 <__utoa_common>:
 f88:	fb 01       	movw	r30, r22
 f8a:	55 27       	eor	r21, r21
 f8c:	aa 27       	eor	r26, r26
 f8e:	88 0f       	add	r24, r24
 f90:	99 1f       	adc	r25, r25
 f92:	aa 1f       	adc	r26, r26
 f94:	a4 17       	cp	r26, r20
 f96:	10 f0       	brcs	.+4      	; 0xf9c <__utoa_common+0x14>
 f98:	a4 1b       	sub	r26, r20
 f9a:	83 95       	inc	r24
 f9c:	50 51       	subi	r21, 0x10	; 16
 f9e:	b9 f7       	brne	.-18     	; 0xf8e <__utoa_common+0x6>
 fa0:	a0 5d       	subi	r26, 0xD0	; 208
 fa2:	aa 33       	cpi	r26, 0x3A	; 58
 fa4:	08 f0       	brcs	.+2      	; 0xfa8 <__utoa_common+0x20>
 fa6:	a9 5d       	subi	r26, 0xD9	; 217
 fa8:	a1 93       	st	Z+, r26
 faa:	00 97       	sbiw	r24, 0x00	; 0
 fac:	79 f7       	brne	.-34     	; 0xf8c <__utoa_common+0x4>
 fae:	b1 11       	cpse	r27, r1
 fb0:	b1 93       	st	Z+, r27
 fb2:	11 92       	st	Z+, r1
 fb4:	cb 01       	movw	r24, r22
 fb6:	00 c0       	rjmp	.+0      	; 0xfb8 <strrev>

00000fb8 <strrev>:
 fb8:	dc 01       	movw	r26, r24
 fba:	fc 01       	movw	r30, r24
 fbc:	67 2f       	mov	r22, r23
 fbe:	71 91       	ld	r23, Z+
 fc0:	77 23       	and	r23, r23
 fc2:	e1 f7       	brne	.-8      	; 0xfbc <strrev+0x4>
 fc4:	32 97       	sbiw	r30, 0x02	; 2
 fc6:	04 c0       	rjmp	.+8      	; 0xfd0 <strrev+0x18>
 fc8:	7c 91       	ld	r23, X
 fca:	6d 93       	st	X+, r22
 fcc:	70 83       	st	Z, r23
 fce:	62 91       	ld	r22, -Z
 fd0:	ae 17       	cp	r26, r30
 fd2:	bf 07       	cpc	r27, r31
 fd4:	c8 f3       	brcs	.-14     	; 0xfc8 <strrev+0x10>
 fd6:	08 95       	ret

00000fd8 <_exit>:
 fd8:	f8 94       	cli

00000fda <__stop_program>:
 fda:	ff cf       	rjmp	.-2      	; 0xfda <__stop_program>
