
PRJ1-IKT5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  0000049e  00000532  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000049e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800210  00800210  00000542  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000140f  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ebf  00000000  00000000  00001a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000077d  00000000  00000000  0000295a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  000030d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b2  00000000  00000000  00003260  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c4  00000000  00000000  00003a12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003cd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7b c0       	rjmp	.+246    	; 0xf8 <__ctors_end>
   2:	00 00       	nop
   4:	98 c0       	rjmp	.+304    	; 0x136 <__bad_interrupt>
   6:	00 00       	nop
   8:	96 c0       	rjmp	.+300    	; 0x136 <__bad_interrupt>
   a:	00 00       	nop
   c:	94 c0       	rjmp	.+296    	; 0x136 <__bad_interrupt>
   e:	00 00       	nop
  10:	92 c0       	rjmp	.+292    	; 0x136 <__bad_interrupt>
  12:	00 00       	nop
  14:	97 c0       	rjmp	.+302    	; 0x144 <__vector_5>
  16:	00 00       	nop
  18:	8e c0       	rjmp	.+284    	; 0x136 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8c c0       	rjmp	.+280    	; 0x136 <__bad_interrupt>
  1e:	00 00       	nop
  20:	8a c0       	rjmp	.+276    	; 0x136 <__bad_interrupt>
  22:	00 00       	nop
  24:	88 c0       	rjmp	.+272    	; 0x136 <__bad_interrupt>
  26:	00 00       	nop
  28:	86 c0       	rjmp	.+268    	; 0x136 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	84 c0       	rjmp	.+264    	; 0x136 <__bad_interrupt>
  2e:	00 00       	nop
  30:	82 c0       	rjmp	.+260    	; 0x136 <__bad_interrupt>
  32:	00 00       	nop
  34:	80 c0       	rjmp	.+256    	; 0x136 <__bad_interrupt>
  36:	00 00       	nop
  38:	7e c0       	rjmp	.+252    	; 0x136 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7c c0       	rjmp	.+248    	; 0x136 <__bad_interrupt>
  3e:	00 00       	nop
  40:	7a c0       	rjmp	.+244    	; 0x136 <__bad_interrupt>
  42:	00 00       	nop
  44:	93 c0       	rjmp	.+294    	; 0x16c <__vector_17>
  46:	00 00       	nop
  48:	76 c0       	rjmp	.+236    	; 0x136 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	74 c0       	rjmp	.+232    	; 0x136 <__bad_interrupt>
  4e:	00 00       	nop
  50:	72 c0       	rjmp	.+228    	; 0x136 <__bad_interrupt>
  52:	00 00       	nop
  54:	70 c0       	rjmp	.+224    	; 0x136 <__bad_interrupt>
  56:	00 00       	nop
  58:	6e c0       	rjmp	.+220    	; 0x136 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6c c0       	rjmp	.+216    	; 0x136 <__bad_interrupt>
  5e:	00 00       	nop
  60:	6a c0       	rjmp	.+212    	; 0x136 <__bad_interrupt>
  62:	00 00       	nop
  64:	68 c0       	rjmp	.+208    	; 0x136 <__bad_interrupt>
  66:	00 00       	nop
  68:	66 c0       	rjmp	.+204    	; 0x136 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	64 c0       	rjmp	.+200    	; 0x136 <__bad_interrupt>
  6e:	00 00       	nop
  70:	62 c0       	rjmp	.+196    	; 0x136 <__bad_interrupt>
  72:	00 00       	nop
  74:	60 c0       	rjmp	.+192    	; 0x136 <__bad_interrupt>
  76:	00 00       	nop
  78:	5e c0       	rjmp	.+188    	; 0x136 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	5c c0       	rjmp	.+184    	; 0x136 <__bad_interrupt>
  7e:	00 00       	nop
  80:	5a c0       	rjmp	.+180    	; 0x136 <__bad_interrupt>
  82:	00 00       	nop
  84:	58 c0       	rjmp	.+176    	; 0x136 <__bad_interrupt>
  86:	00 00       	nop
  88:	56 c0       	rjmp	.+172    	; 0x136 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	54 c0       	rjmp	.+168    	; 0x136 <__bad_interrupt>
  8e:	00 00       	nop
  90:	52 c0       	rjmp	.+164    	; 0x136 <__bad_interrupt>
  92:	00 00       	nop
  94:	50 c0       	rjmp	.+160    	; 0x136 <__bad_interrupt>
  96:	00 00       	nop
  98:	4e c0       	rjmp	.+156    	; 0x136 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	4c c0       	rjmp	.+152    	; 0x136 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	4a c0       	rjmp	.+148    	; 0x136 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	48 c0       	rjmp	.+144    	; 0x136 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	46 c0       	rjmp	.+140    	; 0x136 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	44 c0       	rjmp	.+136    	; 0x136 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	42 c0       	rjmp	.+132    	; 0x136 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	40 c0       	rjmp	.+128    	; 0x136 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	3e c0       	rjmp	.+124    	; 0x136 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	3c c0       	rjmp	.+120    	; 0x136 <__bad_interrupt>
  be:	00 00       	nop
  c0:	3a c0       	rjmp	.+116    	; 0x136 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	38 c0       	rjmp	.+112    	; 0x136 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	36 c0       	rjmp	.+108    	; 0x136 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	34 c0       	rjmp	.+104    	; 0x136 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	32 c0       	rjmp	.+100    	; 0x136 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	30 c0       	rjmp	.+96     	; 0x136 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	2e c0       	rjmp	.+92     	; 0x136 <__bad_interrupt>
  da:	00 00       	nop
  dc:	2c c0       	rjmp	.+88     	; 0x136 <__bad_interrupt>
  de:	00 00       	nop
  e0:	2a c0       	rjmp	.+84     	; 0x136 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	f3 00       	.word	0x00f3	; ????
  e6:	fb 00       	.word	0x00fb	; ????
  e8:	03 01       	movw	r0, r6
  ea:	0b 01       	movw	r0, r22
  ec:	13 01       	movw	r2, r6
  ee:	1b 01       	movw	r2, r22
  f0:	23 01       	movw	r4, r6
  f2:	2b 01       	movw	r4, r22
  f4:	33 01       	movw	r6, r6
  f6:	3b 01       	movw	r6, r22

000000f8 <__ctors_end>:
  f8:	11 24       	eor	r1, r1
  fa:	1f be       	out	0x3f, r1	; 63
  fc:	cf ef       	ldi	r28, 0xFF	; 255
  fe:	d1 e2       	ldi	r29, 0x21	; 33
 100:	de bf       	out	0x3e, r29	; 62
 102:	cd bf       	out	0x3d, r28	; 61
 104:	00 e0       	ldi	r16, 0x00	; 0
 106:	0c bf       	out	0x3c, r16	; 60

00000108 <__do_copy_data>:
 108:	12 e0       	ldi	r17, 0x02	; 2
 10a:	a0 e0       	ldi	r26, 0x00	; 0
 10c:	b2 e0       	ldi	r27, 0x02	; 2
 10e:	ee e9       	ldi	r30, 0x9E	; 158
 110:	f4 e0       	ldi	r31, 0x04	; 4
 112:	00 e0       	ldi	r16, 0x00	; 0
 114:	0b bf       	out	0x3b, r16	; 59
 116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x14>
 118:	07 90       	elpm	r0, Z+
 11a:	0d 92       	st	X+, r0
 11c:	a0 31       	cpi	r26, 0x10	; 16
 11e:	b1 07       	cpc	r27, r17
 120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0x10>

00000122 <__do_clear_bss>:
 122:	22 e0       	ldi	r18, 0x02	; 2
 124:	a0 e1       	ldi	r26, 0x10	; 16
 126:	b2 e0       	ldi	r27, 0x02	; 2
 128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
 12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
 12c:	a2 31       	cpi	r26, 0x12	; 18
 12e:	b2 07       	cpc	r27, r18
 130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
 132:	39 d0       	rcall	.+114    	; 0x1a6 <main>
 134:	b2 c1       	rjmp	.+868    	; 0x49a <_exit>

00000136 <__bad_interrupt>:
 136:	64 cf       	rjmp	.-312    	; 0x0 <__vectors>

00000138 <_Z11initCounterv>:
#include "Counter.h"
#include <avr/interrupt.h>


void initCounter(){
	EIMSK = 0b00010000; // INT 4 active - BEN 2.
 138:	80 e1       	ldi	r24, 0x10	; 16
 13a:	8d bb       	out	0x1d, r24	; 29
	EICRB = 0b00000011; // INT 4 rising edge.
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
 142:	08 95       	ret

00000144 <__vector_5>:

bool newCount = true;

volatile unsigned char MotorMode = 0;

ISR(INT4_vect){ //On rising edge, count + 1
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 93       	push	r24
	newCount = true;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
	counter++;
 156:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <counter>
 15a:	8f 5f       	subi	r24, 0xFF	; 255
 15c:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <counter>
}
 160:	8f 91       	pop	r24
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <__vector_17>:


ISR(TIMER1_COMPA_vect){
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	8f 93       	push	r24
	                                                                                                                                                                        
	switch(MotorMode){
 178:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__data_end>
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	31 f0       	breq	.+12     	; 0x18c <__vector_17+0x20>
 180:	18 f0       	brcs	.+6      	; 0x188 <__vector_17+0x1c>
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	31 f0       	breq	.+12     	; 0x192 <__vector_17+0x26>
 186:	08 c0       	rjmp	.+16     	; 0x198 <__vector_17+0x2c>
		case 0:
			PORTA = 0b00000000;
 188:	12 b8       	out	0x02, r1	; 2
		break;
 18a:	07 c0       	rjmp	.+14     	; 0x19a <__vector_17+0x2e>
		case 1:
			PORTA = 0b00000001;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	82 b9       	out	0x02, r24	; 2
		break;
 190:	04 c0       	rjmp	.+8      	; 0x19a <__vector_17+0x2e>
		case 2:
			PORTA = 0b00000010;
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	82 b9       	out	0x02, r24	; 2
		break;
 196:	01 c0       	rjmp	.+2      	; 0x19a <__vector_17+0x2e>
		default:
			PORTA = 0b00000000;
 198:	12 b8       	out	0x02, r1	; 2
		break;
			
	}
}
 19a:	8f 91       	pop	r24
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <main>:

int main(void)
{
	sei();
 1a6:	78 94       	sei
	initCounter();
 1a8:	c7 df       	rcall	.-114    	; 0x138 <_Z11initCounterv>
	initMotor();
 1aa:	7c d0       	rcall	.+248    	; 0x2a4 <_Z9initMotorv>
 1ac:	20 e0       	ldi	r18, 0x00	; 0
	InitUART(9600,8,false);
 1ae:	48 e0       	ldi	r20, 0x08	; 8
 1b0:	60 e8       	ldi	r22, 0x80	; 128
 1b2:	75 e2       	ldi	r23, 0x25	; 37
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	8b d0       	rcall	.+278    	; 0x2d0 <_Z8InitUARTmhb>
 1ba:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <counter>
	counter = 0;
 1be:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
	while(1){
		
		if(newCount){
 1c2:	88 23       	and	r24, r24
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <main+0x22>
 1c6:	64 c0       	rjmp	.+200    	; 0x290 <main+0xea>
 1c8:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <counter>
			switch(counter){
 1cc:	8e 2f       	mov	r24, r30
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	fc 01       	movw	r30, r24
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	ea 30       	cpi	r30, 0x0A	; 10
 1d6:	f1 05       	cpc	r31, r1
 1d8:	08 f0       	brcs	.+2      	; 0x1dc <main+0x36>
 1da:	55 c0       	rjmp	.+170    	; 0x286 <main+0xe0>
 1dc:	88 27       	eor	r24, r24
 1de:	ee 58       	subi	r30, 0x8E	; 142
 1e0:	ff 4f       	sbci	r31, 0xFF	; 255
 1e2:	8f 4f       	sbci	r24, 0xFF	; 255
 1e4:	1f c1       	rjmp	.+574    	; 0x424 <__tablejump2__>
 1e6:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				case 1:
					newCount = false;
					SendInteger(1);
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	dd d0       	rcall	.+442    	; 0x3aa <_Z11SendIntegeri>
					SendChar('\n');
 1f0:	8a e0       	ldi	r24, 0x0A	; 10
 1f2:	c5 d0       	rcall	.+394    	; 0x37e <_Z8SendCharc>
					break;
 1f4:	4d c0       	rjmp	.+154    	; 0x290 <main+0xea>
				case 2:
					newCount = false;
 1f6:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
					SendInteger(2);
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	d5 d0       	rcall	.+426    	; 0x3aa <_Z11SendIntegeri>
					SendChar('\n');
 200:	8a e0       	ldi	r24, 0x0A	; 10
 202:	bd d0       	rcall	.+378    	; 0x37e <_Z8SendCharc>
					break;
 204:	45 c0       	rjmp	.+138    	; 0x290 <main+0xea>
					
				case 3:
					newCount = false;
 206:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
					SendInteger(3);
 20a:	83 e0       	ldi	r24, 0x03	; 3
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	cd d0       	rcall	.+410    	; 0x3aa <_Z11SendIntegeri>
					SendChar('\n');
 210:	8a e0       	ldi	r24, 0x0A	; 10
 212:	b5 d0       	rcall	.+362    	; 0x37e <_Z8SendCharc>
					break;
 214:	3d c0       	rjmp	.+122    	; 0x290 <main+0xea>
				case 4:
					newCount = false;
 216:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
					SendInteger(4);
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	90 e0       	ldi	r25, 0x00	; 0
					SendChar('\n');
 21e:	c5 d0       	rcall	.+394    	; 0x3aa <_Z11SendIntegeri>
 220:	8a e0       	ldi	r24, 0x0A	; 10
 222:	ad d0       	rcall	.+346    	; 0x37e <_Z8SendCharc>
					break;
 224:	35 c0       	rjmp	.+106    	; 0x290 <main+0xea>
				case 5:
					newCount = false;
 226:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
					SendInteger(5);
 22a:	85 e0       	ldi	r24, 0x05	; 5
 22c:	90 e0       	ldi	r25, 0x00	; 0
					SendChar('\n');
 22e:	bd d0       	rcall	.+378    	; 0x3aa <_Z11SendIntegeri>
 230:	8a e0       	ldi	r24, 0x0A	; 10
					break;
 232:	a5 d0       	rcall	.+330    	; 0x37e <_Z8SendCharc>
				case 6:
					newCount = false;
 234:	2d c0       	rjmp	.+90     	; 0x290 <main+0xea>
					SendInteger(6);
 236:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
 23a:	86 e0       	ldi	r24, 0x06	; 6
 23c:	90 e0       	ldi	r25, 0x00	; 0
					SendChar('\n');
 23e:	b5 d0       	rcall	.+362    	; 0x3aa <_Z11SendIntegeri>
 240:	8a e0       	ldi	r24, 0x0A	; 10
					break;
 242:	9d d0       	rcall	.+314    	; 0x37e <_Z8SendCharc>
				case 7:
					newCount = false;
 244:	25 c0       	rjmp	.+74     	; 0x290 <main+0xea>
 246:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
					SendInteger(7);
 24a:	87 e0       	ldi	r24, 0x07	; 7
 24c:	90 e0       	ldi	r25, 0x00	; 0
					SendChar('\n');
 24e:	ad d0       	rcall	.+346    	; 0x3aa <_Z11SendIntegeri>
 250:	8a e0       	ldi	r24, 0x0A	; 10
					break;
 252:	95 d0       	rcall	.+298    	; 0x37e <_Z8SendCharc>
				case 8:
					newCount = false;
 254:	1d c0       	rjmp	.+58     	; 0x290 <main+0xea>
 256:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
					SendInteger(8);
 25a:	88 e0       	ldi	r24, 0x08	; 8
					SendChar('\n');
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	a5 d0       	rcall	.+330    	; 0x3aa <_Z11SendIntegeri>
 260:	8a e0       	ldi	r24, 0x0A	; 10
					break;
 262:	8d d0       	rcall	.+282    	; 0x37e <_Z8SendCharc>
				case 9:
					newCount = false;
 264:	15 c0       	rjmp	.+42     	; 0x290 <main+0xea>
					SendInteger(9);
 266:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
 26a:	89 e0       	ldi	r24, 0x09	; 9
 26c:	90 e0       	ldi	r25, 0x00	; 0
					SendChar('\n');
 26e:	9d d0       	rcall	.+314    	; 0x3aa <_Z11SendIntegeri>
 270:	8a e0       	ldi	r24, 0x0A	; 10
 272:	85 d0       	rcall	.+266    	; 0x37e <_Z8SendCharc>
					break;
 274:	0d c0       	rjmp	.+26     	; 0x290 <main+0xea>
				case 10:
					newCount = false;
 276:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
					SendInteger(10);
 27a:	8a e0       	ldi	r24, 0x0A	; 10
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	95 d0       	rcall	.+298    	; 0x3aa <_Z11SendIntegeri>
 280:	8a e0       	ldi	r24, 0x0A	; 10
					SendChar('\n');
 282:	7d d0       	rcall	.+250    	; 0x37e <_Z8SendCharc>
 284:	05 c0       	rjmp	.+10     	; 0x290 <main+0xea>
 286:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
					break;
				default:
				
					newCount = false;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	92 e0       	ldi	r25, 0x02	; 2
					SendString("Out of bounds\n");
 28e:	7f d0       	rcall	.+254    	; 0x38e <_Z10SendStringPc>
 290:	2f ef       	ldi	r18, 0xFF	; 255
 292:	81 ee       	ldi	r24, 0xE1	; 225
 294:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 296:	21 50       	subi	r18, 0x01	; 1
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <main+0xf0>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <main+0xfa>
 2a0:	00 00       	nop
 2a2:	8d cf       	rjmp	.-230    	; 0x1be <main+0x18>

000002a4 <_Z9initMotorv>:
#include "MotorDriver.h"
#include <stdio.h>
#include <avr/io.h>

void initMotor(){
	TCCR1A = 0b11000010; // Set compare mode for OCR1A
 2a4:	82 ec       	ldi	r24, 0xC2	; 194
 2a6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0b00011101; // Set Mode 14, FAST PWM TOP = ICR1 & 1024 prescaler
 2aa:	8d e1       	ldi	r24, 0x1D	; 29
 2ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	TIMSK1 = 0b00000010;
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
	ICR1 = 156; // TOP value
 2b6:	8c e9       	ldi	r24, 0x9C	; 156
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 2be:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	OCR1A = 0; // Compare value, 0 = 0% duty cycle, 156 = 100% duty cycle
 2c2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 2c6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	DDRA = 0xFF; // Make pin a ports outputs, so we can trigger the H-Bridge.
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	81 b9       	out	0x01, r24	; 1
 2ce:	08 95       	ret

000002d0 <_Z8InitUARTmhb>:
{
   while(!(UCSR0A & (1<<RXC0))){
	   
   }
   return UDR0;
}
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	22 23       	and	r18, r18
 2d6:	29 f0       	breq	.+10     	; 0x2e2 <_Z8InitUARTmhb+0x12>
 2d8:	28 e9       	ldi	r18, 0x98	; 152
 2da:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 2de:	78 94       	sei
 2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <_Z8InitUARTmhb+0x18>
 2e2:	28 e1       	ldi	r18, 0x18	; 24
 2e4:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 2e8:	8b 01       	movw	r16, r22
 2ea:	9c 01       	movw	r18, r24
 2ec:	0c 52       	subi	r16, 0x2C	; 44
 2ee:	11 40       	sbci	r17, 0x01	; 1
 2f0:	21 09       	sbc	r18, r1
 2f2:	31 09       	sbc	r19, r1
 2f4:	05 3d       	cpi	r16, 0xD5	; 213
 2f6:	10 4c       	sbci	r17, 0xC0	; 192
 2f8:	21 40       	sbci	r18, 0x01	; 1
 2fa:	31 05       	cpc	r19, r1
 2fc:	08 f5       	brcc	.+66     	; 0x340 <_Z8InitUARTmhb+0x70>
 2fe:	2b ef       	ldi	r18, 0xFB	; 251
 300:	24 0f       	add	r18, r20
 302:	24 30       	cpi	r18, 0x04	; 4
 304:	e8 f4       	brcc	.+58     	; 0x340 <_Z8InitUARTmhb+0x70>
 306:	46 30       	cpi	r20, 0x06	; 6
 308:	61 f0       	breq	.+24     	; 0x322 <_Z8InitUARTmhb+0x52>
 30a:	18 f4       	brcc	.+6      	; 0x312 <_Z8InitUARTmhb+0x42>
 30c:	45 30       	cpi	r20, 0x05	; 5
 30e:	31 f0       	breq	.+12     	; 0x31c <_Z8InitUARTmhb+0x4c>
 310:	14 c0       	rjmp	.+40     	; 0x33a <_Z8InitUARTmhb+0x6a>
 312:	47 30       	cpi	r20, 0x07	; 7
 314:	51 f0       	breq	.+20     	; 0x32a <_Z8InitUARTmhb+0x5a>
 316:	48 30       	cpi	r20, 0x08	; 8
 318:	61 f0       	breq	.+24     	; 0x332 <_Z8InitUARTmhb+0x62>
 31a:	0f c0       	rjmp	.+30     	; 0x33a <_Z8InitUARTmhb+0x6a>
 31c:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 320:	0f c0       	rjmp	.+30     	; 0x340 <_Z8InitUARTmhb+0x70>
 322:	22 e0       	ldi	r18, 0x02	; 2
 324:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 328:	0b c0       	rjmp	.+22     	; 0x340 <_Z8InitUARTmhb+0x70>
 32a:	24 e0       	ldi	r18, 0x04	; 4
 32c:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 330:	07 c0       	rjmp	.+14     	; 0x340 <_Z8InitUARTmhb+0x70>
 332:	26 e0       	ldi	r18, 0x06	; 6
 334:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 338:	03 c0       	rjmp	.+6      	; 0x340 <_Z8InitUARTmhb+0x70>
 33a:	26 e0       	ldi	r18, 0x06	; 6
 33c:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 340:	dc 01       	movw	r26, r24
 342:	cb 01       	movw	r24, r22
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	aa 1f       	adc	r26, r26
 34a:	bb 1f       	adc	r27, r27
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	aa 1f       	adc	r26, r26
 352:	bb 1f       	adc	r27, r27
 354:	9c 01       	movw	r18, r24
 356:	ad 01       	movw	r20, r26
 358:	22 0f       	add	r18, r18
 35a:	33 1f       	adc	r19, r19
 35c:	44 1f       	adc	r20, r20
 35e:	55 1f       	adc	r21, r21
 360:	22 0f       	add	r18, r18
 362:	33 1f       	adc	r19, r19
 364:	44 1f       	adc	r20, r20
 366:	55 1f       	adc	r21, r21
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	74 e2       	ldi	r23, 0x24	; 36
 36c:	84 ef       	ldi	r24, 0xF4	; 244
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	37 d0       	rcall	.+110    	; 0x3e0 <__udivmodsi4>
 372:	21 50       	subi	r18, 0x01	; 1
 374:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 378:	1f 91       	pop	r17
 37a:	0f 91       	pop	r16
 37c:	08 95       	ret

0000037e <_Z8SendCharc>:
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
   while(!(UCSR0A & (1<<UDRE0))){
 37e:	e0 ec       	ldi	r30, 0xC0	; 192
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	90 81       	ld	r25, Z
 384:	95 ff       	sbrs	r25, 5
 386:	fd cf       	rjmp	.-6      	; 0x382 <_Z8SendCharc+0x4>
	   
   }
   UDR0 = Tegn;
 388:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 38c:	08 95       	ret

0000038e <_Z10SendStringPc>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	ec 01       	movw	r28, r24
	while(*Streng != '\0'){
 394:	88 81       	ld	r24, Y
 396:	88 23       	and	r24, r24
 398:	29 f0       	breq	.+10     	; 0x3a4 <_Z10SendStringPc+0x16>
 39a:	21 96       	adiw	r28, 0x01	; 1
		SendChar(*Streng);
 39c:	f0 df       	rcall	.-32     	; 0x37e <_Z8SendCharc>
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
	while(*Streng != '\0'){
 39e:	89 91       	ld	r24, Y+
 3a0:	81 11       	cpse	r24, r1
 3a2:	fc cf       	rjmp	.-8      	; 0x39c <_Z10SendStringPc+0xe>
		SendChar(*Streng);
		Streng++;
	}
}
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <_Z11SendIntegeri>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The integer to be converted and sent. 
*************************************************************************/
void SendInteger(int Tal)
{
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
 3b2:	6e 97       	sbiw	r28, 0x1e	; 30
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	f8 94       	cli
 3b8:	de bf       	out	0x3e, r29	; 62
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3be:	4a e0       	ldi	r20, 0x0A	; 10
 3c0:	be 01       	movw	r22, r28
 3c2:	6f 5f       	subi	r22, 0xFF	; 255
 3c4:	7f 4f       	sbci	r23, 0xFF	; 255
 3c6:	36 d0       	rcall	.+108    	; 0x434 <__itoa_ncheck>
   char intStr[30];
   itoa(Tal, intStr, 10);
   SendString(intStr);
 3c8:	ce 01       	movw	r24, r28
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	e0 df       	rcall	.-64     	; 0x38e <_Z10SendStringPc>
}
 3ce:	6e 96       	adiw	r28, 0x1e	; 30
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	de bf       	out	0x3e, r29	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	cd bf       	out	0x3d, r28	; 61
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	08 95       	ret

000003e0 <__udivmodsi4>:
 3e0:	a1 e2       	ldi	r26, 0x21	; 33
 3e2:	1a 2e       	mov	r1, r26
 3e4:	aa 1b       	sub	r26, r26
 3e6:	bb 1b       	sub	r27, r27
 3e8:	fd 01       	movw	r30, r26
 3ea:	0d c0       	rjmp	.+26     	; 0x406 <__udivmodsi4_ep>

000003ec <__udivmodsi4_loop>:
 3ec:	aa 1f       	adc	r26, r26
 3ee:	bb 1f       	adc	r27, r27
 3f0:	ee 1f       	adc	r30, r30
 3f2:	ff 1f       	adc	r31, r31
 3f4:	a2 17       	cp	r26, r18
 3f6:	b3 07       	cpc	r27, r19
 3f8:	e4 07       	cpc	r30, r20
 3fa:	f5 07       	cpc	r31, r21
 3fc:	20 f0       	brcs	.+8      	; 0x406 <__udivmodsi4_ep>
 3fe:	a2 1b       	sub	r26, r18
 400:	b3 0b       	sbc	r27, r19
 402:	e4 0b       	sbc	r30, r20
 404:	f5 0b       	sbc	r31, r21

00000406 <__udivmodsi4_ep>:
 406:	66 1f       	adc	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	88 1f       	adc	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	1a 94       	dec	r1
 410:	69 f7       	brne	.-38     	; 0x3ec <__udivmodsi4_loop>
 412:	60 95       	com	r22
 414:	70 95       	com	r23
 416:	80 95       	com	r24
 418:	90 95       	com	r25
 41a:	9b 01       	movw	r18, r22
 41c:	ac 01       	movw	r20, r24
 41e:	bd 01       	movw	r22, r26
 420:	cf 01       	movw	r24, r30
 422:	08 95       	ret

00000424 <__tablejump2__>:
 424:	ee 0f       	add	r30, r30
 426:	ff 1f       	adc	r31, r31
 428:	88 1f       	adc	r24, r24
 42a:	8b bf       	out	0x3b, r24	; 59
 42c:	07 90       	elpm	r0, Z+
 42e:	f6 91       	elpm	r31, Z
 430:	e0 2d       	mov	r30, r0
 432:	19 94       	eijmp

00000434 <__itoa_ncheck>:
 434:	bb 27       	eor	r27, r27
 436:	4a 30       	cpi	r20, 0x0A	; 10
 438:	31 f4       	brne	.+12     	; 0x446 <__itoa_ncheck+0x12>
 43a:	99 23       	and	r25, r25
 43c:	22 f4       	brpl	.+8      	; 0x446 <__itoa_ncheck+0x12>
 43e:	bd e2       	ldi	r27, 0x2D	; 45
 440:	90 95       	com	r25
 442:	81 95       	neg	r24
 444:	9f 4f       	sbci	r25, 0xFF	; 255
 446:	01 c0       	rjmp	.+2      	; 0x44a <__utoa_common>

00000448 <__utoa_ncheck>:
 448:	bb 27       	eor	r27, r27

0000044a <__utoa_common>:
 44a:	fb 01       	movw	r30, r22
 44c:	55 27       	eor	r21, r21
 44e:	aa 27       	eor	r26, r26
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	aa 1f       	adc	r26, r26
 456:	a4 17       	cp	r26, r20
 458:	10 f0       	brcs	.+4      	; 0x45e <__utoa_common+0x14>
 45a:	a4 1b       	sub	r26, r20
 45c:	83 95       	inc	r24
 45e:	50 51       	subi	r21, 0x10	; 16
 460:	b9 f7       	brne	.-18     	; 0x450 <__utoa_common+0x6>
 462:	a0 5d       	subi	r26, 0xD0	; 208
 464:	aa 33       	cpi	r26, 0x3A	; 58
 466:	08 f0       	brcs	.+2      	; 0x46a <__utoa_common+0x20>
 468:	a9 5d       	subi	r26, 0xD9	; 217
 46a:	a1 93       	st	Z+, r26
 46c:	00 97       	sbiw	r24, 0x00	; 0
 46e:	79 f7       	brne	.-34     	; 0x44e <__utoa_common+0x4>
 470:	b1 11       	cpse	r27, r1
 472:	b1 93       	st	Z+, r27
 474:	11 92       	st	Z+, r1
 476:	cb 01       	movw	r24, r22
 478:	00 c0       	rjmp	.+0      	; 0x47a <strrev>

0000047a <strrev>:
 47a:	dc 01       	movw	r26, r24
 47c:	fc 01       	movw	r30, r24
 47e:	67 2f       	mov	r22, r23
 480:	71 91       	ld	r23, Z+
 482:	77 23       	and	r23, r23
 484:	e1 f7       	brne	.-8      	; 0x47e <strrev+0x4>
 486:	32 97       	sbiw	r30, 0x02	; 2
 488:	04 c0       	rjmp	.+8      	; 0x492 <strrev+0x18>
 48a:	7c 91       	ld	r23, X
 48c:	6d 93       	st	X+, r22
 48e:	70 83       	st	Z, r23
 490:	62 91       	ld	r22, -Z
 492:	ae 17       	cp	r26, r30
 494:	bf 07       	cpc	r27, r31
 496:	c8 f3       	brcs	.-14     	; 0x48a <strrev+0x10>
 498:	08 95       	ret

0000049a <_exit>:
 49a:	f8 94       	cli

0000049c <__stop_program>:
 49c:	ff cf       	rjmp	.-2      	; 0x49c <__stop_program>
