
PRJ1-IKT5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00001036  000010ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001036  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800202  00800202  000010cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002278  00000000  00000000  0000128c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fbb  00000000  00000000  00003504  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d90  00000000  00000000  000044bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  00005250  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d4  00000000  00000000  00005524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f16  00000000  00000000  00005df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00006d0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	9b c0       	rjmp	.+310    	; 0x13c <__bad_interrupt>
       6:	00 00       	nop
       8:	99 c0       	rjmp	.+306    	; 0x13c <__bad_interrupt>
       a:	00 00       	nop
       c:	97 c0       	rjmp	.+302    	; 0x13c <__bad_interrupt>
       e:	00 00       	nop
      10:	95 c0       	rjmp	.+298    	; 0x13c <__bad_interrupt>
      12:	00 00       	nop
      14:	f5 c0       	rjmp	.+490    	; 0x200 <__vector_5>
      16:	00 00       	nop
      18:	3c c1       	rjmp	.+632    	; 0x292 <__vector_6>
      1a:	00 00       	nop
      1c:	8f c0       	rjmp	.+286    	; 0x13c <__bad_interrupt>
      1e:	00 00       	nop
      20:	8d c0       	rjmp	.+282    	; 0x13c <__bad_interrupt>
      22:	00 00       	nop
      24:	8b c0       	rjmp	.+278    	; 0x13c <__bad_interrupt>
      26:	00 00       	nop
      28:	89 c0       	rjmp	.+274    	; 0x13c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	87 c0       	rjmp	.+270    	; 0x13c <__bad_interrupt>
      2e:	00 00       	nop
      30:	85 c0       	rjmp	.+266    	; 0x13c <__bad_interrupt>
      32:	00 00       	nop
      34:	83 c0       	rjmp	.+262    	; 0x13c <__bad_interrupt>
      36:	00 00       	nop
      38:	81 c0       	rjmp	.+258    	; 0x13c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7f c0       	rjmp	.+254    	; 0x13c <__bad_interrupt>
      3e:	00 00       	nop
      40:	7d c0       	rjmp	.+250    	; 0x13c <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c1       	rjmp	.+734    	; 0x324 <__vector_17>
      46:	00 00       	nop
      48:	79 c0       	rjmp	.+242    	; 0x13c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	77 c0       	rjmp	.+238    	; 0x13c <__bad_interrupt>
      4e:	00 00       	nop
      50:	75 c0       	rjmp	.+234    	; 0x13c <__bad_interrupt>
      52:	00 00       	nop
      54:	73 c0       	rjmp	.+230    	; 0x13c <__bad_interrupt>
      56:	00 00       	nop
      58:	71 c0       	rjmp	.+226    	; 0x13c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6f c0       	rjmp	.+222    	; 0x13c <__bad_interrupt>
      5e:	00 00       	nop
      60:	6d c0       	rjmp	.+218    	; 0x13c <__bad_interrupt>
      62:	00 00       	nop
      64:	6b c0       	rjmp	.+214    	; 0x13c <__bad_interrupt>
      66:	00 00       	nop
      68:	69 c0       	rjmp	.+210    	; 0x13c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	67 c0       	rjmp	.+206    	; 0x13c <__bad_interrupt>
      6e:	00 00       	nop
      70:	65 c0       	rjmp	.+202    	; 0x13c <__bad_interrupt>
      72:	00 00       	nop
      74:	63 c0       	rjmp	.+198    	; 0x13c <__bad_interrupt>
      76:	00 00       	nop
      78:	61 c0       	rjmp	.+194    	; 0x13c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5f c0       	rjmp	.+190    	; 0x13c <__bad_interrupt>
      7e:	00 00       	nop
      80:	7b c1       	rjmp	.+758    	; 0x378 <__vector_32>
      82:	00 00       	nop
      84:	5b c0       	rjmp	.+182    	; 0x13c <__bad_interrupt>
      86:	00 00       	nop
      88:	59 c0       	rjmp	.+178    	; 0x13c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	57 c0       	rjmp	.+174    	; 0x13c <__bad_interrupt>
      8e:	00 00       	nop
      90:	55 c0       	rjmp	.+170    	; 0x13c <__bad_interrupt>
      92:	00 00       	nop
      94:	53 c0       	rjmp	.+166    	; 0x13c <__bad_interrupt>
      96:	00 00       	nop
      98:	51 c0       	rjmp	.+162    	; 0x13c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4f c0       	rjmp	.+158    	; 0x13c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4d c0       	rjmp	.+154    	; 0x13c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4b c0       	rjmp	.+150    	; 0x13c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	49 c0       	rjmp	.+146    	; 0x13c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	47 c0       	rjmp	.+142    	; 0x13c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	45 c0       	rjmp	.+138    	; 0x13c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	43 c0       	rjmp	.+134    	; 0x13c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	41 c0       	rjmp	.+130    	; 0x13c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3f c0       	rjmp	.+126    	; 0x13c <__bad_interrupt>
      be:	00 00       	nop
      c0:	3d c0       	rjmp	.+122    	; 0x13c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3b c0       	rjmp	.+118    	; 0x13c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	39 c0       	rjmp	.+114    	; 0x13c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	37 c0       	rjmp	.+110    	; 0x13c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	35 c0       	rjmp	.+106    	; 0x13c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	33 c0       	rjmp	.+102    	; 0x13c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	31 c0       	rjmp	.+98     	; 0x13c <__bad_interrupt>
      da:	00 00       	nop
      dc:	2f c0       	rjmp	.+94     	; 0x13c <__bad_interrupt>
      de:	00 00       	nop
      e0:	2d c0       	rjmp	.+90     	; 0x13c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	33 02       	muls	r19, r19
      e6:	78 02       	muls	r23, r24
      e8:	a1 02       	muls	r26, r17
      ea:	cc 02       	muls	r28, r28
      ec:	f7 02       	muls	r31, r23
      ee:	22 03       	mulsu	r18, r18
      f0:	4d 03       	fmul	r20, r21
      f2:	81 03       	fmuls	r16, r17
      f4:	aa 03       	fmulsu	r18, r18
      f6:	b4 03       	fmuls	r19, r20
      f8:	ef 03       	fmulsu	r22, r23
      fa:	25 04       	cpc	r2, r5
      fc:	71 04       	cpc	r7, r1

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	e6 e3       	ldi	r30, 0x36	; 54
     116:	f0 e1       	ldi	r31, 0x10	; 16
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a2 30       	cpi	r26, 0x02	; 2
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	22 e0       	ldi	r18, 0x02	; 2
     12a:	a2 e0       	ldi	r26, 0x02	; 2
     12c:	b2 e0       	ldi	r27, 0x02	; 2
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	a6 30       	cpi	r26, 0x06	; 6
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	46 d1       	rcall	.+652    	; 0x3c6 <main>
     13a:	7b c7       	rjmp	.+3830   	; 0x1032 <_exit>

0000013c <__bad_interrupt>:
     13c:	61 cf       	rjmp	.-318    	; 0x0 <__vectors>

0000013e <_Z10bLightInitv>:
#include "BLightDriver.h"
#include <stdio.h>
#include <avr/io.h>

void bLightInit(void){
	DDRC = 0xFF;
     13e:	8f ef       	ldi	r24, 0xFF	; 255
     140:	87 b9       	out	0x07, r24	; 7
	TCCR3A = (0<<COM3A1)|(1<<COM3A0)|(0<<WGM31)|(1<<WGM30); // Set compare mode for OCR1A
     142:	81 e4       	ldi	r24, 0x41	; 65
     144:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = (0<<WGM33)|(0<<WGM32)|(1<<CS32)|(0<<CS31)|(0<<CS30); // Set Mode 1, PWM Phase correct 8-bit & 256 prescaler
     148:	84 e0       	ldi	r24, 0x04	; 4
     14a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	TIMSK3 = 0b00000010;
     14e:	82 e0       	ldi	r24, 0x02	; 2
     150:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
	OCR3A = 0;
     154:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     158:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     15c:	08 95       	ret

0000015e <_Z12bLightTogglev>:
}

void bLightToggle(void){
	
	PINC |= 0b00000101; // ben 35 og 37
     15e:	86 b1       	in	r24, 0x06	; 6
     160:	85 60       	ori	r24, 0x05	; 5
     162:	86 b9       	out	0x06, r24	; 6
     164:	08 95       	ret

00000166 <_Z14bLightStrengthi>:

void bLightStrength(int Brightness){

	int dutyCycle = 0;
	
	if (Brightness > 254) {
     166:	8f 3f       	cpi	r24, 0xFF	; 255
     168:	91 05       	cpc	r25, r1
     16a:	24 f4       	brge	.+8      	; 0x174 <_Z14bLightStrengthi+0xe>
		dutyCycle = 254;
	}
	else if (Brightness <= 0) {
     16c:	18 16       	cp	r1, r24
     16e:	19 06       	cpc	r1, r25
     170:	34 f0       	brlt	.+12     	; 0x17e <_Z14bLightStrengthi+0x18>
     172:	03 c0       	rjmp	.+6      	; 0x17a <_Z14bLightStrengthi+0x14>
void bLightStrength(int Brightness){

	int dutyCycle = 0;
	
	if (Brightness > 254) {
		dutyCycle = 254;
     174:	8e ef       	ldi	r24, 0xFE	; 254
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	02 c0       	rjmp	.+4      	; 0x17e <_Z14bLightStrengthi+0x18>
	}
	else if (Brightness <= 0) {
		dutyCycle = 1;
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	90 e0       	ldi	r25, 0x00	; 0
	}
	else {
		dutyCycle = Brightness;
	}

	OCR3A = dutyCycle;
     17e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     182:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     186:	08 95       	ret

00000188 <_Z11initCounterv>:
#include "Sensor.h"
#include <avr/interrupt.h>


void initCounter(){
	EIMSK = 0b00110000; // INT 4 & INT 5 active - BEN 2 & 3.
     188:	80 e3       	ldi	r24, 0x30	; 48
     18a:	8d bb       	out	0x1d, r24	; 29
	EICRB = 0b00001111; // INT 4 & INT 5 rising edge.
     18c:	8f e0       	ldi	r24, 0x0F	; 15
     18e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     192:	08 95       	ret

00000194 <_Z8fLightOnv>:
void fLightInit(void){
	DDRG = 0xFF; 
}

void fLightOn(void){
	PORTG = 0b00000101; //ben 39 og 41
     194:	85 e0       	ldi	r24, 0x05	; 5
     196:	84 bb       	out	0x14, r24	; 20
     198:	08 95       	ret

0000019a <_Z9fLightOffv>:
}
void fLightOff(void){
	PORTG = 0b00000000;
     19a:	14 ba       	out	0x14, r1	; 20
     19c:	08 95       	ret

0000019e <_Z11SendCharnulc>:
	UBRR0L = ((F_CPU/(16*BAUD))-1);
}

void SendCharnul(char Tegn)
{
	while(!(UCSR0A & (1<<UDRE0))){
     19e:	e0 ec       	ldi	r30, 0xC0	; 192
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	90 81       	ld	r25, Z
     1a4:	95 ff       	sbrs	r25, 5
     1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <_Z11SendCharnulc+0x4>
		
	}
	UDR0 = Tegn;
     1a8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     1ac:	08 95       	ret

000001ae <_Z10SendStringPc>:
}

void SendString(char* Streng)
{
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	ec 01       	movw	r28, r24
	while(*Streng != '\0'){
     1b4:	88 81       	ld	r24, Y
     1b6:	88 23       	and	r24, r24
     1b8:	29 f0       	breq	.+10     	; 0x1c4 <_Z10SendStringPc+0x16>
     1ba:	21 96       	adiw	r28, 0x01	; 1
		SendCharnul(*Streng);
     1bc:	f0 df       	rcall	.-32     	; 0x19e <_Z11SendCharnulc>
	UDR0 = Tegn;
}

void SendString(char* Streng)
{
	while(*Streng != '\0'){
     1be:	89 91       	ld	r24, Y+
     1c0:	81 11       	cpse	r24, r1
     1c2:	fc cf       	rjmp	.-8      	; 0x1bc <_Z10SendStringPc+0xe>
		SendCharnul(*Streng);
		Streng++;
	}
}
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <_Z11SendIntegeri>:

void SendInteger(int Tal)
{
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
     1d2:	6e 97       	sbiw	r28, 0x1e	; 30
     1d4:	0f b6       	in	r0, 0x3f	; 63
     1d6:	f8 94       	cli
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     1de:	4a e0       	ldi	r20, 0x0A	; 10
     1e0:	be 01       	movw	r22, r28
     1e2:	6f 5f       	subi	r22, 0xFF	; 255
     1e4:	7f 4f       	sbci	r23, 0xFF	; 255
     1e6:	f2 d6       	rcall	.+3556   	; 0xfcc <__itoa_ncheck>
	char intStr[30];
	itoa(Tal, intStr, 10);
	SendString(intStr);
     1e8:	ce 01       	movw	r24, r28
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	e0 df       	rcall	.-64     	; 0x1ae <_Z10SendStringPc>
}
     1ee:	6e 96       	adiw	r28, 0x1e	; 30
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	f8 94       	cli
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	cd bf       	out	0x3d, r28	; 61
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <__vector_5>:


ISR(INT4_vect){ //On rising edge, count + 1
     200:	1f 92       	push	r1
     202:	0f 92       	push	r0
     204:	0f b6       	in	r0, 0x3f	; 63
     206:	0f 92       	push	r0
     208:	11 24       	eor	r1, r1
     20a:	2f 93       	push	r18
     20c:	8f 93       	push	r24
     20e:	9f 93       	push	r25
	if(counter == 3){
     210:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     214:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     218:	03 97       	sbiw	r24, 0x03	; 3
     21a:	d1 f4       	brne	.+52     	; 0x250 <__vector_5+0x50>
		
		newCount = true;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		counter++;
     222:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     226:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     22a:	01 96       	adiw	r24, 0x01	; 1
     22c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     230:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
		EIMSK = 0b00000000;
     234:	1d ba       	out	0x1d, r1	; 29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     236:	2f ef       	ldi	r18, 0xFF	; 255
     238:	89 e6       	ldi	r24, 0x69	; 105
     23a:	98 e1       	ldi	r25, 0x18	; 24
     23c:	21 50       	subi	r18, 0x01	; 1
     23e:	80 40       	sbci	r24, 0x00	; 0
     240:	90 40       	sbci	r25, 0x00	; 0
     242:	e1 f7       	brne	.-8      	; 0x23c <__vector_5+0x3c>
     244:	00 c0       	rjmp	.+0      	; 0x246 <__vector_5+0x46>
     246:	00 00       	nop
		_delay_ms(500);
		EIFR = 0b00110000;
     248:	80 e3       	ldi	r24, 0x30	; 48
     24a:	8c bb       	out	0x1c, r24	; 28
		EIMSK = 0b00110000;
     24c:	8d bb       	out	0x1d, r24	; 29
     24e:	19 c0       	rjmp	.+50     	; 0x282 <__vector_5+0x82>
	}
	else {
		newCount = true;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		counter++;
     256:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     25a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     25e:	01 96       	adiw	r24, 0x01	; 1
     260:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     264:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
		EIMSK = 0b00000000;
     268:	1d ba       	out	0x1d, r1	; 29
     26a:	2f ef       	ldi	r18, 0xFF	; 255
     26c:	85 ea       	ldi	r24, 0xA5	; 165
     26e:	9e e0       	ldi	r25, 0x0E	; 14
     270:	21 50       	subi	r18, 0x01	; 1
     272:	80 40       	sbci	r24, 0x00	; 0
     274:	90 40       	sbci	r25, 0x00	; 0
     276:	e1 f7       	brne	.-8      	; 0x270 <__vector_5+0x70>
     278:	00 c0       	rjmp	.+0      	; 0x27a <__vector_5+0x7a>
     27a:	00 00       	nop
		_delay_ms(300);
		EIFR = 0b00110000;
     27c:	80 e3       	ldi	r24, 0x30	; 48
     27e:	8c bb       	out	0x1c, r24	; 28
		EIMSK = 0b00110000;
     280:	8d bb       	out	0x1d, r24	; 29
	}
}
     282:	9f 91       	pop	r25
     284:	8f 91       	pop	r24
     286:	2f 91       	pop	r18
     288:	0f 90       	pop	r0
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	0f 90       	pop	r0
     28e:	1f 90       	pop	r1
     290:	18 95       	reti

00000292 <__vector_6>:
ISR(INT5_vect){
     292:	1f 92       	push	r1
     294:	0f 92       	push	r0
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	0f 92       	push	r0
     29a:	11 24       	eor	r1, r1
     29c:	2f 93       	push	r18
     29e:	8f 93       	push	r24
     2a0:	9f 93       	push	r25
	if(counter == 3){
     2a2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     2a6:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     2aa:	03 97       	sbiw	r24, 0x03	; 3
     2ac:	d1 f4       	brne	.+52     	; 0x2e2 <__vector_6+0x50>
		
		newCount = true;
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		counter++;
     2b4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     2b8:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     2c2:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
		EIMSK = 0b00000000;
     2c6:	1d ba       	out	0x1d, r1	; 29
     2c8:	2f ef       	ldi	r18, 0xFF	; 255
     2ca:	89 e6       	ldi	r24, 0x69	; 105
     2cc:	98 e1       	ldi	r25, 0x18	; 24
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	80 40       	sbci	r24, 0x00	; 0
     2d2:	90 40       	sbci	r25, 0x00	; 0
     2d4:	e1 f7       	brne	.-8      	; 0x2ce <__vector_6+0x3c>
     2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <__vector_6+0x46>
     2d8:	00 00       	nop
		_delay_ms(500);
		EIFR = 0b00110000;
     2da:	80 e3       	ldi	r24, 0x30	; 48
     2dc:	8c bb       	out	0x1c, r24	; 28
		EIMSK = 0b00110000;
     2de:	8d bb       	out	0x1d, r24	; 29
     2e0:	19 c0       	rjmp	.+50     	; 0x314 <__vector_6+0x82>
	}
	else {
		newCount = true;
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		counter++;
     2e8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     2ec:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     2f0:	01 96       	adiw	r24, 0x01	; 1
     2f2:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     2f6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
		EIMSK = 0b00000000;
     2fa:	1d ba       	out	0x1d, r1	; 29
     2fc:	2f ef       	ldi	r18, 0xFF	; 255
     2fe:	85 ea       	ldi	r24, 0xA5	; 165
     300:	9e e0       	ldi	r25, 0x0E	; 14
     302:	21 50       	subi	r18, 0x01	; 1
     304:	80 40       	sbci	r24, 0x00	; 0
     306:	90 40       	sbci	r25, 0x00	; 0
     308:	e1 f7       	brne	.-8      	; 0x302 <__vector_6+0x70>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <__vector_6+0x7a>
     30c:	00 00       	nop
		_delay_ms(300);
		EIFR = 0b00110000;
     30e:	80 e3       	ldi	r24, 0x30	; 48
     310:	8c bb       	out	0x1c, r24	; 28
		EIMSK = 0b00110000;
     312:	8d bb       	out	0x1d, r24	; 29
	}
}
     314:	9f 91       	pop	r25
     316:	8f 91       	pop	r24
     318:	2f 91       	pop	r18
     31a:	0f 90       	pop	r0
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	0f 90       	pop	r0
     320:	1f 90       	pop	r1
     322:	18 95       	reti

00000324 <__vector_17>:


ISR(TIMER1_COMPA_vect){
     324:	1f 92       	push	r1
     326:	0f 92       	push	r0
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	0f 92       	push	r0
     32c:	11 24       	eor	r1, r1
     32e:	8f 93       	push	r24
     330:	9f 93       	push	r25
	                                                                                                                                          
	switch(MotorMode){
     332:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
     336:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
     33a:	81 30       	cpi	r24, 0x01	; 1
     33c:	91 05       	cpc	r25, r1
     33e:	31 f0       	breq	.+12     	; 0x34c <__vector_17+0x28>
     340:	18 f0       	brcs	.+6      	; 0x348 <__vector_17+0x24>
     342:	02 97       	sbiw	r24, 0x02	; 2
     344:	59 f0       	breq	.+22     	; 0x35c <__vector_17+0x38>
     346:	11 c0       	rjmp	.+34     	; 0x36a <__vector_17+0x46>
		case 0:
			PORTA = 0b00000000;
     348:	12 b8       	out	0x02, r1	; 2
		break;
     34a:	0f c0       	rjmp	.+30     	; 0x36a <__vector_17+0x46>
		case 1:
			if(PINA == 0b00000001){
     34c:	80 b1       	in	r24, 0x00	; 0
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	11 f4       	brne	.+4      	; 0x356 <__vector_17+0x32>
				PORTA = 0b00000000;
     352:	12 b8       	out	0x02, r1	; 2
     354:	0a c0       	rjmp	.+20     	; 0x36a <__vector_17+0x46>
			}else{
				PORTA = 0b00000001;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	82 b9       	out	0x02, r24	; 2
     35a:	07 c0       	rjmp	.+14     	; 0x36a <__vector_17+0x46>
			}
		break;
		case 2:
			if(PINA == 0b00000010){
     35c:	80 b1       	in	r24, 0x00	; 0
     35e:	82 30       	cpi	r24, 0x02	; 2
     360:	11 f4       	brne	.+4      	; 0x366 <__vector_17+0x42>
				PORTA = 0b00000000;
     362:	12 b8       	out	0x02, r1	; 2
     364:	02 c0       	rjmp	.+4      	; 0x36a <__vector_17+0x46>
				}else{
				PORTA = 0b00000010;
     366:	82 e0       	ldi	r24, 0x02	; 2
     368:	82 b9       	out	0x02, r24	; 2
			}
		break;
			
	}
	
}
     36a:	9f 91       	pop	r25
     36c:	8f 91       	pop	r24
     36e:	0f 90       	pop	r0
     370:	0f be       	out	0x3f, r0	; 63
     372:	0f 90       	pop	r0
     374:	1f 90       	pop	r1
     376:	18 95       	reti

00000378 <__vector_32>:

ISR(TIMER3_COMPA_vect){
     378:	1f 92       	push	r1
     37a:	0f 92       	push	r0
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	0f 92       	push	r0
     380:	11 24       	eor	r1, r1
     382:	0b b6       	in	r0, 0x3b	; 59
     384:	0f 92       	push	r0
     386:	2f 93       	push	r18
     388:	3f 93       	push	r19
     38a:	4f 93       	push	r20
     38c:	5f 93       	push	r21
     38e:	6f 93       	push	r22
     390:	7f 93       	push	r23
     392:	8f 93       	push	r24
     394:	9f 93       	push	r25
     396:	af 93       	push	r26
     398:	bf 93       	push	r27
     39a:	ef 93       	push	r30
     39c:	ff 93       	push	r31
	
	bLightToggle();
     39e:	df de       	rcall	.-578    	; 0x15e <_Z12bLightTogglev>
}
     3a0:	ff 91       	pop	r31
     3a2:	ef 91       	pop	r30
     3a4:	bf 91       	pop	r27
     3a6:	af 91       	pop	r26
     3a8:	9f 91       	pop	r25
     3aa:	8f 91       	pop	r24
     3ac:	7f 91       	pop	r23
     3ae:	6f 91       	pop	r22
     3b0:	5f 91       	pop	r21
     3b2:	4f 91       	pop	r20
     3b4:	3f 91       	pop	r19
     3b6:	2f 91       	pop	r18
     3b8:	0f 90       	pop	r0
     3ba:	0b be       	out	0x3b, r0	; 59
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <main>:


int main(void)
{
	sei();
     3c6:	78 94       	sei
	initCounter();
     3c8:	df de       	rcall	.-578    	; 0x188 <_Z11initCounterv>
	initMotor();
     3ca:	ba d2       	rcall	.+1396   	; 0x940 <_Z9initMotorv>
     3cc:	20 e0       	ldi	r18, 0x00	; 0
	InitUART(9600, 8, 0);
     3ce:	48 e0       	ldi	r20, 0x08	; 8
     3d0:	60 e8       	ldi	r22, 0x80	; 128
     3d2:	75 e2       	ldi	r23, 0x25	; 37
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	61 d3       	rcall	.+1730   	; 0xa9c <_Z8InitUARTmhb>
     3da:	88 e1       	ldi	r24, 0x18	; 24
volatile unsigned int MotorMode = 0;

void InitUARTnul(unsigned long BAUD)
{
	
	UCSR0B = 0b00011000;
     3dc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     3e0:	86 e0       	ldi	r24, 0x06	; 6
	
	UCSR0C = 0b00000110;
     3e2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     3e6:	87 e6       	ldi	r24, 0x67	; 103
	
	UBRR0L = ((F_CPU/(16*BAUD))-1);
     3e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	sei();
	initCounter();
	initMotor();
	InitUART(9600, 8, 0);
	InitUARTnul(9600);
	bLightInit();
     3ec:	a8 de       	rcall	.-688    	; 0x13e <_Z10bLightInitv>
     3ee:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <counter+0x1>
	counter = 0;
     3f2:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <counter>
     3f6:	12 b8       	out	0x02, r1	; 2
	PORTA = 0b00000000;
     3f8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
	TIMSK3 = 0b00000000;
     3fc:	c4 e9       	ldi	r28, 0x94	; 148
			if(newCount){
				playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
				_delay_ms(1000);
				TCNT3 = 0;
     3fe:	d0 e0       	ldi	r29, 0x00	; 0
     400:	0f 2e       	mov	r0, r31
				bLightStrength(254);
				MotorMode = 0;
				_delay_ms(500);
				fLightOff();
				TIMSK3 = 0b00000000;
     402:	f1 e7       	ldi	r31, 0x71	; 113
     404:	af 2e       	mov	r10, r31
     406:	b1 2c       	mov	r11, r1
     408:	f0 2d       	mov	r31, r0
     40a:	ee 24       	eor	r14, r14
				bLightStrength(254);
				_delay_ms(500);
				TCNT3 = 0;
				bLightStrength(15);
				_delay_ms(400);
				MotorMode = 1;
     40c:	e3 94       	inc	r14
     40e:	f1 2c       	mov	r15, r1
     410:	04 e8       	ldi	r16, 0x84	; 132
				_delay_ms(100);
				TCNT1 = 0;
     412:	10 e0       	ldi	r17, 0x00	; 0
     414:	0f 2e       	mov	r0, r31
				setSpeed(99.0);
				counter = 12;
     416:	fc e0       	ldi	r31, 0x0C	; 12
     418:	8f 2e       	mov	r8, r31
     41a:	91 2c       	mov	r9, r1
     41c:	f0 2d       	mov	r31, r0
     41e:	0f 2e       	mov	r0, r31
				MotorMode = 1;
				_delay_ms(100);
				TCNT1 = 0;
				setSpeed(99.0);
				_delay_ms(500);
				counter = 11;
     420:	fb e0       	ldi	r31, 0x0B	; 11
     422:	6f 2e       	mov	r6, r31
     424:	71 2c       	mov	r7, r1
     426:	f0 2d       	mov	r31, r0
     428:	0f 2e       	mov	r0, r31
				bLightStrength(254);
				MotorMode = 1;
				_delay_ms(100);
				TCNT1 = 0;
				setSpeed(99.0);
				counter = 10;
     42a:	fa e0       	ldi	r31, 0x0A	; 10
     42c:	4f 2e       	mov	r4, r31
     42e:	51 2c       	mov	r5, r1
     430:	f0 2d       	mov	r31, r0
     432:	68 94       	set
				_delay_ms(10);
				newCount = false;
				TCNT1 = 0;
				setSpeed(99.0);
				_delay_ms(150);
				counter = 8;
     434:	22 24       	eor	r2, r2
     436:	23 f8       	bld	r2, 3
     438:	31 2c       	mov	r3, r1
     43a:	68 94       	set
			case 7: // stop ved 6. brik
			if(newCount){
				playCoinSound(); //Mario coin
				_delay_ms(10);
				newCount = false;
				MotorMode = 2;
     43c:	cc 24       	eor	r12, r12
     43e:	c1 f8       	bld	r12, 1
     440:	d1 2c       	mov	r13, r1
     442:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>

	
	while(1){
		
		
		SendInteger(counter);		
     446:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     44a:	bf de       	rcall	.-642    	; 0x1ca <_Z11SendIntegeri>
     44c:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <counter>
		switch(counter){
     450:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <counter+0x1>
     454:	31 97       	sbiw	r30, 0x01	; 1
     456:	ed 30       	cpi	r30, 0x0D	; 13
     458:	f1 05       	cpc	r31, r1
     45a:	98 f7       	brcc	.-26     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     45c:	88 27       	eor	r24, r24
     45e:	ee 58       	subi	r30, 0x8E	; 142
     460:	ff 4f       	sbci	r31, 0xFF	; 255
     462:	8f 4f       	sbci	r24, 0xFF	; 255
     464:	ab c5       	rjmp	.+2902   	; 0xfbc <__tablejump2__>
			case 1:   // Start manuelt med brik
			if(newCount){
     466:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     46a:	88 23       	and	r24, r24
     46c:	51 f3       	breq	.-44     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				playStartSound();
     46e:	e3 d2       	rcall	.+1478   	; 0xa36 <_Z14playStartSoundv>
     470:	82 e0       	ldi	r24, 0x02	; 2
				TIMSK3 = 0b00000010;
     472:	f5 01       	movw	r30, r10
     474:	80 83       	st	Z, r24
				TCNT3 = 0;
     476:	19 82       	std	Y+1, r1	; 0x01
     478:	18 82       	st	Y, r1
				bLightStrength(15);
     47a:	8f e0       	ldi	r24, 0x0F	; 15
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	73 de       	rcall	.-794    	; 0x166 <_Z14bLightStrengthi>
     480:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				newCount = false;
     484:	ff ef       	ldi	r31, 0xFF	; 255
     486:	2b e7       	ldi	r18, 0x7B	; 123
     488:	82 e9       	ldi	r24, 0x92	; 146
     48a:	f1 50       	subi	r31, 0x01	; 1
     48c:	20 40       	sbci	r18, 0x00	; 0
     48e:	80 40       	sbci	r24, 0x00	; 0
     490:	e1 f7       	brne	.-8      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     492:	00 c0       	rjmp	.+0      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     494:	00 00       	nop
     496:	9f ef       	ldi	r25, 0xFF	; 255
     498:	e0 e7       	ldi	r30, 0x70	; 112
     49a:	f2 e0       	ldi	r31, 0x02	; 2
     49c:	91 50       	subi	r25, 0x01	; 1
     49e:	e0 40       	sbci	r30, 0x00	; 0
     4a0:	f0 40       	sbci	r31, 0x00	; 0
     4a2:	e1 f7       	brne	.-8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4a6:	00 00       	nop
				_delay_ms(3000); //Delay for at spille intro 10 sek
				_delay_ms(50);
				fLightOn();
     4a8:	75 de       	rcall	.-790    	; 0x194 <_Z8fLightOnv>
     4aa:	2f ef       	ldi	r18, 0xFF	; 255
     4ac:	89 ef       	ldi	r24, 0xF9	; 249
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	21 50       	subi	r18, 0x01	; 1
     4b2:	80 40       	sbci	r24, 0x00	; 0
     4b4:	90 40       	sbci	r25, 0x00	; 0
     4b6:	e1 f7       	brne	.-8      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4b8:	00 c0       	rjmp	.+0      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4ba:	00 00       	nop
     4bc:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <__data_end+0x1>
				_delay_ms(20);
				MotorMode = 1;
     4c0:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <__data_end>
     4c4:	ef ef       	ldi	r30, 0xFF	; 255
     4c6:	f1 ee       	ldi	r31, 0xE1	; 225
     4c8:	24 e0       	ldi	r18, 0x04	; 4
     4ca:	e1 50       	subi	r30, 0x01	; 1
     4cc:	f0 40       	sbci	r31, 0x00	; 0
     4ce:	20 40       	sbci	r18, 0x00	; 0
     4d0:	e1 f7       	brne	.-8      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4d4:	00 00       	nop
				_delay_ms(100);
				TCNT1 = 0;
     4d6:	f8 01       	movw	r30, r16
     4d8:	11 82       	std	Z+1, r1	; 0x01
     4da:	10 82       	st	Z, r1
				setSpeed(99.0);
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	86 ec       	ldi	r24, 0xC6	; 198
     4e2:	92 e4       	ldi	r25, 0x42	; 66
     4e4:	43 d2       	rcall	.+1158   	; 0x96c <_Z8setSpeedf>
     4e6:	f0 92 05 02 	sts	0x0205, r15	; 0x800205 <counter+0x1>
				counter = 1;
     4ea:	e0 92 04 02 	sts	0x0204, r14	; 0x800204 <counter>
     4ee:	a9 cf       	rjmp	.-174    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			
			
			break;
			
			case 2:  // 1. brik
			if(newCount){
     4f0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     4f4:	88 23       	and	r24, r24
     4f6:	09 f4       	brne	.+2      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
				TCNT3 = 0;
     4f8:	a4 cf       	rjmp	.-184    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     4fa:	19 82       	std	Y+1, r1	; 0x01
				bLightStrength(15);
     4fc:	18 82       	st	Y, r1
     4fe:	8f e0       	ldi	r24, 0x0F	; 15
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	31 de       	rcall	.-926    	; 0x166 <_Z14bLightStrengthi>
				playCoinSound();
     504:	87 d2       	rcall	.+1294   	; 0xa14 <_Z13playCoinSoundv>
     506:	8f e3       	ldi	r24, 0x3F	; 63
     508:	9c e9       	ldi	r25, 0x9C	; 156
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	f1 f7       	brne	.-4      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     50e:	00 c0       	rjmp	.+0      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     510:	00 00       	nop
				_delay_ms(10);
				newCount = false;
     512:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				TCNT1 = 0;
     516:	f8 01       	movw	r30, r16
     518:	11 82       	std	Z+1, r1	; 0x01
     51a:	10 82       	st	Z, r1
				setSpeed(99.0);
     51c:	60 e0       	ldi	r22, 0x00	; 0
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	86 ec       	ldi	r24, 0xC6	; 198
     522:	92 e4       	ldi	r25, 0x42	; 66
     524:	23 d2       	rcall	.+1094   	; 0x96c <_Z8setSpeedf>
     526:	ff ef       	ldi	r31, 0xFF	; 255
     528:	22 e5       	ldi	r18, 0x52	; 82
     52a:	87 e0       	ldi	r24, 0x07	; 7
     52c:	f1 50       	subi	r31, 0x01	; 1
     52e:	20 40       	sbci	r18, 0x00	; 0
     530:	80 40       	sbci	r24, 0x00	; 0
     532:	e1 f7       	brne	.-8      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     534:	00 c0       	rjmp	.+0      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     536:	00 00       	nop
     538:	d0 92 05 02 	sts	0x0205, r13	; 0x800205 <counter+0x1>
				_delay_ms(150);
				counter = 2;
     53c:	c0 92 04 02 	sts	0x0204, r12	; 0x800204 <counter>
			}
			
			break;
			
			case 3:   // 2. brik
			if(newCount){
     540:	80 cf       	rjmp	.-256    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     542:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     546:	88 23       	and	r24, r24
     548:	09 f4       	brne	.+2      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
				TCNT3 = 0;
     54a:	7b cf       	rjmp	.-266    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     54c:	19 82       	std	Y+1, r1	; 0x01
				bLightStrength(15);
     54e:	18 82       	st	Y, r1
     550:	8f e0       	ldi	r24, 0x0F	; 15
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	08 de       	rcall	.-1008   	; 0x166 <_Z14bLightStrengthi>
				playCoinSound(); //Mario coin
     556:	5e d2       	rcall	.+1212   	; 0xa14 <_Z13playCoinSoundv>
     558:	ef e3       	ldi	r30, 0x3F	; 63
     55a:	fc e9       	ldi	r31, 0x9C	; 156
     55c:	31 97       	sbiw	r30, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
     560:	00 c0       	rjmp	.+0      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     562:	00 00       	nop
				_delay_ms(10);
				newCount = false;
     564:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				TCNT1 = 0;
     568:	f8 01       	movw	r30, r16
     56a:	11 82       	std	Z+1, r1	; 0x01
     56c:	10 82       	st	Z, r1
				setSpeed(99.0);
     56e:	60 e0       	ldi	r22, 0x00	; 0
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	86 ec       	ldi	r24, 0xC6	; 198
     574:	92 e4       	ldi	r25, 0x42	; 66
     576:	fa d1       	rcall	.+1012   	; 0x96c <_Z8setSpeedf>
     578:	ff ef       	ldi	r31, 0xFF	; 255
     57a:	22 e5       	ldi	r18, 0x52	; 82
     57c:	87 e0       	ldi	r24, 0x07	; 7
     57e:	f1 50       	subi	r31, 0x01	; 1
     580:	20 40       	sbci	r18, 0x00	; 0
     582:	80 40       	sbci	r24, 0x00	; 0
     584:	e1 f7       	brne	.-8      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
     586:	00 c0       	rjmp	.+0      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     588:	00 00       	nop
     58a:	83 e0       	ldi	r24, 0x03	; 3
				_delay_ms(150);
				counter = 3;
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     592:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
		
			
			break;
			
			case 4:   // 3. brik på bakken
			if(newCount){
     596:	55 cf       	rjmp	.-342    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     598:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     59c:	88 23       	and	r24, r24
     59e:	09 f4       	brne	.+2      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
				TCNT3 = 0;
     5a0:	50 cf       	rjmp	.-352    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     5a2:	19 82       	std	Y+1, r1	; 0x01
				bLightStrength(15);
     5a4:	18 82       	st	Y, r1
     5a6:	8f e0       	ldi	r24, 0x0F	; 15
     5a8:	90 e0       	ldi	r25, 0x00	; 0
				playCoinSound(); //Mario coin
     5aa:	dd dd       	rcall	.-1094   	; 0x166 <_Z14bLightStrengthi>
     5ac:	33 d2       	rcall	.+1126   	; 0xa14 <_Z13playCoinSoundv>
     5ae:	ef e3       	ldi	r30, 0x3F	; 63
     5b0:	fc e9       	ldi	r31, 0x9C	; 156
     5b2:	31 97       	sbiw	r30, 0x01	; 1
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     5b8:	00 00       	nop
				_delay_ms(10);
				newCount = false;
     5ba:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				TCNT1 = 0;
     5be:	f8 01       	movw	r30, r16
     5c0:	11 82       	std	Z+1, r1	; 0x01
     5c2:	10 82       	st	Z, r1
				setSpeed(99.0);
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	86 ec       	ldi	r24, 0xC6	; 198
     5ca:	92 e4       	ldi	r25, 0x42	; 66
     5cc:	cf d1       	rcall	.+926    	; 0x96c <_Z8setSpeedf>
     5ce:	ff ef       	ldi	r31, 0xFF	; 255
     5d0:	22 e5       	ldi	r18, 0x52	; 82
     5d2:	87 e0       	ldi	r24, 0x07	; 7
     5d4:	f1 50       	subi	r31, 0x01	; 1
     5d6:	20 40       	sbci	r18, 0x00	; 0
     5d8:	80 40       	sbci	r24, 0x00	; 0
     5da:	e1 f7       	brne	.-8      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
				_delay_ms(150);
				counter = 4;
     5de:	00 00       	nop
     5e0:	e4 e0       	ldi	r30, 0x04	; 4
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	f0 93 05 02 	sts	0x0205, r31	; 0x800205 <counter+0x1>
     5e8:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <counter>
			}
			break;
			
			case 5:  // 4. brik
			if(newCount){
     5ec:	2a cf       	rjmp	.-428    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     5ee:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     5f2:	88 23       	and	r24, r24
     5f4:	09 f4       	brne	.+2      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
				TCNT3 = 0;
     5f6:	25 cf       	rjmp	.-438    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     5f8:	19 82       	std	Y+1, r1	; 0x01
				bLightStrength(15);
     5fa:	18 82       	st	Y, r1
     5fc:	8f e0       	ldi	r24, 0x0F	; 15
     5fe:	90 e0       	ldi	r25, 0x00	; 0
				playCoinSound(); //Mario coin
     600:	b2 dd       	rcall	.-1180   	; 0x166 <_Z14bLightStrengthi>
     602:	08 d2       	rcall	.+1040   	; 0xa14 <_Z13playCoinSoundv>
     604:	8f e3       	ldi	r24, 0x3F	; 63
     606:	9c e9       	ldi	r25, 0x9C	; 156
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	f1 f7       	brne	.-4      	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
     60c:	00 c0       	rjmp	.+0      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
     60e:	00 00       	nop
				_delay_ms(10);
				newCount = false;
     610:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				TCNT1 = 0;
     614:	f8 01       	movw	r30, r16
     616:	11 82       	std	Z+1, r1	; 0x01
     618:	10 82       	st	Z, r1
				setSpeed(99.0);
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	86 ec       	ldi	r24, 0xC6	; 198
     620:	92 e4       	ldi	r25, 0x42	; 66
     622:	a4 d1       	rcall	.+840    	; 0x96c <_Z8setSpeedf>
     624:	ff ef       	ldi	r31, 0xFF	; 255
     626:	22 e5       	ldi	r18, 0x52	; 82
     628:	87 e0       	ldi	r24, 0x07	; 7
     62a:	f1 50       	subi	r31, 0x01	; 1
     62c:	20 40       	sbci	r18, 0x00	; 0
     62e:	80 40       	sbci	r24, 0x00	; 0
     630:	e1 f7       	brne	.-8      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
     632:	00 c0       	rjmp	.+0      	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
				_delay_ms(150);
				counter = 5;
     634:	00 00       	nop
     636:	e5 e0       	ldi	r30, 0x05	; 5
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	f0 93 05 02 	sts	0x0205, r31	; 0x800205 <counter+0x1>
     63e:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <counter>
			}
			
			break;
			
			case 6:  // 5. brik
			if(newCount){
     642:	ff ce       	rjmp	.-514    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     644:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     648:	88 23       	and	r24, r24
				TCNT3 = 0;
     64a:	09 f4       	brne	.+2      	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
     64c:	fa ce       	rjmp	.-524    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				bLightStrength(15);
     64e:	19 82       	std	Y+1, r1	; 0x01
     650:	18 82       	st	Y, r1
     652:	8f e0       	ldi	r24, 0x0F	; 15
     654:	90 e0       	ldi	r25, 0x00	; 0
				playCoinSound(); //Mario coin
     656:	87 dd       	rcall	.-1266   	; 0x166 <_Z14bLightStrengthi>
     658:	dd d1       	rcall	.+954    	; 0xa14 <_Z13playCoinSoundv>
     65a:	8f e3       	ldi	r24, 0x3F	; 63
     65c:	9c e9       	ldi	r25, 0x9C	; 156
     65e:	01 97       	sbiw	r24, 0x01	; 1
     660:	f1 f7       	brne	.-4      	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
     662:	00 c0       	rjmp	.+0      	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
     664:	00 00       	nop
				_delay_ms(10);
				newCount = false;
     666:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				TCNT1 = 0;
     66a:	f8 01       	movw	r30, r16
     66c:	11 82       	std	Z+1, r1	; 0x01
     66e:	10 82       	st	Z, r1
				setSpeed(90);
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	84 eb       	ldi	r24, 0xB4	; 180
     676:	92 e4       	ldi	r25, 0x42	; 66
     678:	79 d1       	rcall	.+754    	; 0x96c <_Z8setSpeedf>
     67a:	ff ef       	ldi	r31, 0xFF	; 255
     67c:	22 e5       	ldi	r18, 0x52	; 82
     67e:	87 e0       	ldi	r24, 0x07	; 7
     680:	f1 50       	subi	r31, 0x01	; 1
     682:	20 40       	sbci	r18, 0x00	; 0
     684:	80 40       	sbci	r24, 0x00	; 0
     686:	e1 f7       	brne	.-8      	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
     688:	00 c0       	rjmp	.+0      	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
     68a:	00 00       	nop
				_delay_ms(150);
				counter = 6;
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	f0 93 05 02 	sts	0x0205, r31	; 0x800205 <counter+0x1>
     694:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <counter>
     698:	d4 ce       	rjmp	.-600    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			}
			
			break;
			
			case 7: // stop ved 6. brik
			if(newCount){
     69a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     69e:	88 23       	and	r24, r24
     6a0:	09 f4       	brne	.+2      	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
				playCoinSound(); //Mario coin
     6a2:	cf ce       	rjmp	.-610    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     6a4:	b7 d1       	rcall	.+878    	; 0xa14 <_Z13playCoinSoundv>
     6a6:	8f e3       	ldi	r24, 0x3F	; 63
     6a8:	9c e9       	ldi	r25, 0x9C	; 156
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
				_delay_ms(10);
				newCount = false;
     6b0:	00 00       	nop
     6b2:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				MotorMode = 2;
     6b6:	d0 92 03 02 	sts	0x0203, r13	; 0x800203 <__data_end+0x1>
     6ba:	c0 92 02 02 	sts	0x0202, r12	; 0x800202 <__data_end>
				TCNT1 = 0;
     6be:	f8 01       	movw	r30, r16
     6c0:	11 82       	std	Z+1, r1	; 0x01
				setSpeed(99.0);
     6c2:	10 82       	st	Z, r1
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	86 ec       	ldi	r24, 0xC6	; 198
     6ca:	92 e4       	ldi	r25, 0x42	; 66
				TCNT3 = 0;
     6cc:	4f d1       	rcall	.+670    	; 0x96c <_Z8setSpeedf>
     6ce:	19 82       	std	Y+1, r1	; 0x01
				bLightStrength(254);
     6d0:	18 82       	st	Y, r1
     6d2:	8e ef       	ldi	r24, 0xFE	; 254
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	47 dd       	rcall	.-1394   	; 0x166 <_Z14bLightStrengthi>
				counter = 7;
     6d8:	87 e0       	ldi	r24, 0x07	; 7
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     6e0:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
     6e4:	9f ef       	ldi	r25, 0xFF	; 255
     6e6:	e9 e6       	ldi	r30, 0x69	; 105
     6e8:	f8 e1       	ldi	r31, 0x18	; 24
     6ea:	91 50       	subi	r25, 0x01	; 1
     6ec:	e0 40       	sbci	r30, 0x00	; 0
     6ee:	f0 40       	sbci	r31, 0x00	; 0
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
				_delay_ms(500);
				TCNT3 = 0;
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
     6f4:	00 00       	nop
				bLightStrength(15);
     6f6:	19 82       	std	Y+1, r1	; 0x01
     6f8:	18 82       	st	Y, r1
     6fa:	8f e0       	ldi	r24, 0x0F	; 15
     6fc:	90 e0       	ldi	r25, 0x00	; 0
			}
			
			break;
			
			case 8: // tilbage forbi 6. brik
			if(newCount){
     6fe:	33 dd       	rcall	.-1434   	; 0x166 <_Z14bLightStrengthi>
     700:	a0 ce       	rjmp	.-704    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     702:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     706:	88 23       	and	r24, r24
				TCNT3 = 0;
     708:	09 f4       	brne	.+2      	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
     70a:	9b ce       	rjmp	.-714    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				bLightStrength(15);
     70c:	19 82       	std	Y+1, r1	; 0x01
     70e:	18 82       	st	Y, r1
     710:	8f e0       	ldi	r24, 0x0F	; 15
     712:	90 e0       	ldi	r25, 0x00	; 0
				playCoinSound(); //Mario coin
     714:	28 dd       	rcall	.-1456   	; 0x166 <_Z14bLightStrengthi>
     716:	7e d1       	rcall	.+764    	; 0xa14 <_Z13playCoinSoundv>
     718:	8f e3       	ldi	r24, 0x3F	; 63
     71a:	9c e9       	ldi	r25, 0x9C	; 156
     71c:	01 97       	sbiw	r24, 0x01	; 1
     71e:	f1 f7       	brne	.-4      	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>
     720:	00 c0       	rjmp	.+0      	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     722:	00 00       	nop
				_delay_ms(10);
				newCount = false;
     724:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				TCNT1 = 0;
     728:	f8 01       	movw	r30, r16
     72a:	11 82       	std	Z+1, r1	; 0x01
     72c:	10 82       	st	Z, r1
				setSpeed(99.0);
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	86 ec       	ldi	r24, 0xC6	; 198
     734:	92 e4       	ldi	r25, 0x42	; 66
     736:	1a d1       	rcall	.+564    	; 0x96c <_Z8setSpeedf>
     738:	ff ef       	ldi	r31, 0xFF	; 255
     73a:	22 e5       	ldi	r18, 0x52	; 82
     73c:	87 e0       	ldi	r24, 0x07	; 7
     73e:	f1 50       	subi	r31, 0x01	; 1
     740:	20 40       	sbci	r18, 0x00	; 0
     742:	80 40       	sbci	r24, 0x00	; 0
     744:	e1 f7       	brne	.-8      	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
     746:	00 c0       	rjmp	.+0      	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
     748:	00 00       	nop
				_delay_ms(150);
				counter = 8;
     74a:	30 92 05 02 	sts	0x0205, r3	; 0x800205 <counter+0x1>
     74e:	20 92 04 02 	sts	0x0204, r2	; 0x800204 <counter>
			
			break;
			
			case 9:
			
			counter++;
     752:	77 ce       	rjmp	.-786    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     754:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <counter>
     758:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <counter+0x1>
     75c:	01 96       	adiw	r24, 0x01	; 1
     75e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <counter+0x1>
     762:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <counter>
			break;
			
			case 10: //Stop ved 5. brik igen
			if(newCount){
     766:	6d ce       	rjmp	.-806    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     768:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     76c:	88 23       	and	r24, r24
     76e:	09 f4       	brne	.+2      	; 0x772 <__LOCK_REGION_LENGTH__+0x372>
				playCoinSound(); //Mario coin
     770:	68 ce       	rjmp	.-816    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     772:	50 d1       	rcall	.+672    	; 0xa14 <_Z13playCoinSoundv>
     774:	ef e3       	ldi	r30, 0x3F	; 63
     776:	fc e9       	ldi	r31, 0x9C	; 156
     778:	31 97       	sbiw	r30, 0x01	; 1
     77a:	f1 f7       	brne	.-4      	; 0x778 <__LOCK_REGION_LENGTH__+0x378>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <__LOCK_REGION_LENGTH__+0x37e>
				_delay_ms(10);
				newCount = false;
     77e:	00 00       	nop
     780:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				TCNT3 = 0;
     784:	19 82       	std	Y+1, r1	; 0x01
				bLightStrength(254);
     786:	18 82       	st	Y, r1
     788:	8e ef       	ldi	r24, 0xFE	; 254
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	ec dc       	rcall	.-1576   	; 0x166 <_Z14bLightStrengthi>
				MotorMode = 1;
     78e:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <__data_end+0x1>
     792:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <__data_end>
     796:	ff ef       	ldi	r31, 0xFF	; 255
     798:	21 ee       	ldi	r18, 0xE1	; 225
     79a:	84 e0       	ldi	r24, 0x04	; 4
     79c:	f1 50       	subi	r31, 0x01	; 1
     79e:	20 40       	sbci	r18, 0x00	; 0
     7a0:	80 40       	sbci	r24, 0x00	; 0
     7a2:	e1 f7       	brne	.-8      	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
     7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <__LOCK_REGION_LENGTH__+0x3a6>
				_delay_ms(100);
				TCNT1 = 0;
     7a6:	00 00       	nop
     7a8:	f8 01       	movw	r30, r16
				setSpeed(99.0);
     7aa:	11 82       	std	Z+1, r1	; 0x01
     7ac:	10 82       	st	Z, r1
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	86 ec       	ldi	r24, 0xC6	; 198
				counter = 10;
     7b4:	92 e4       	ldi	r25, 0x42	; 66
     7b6:	da d0       	rcall	.+436    	; 0x96c <_Z8setSpeedf>
     7b8:	50 92 05 02 	sts	0x0205, r5	; 0x800205 <counter+0x1>
     7bc:	40 92 04 02 	sts	0x0204, r4	; 0x800204 <counter>
     7c0:	ff ef       	ldi	r31, 0xFF	; 255
     7c2:	29 e6       	ldi	r18, 0x69	; 105
     7c4:	88 e1       	ldi	r24, 0x18	; 24
     7c6:	f1 50       	subi	r31, 0x01	; 1
     7c8:	20 40       	sbci	r18, 0x00	; 0
     7ca:	80 40       	sbci	r24, 0x00	; 0
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <__LOCK_REGION_LENGTH__+0x3c6>
				_delay_ms(500);
				TCNT3 = 0;
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <__LOCK_REGION_LENGTH__+0x3d0>
     7d0:	00 00       	nop
				bLightStrength(15);
     7d2:	19 82       	std	Y+1, r1	; 0x01
     7d4:	18 82       	st	Y, r1
     7d6:	8f e0       	ldi	r24, 0x0F	; 15
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	c5 dc       	rcall	.-1654   	; 0x166 <_Z14bLightStrengthi>
		
			}
			break;
			
			case 11: // 5. brik igen
			if(newCount){
     7dc:	32 ce       	rjmp	.-924    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     7de:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     7e2:	88 23       	and	r24, r24
				TCNT3 = 0;
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <__LOCK_REGION_LENGTH__+0x3e8>
     7e6:	2d ce       	rjmp	.-934    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				bLightStrength(15);
     7e8:	19 82       	std	Y+1, r1	; 0x01
     7ea:	18 82       	st	Y, r1
     7ec:	8f e0       	ldi	r24, 0x0F	; 15
     7ee:	90 e0       	ldi	r25, 0x00	; 0
				playCoinSound(); //Mario coin
     7f0:	ba dc       	rcall	.-1676   	; 0x166 <_Z14bLightStrengthi>
     7f2:	10 d1       	rcall	.+544    	; 0xa14 <_Z13playCoinSoundv>
     7f4:	ef e3       	ldi	r30, 0x3F	; 63
     7f6:	fc e9       	ldi	r31, 0x9C	; 156
     7f8:	31 97       	sbiw	r30, 0x01	; 1
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <__LOCK_REGION_LENGTH__+0x3f8>
     7fc:	00 c0       	rjmp	.+0      	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
     7fe:	00 00       	nop
				_delay_ms(10);
				newCount = false;
     800:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
				MotorMode = 1;
     804:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <__data_end+0x1>
     808:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <__data_end>
     80c:	ff ef       	ldi	r31, 0xFF	; 255
     80e:	21 ee       	ldi	r18, 0xE1	; 225
     810:	84 e0       	ldi	r24, 0x04	; 4
     812:	f1 50       	subi	r31, 0x01	; 1
     814:	20 40       	sbci	r18, 0x00	; 0
     816:	80 40       	sbci	r24, 0x00	; 0
     818:	e1 f7       	brne	.-8      	; 0x812 <__LOCK_REGION_LENGTH__+0x412>
     81a:	00 c0       	rjmp	.+0      	; 0x81c <__LOCK_REGION_LENGTH__+0x41c>
				_delay_ms(100);
				TCNT1 = 0;
     81c:	00 00       	nop
     81e:	f8 01       	movw	r30, r16
				setSpeed(99.0);
     820:	11 82       	std	Z+1, r1	; 0x01
     822:	10 82       	st	Z, r1
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	86 ec       	ldi	r24, 0xC6	; 198
     82a:	92 e4       	ldi	r25, 0x42	; 66
     82c:	9f d0       	rcall	.+318    	; 0x96c <_Z8setSpeedf>
     82e:	ff ef       	ldi	r31, 0xFF	; 255
     830:	29 e6       	ldi	r18, 0x69	; 105
     832:	88 e1       	ldi	r24, 0x18	; 24
     834:	f1 50       	subi	r31, 0x01	; 1
     836:	20 40       	sbci	r18, 0x00	; 0
     838:	80 40       	sbci	r24, 0x00	; 0
     83a:	e1 f7       	brne	.-8      	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
				_delay_ms(500);
				counter = 11;
     83c:	00 c0       	rjmp	.+0      	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
     83e:	00 00       	nop
     840:	70 92 05 02 	sts	0x0205, r7	; 0x800205 <counter+0x1>
     844:	60 92 04 02 	sts	0x0204, r6	; 0x800204 <counter>
			}
			break;
			
			case 12: // 6. brik igen 
			if(newCount){
     848:	fc cd       	rjmp	.-1032   	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     84a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
				playCoinSound(); //Mario coin
     84e:	88 23       	and	r24, r24
     850:	09 f4       	brne	.+2      	; 0x854 <__LOCK_REGION_LENGTH__+0x454>
     852:	f7 cd       	rjmp	.-1042   	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     854:	df d0       	rcall	.+446    	; 0xa14 <_Z13playCoinSoundv>
     856:	ef e3       	ldi	r30, 0x3F	; 63
     858:	fc e9       	ldi	r31, 0x9C	; 156
     85a:	31 97       	sbiw	r30, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
				_delay_ms(10);
				newCount = false;
     85e:	00 c0       	rjmp	.+0      	; 0x860 <__LOCK_REGION_LENGTH__+0x460>
     860:	00 00       	nop
				setSpeed(0);
     862:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	cb 01       	movw	r24, r22
				MotorMode = 0;
     86c:	7f d0       	rcall	.+254    	; 0x96c <_Z8setSpeedf>
     86e:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__data_end+0x1>
     872:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
				TCNT3 = 0;
     876:	19 82       	std	Y+1, r1	; 0x01
				bLightStrength(254);
     878:	18 82       	st	Y, r1
     87a:	8e ef       	ldi	r24, 0xFE	; 254
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	73 dc       	rcall	.-1818   	; 0x166 <_Z14bLightStrengthi>
     880:	ff ef       	ldi	r31, 0xFF	; 255
     882:	29 e6       	ldi	r18, 0x69	; 105
     884:	88 e1       	ldi	r24, 0x18	; 24
     886:	f1 50       	subi	r31, 0x01	; 1
     888:	20 40       	sbci	r18, 0x00	; 0
     88a:	80 40       	sbci	r24, 0x00	; 0
     88c:	e1 f7       	brne	.-8      	; 0x886 <__LOCK_REGION_LENGTH__+0x486>
     88e:	00 c0       	rjmp	.+0      	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
				_delay_ms(500);
				TCNT3 = 0;
     890:	00 00       	nop
     892:	19 82       	std	Y+1, r1	; 0x01
				bLightStrength(15);
     894:	18 82       	st	Y, r1
     896:	8f e0       	ldi	r24, 0x0F	; 15
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	65 dc       	rcall	.-1846   	; 0x166 <_Z14bLightStrengthi>
     89c:	9f ef       	ldi	r25, 0xFF	; 255
     89e:	e7 e8       	ldi	r30, 0x87	; 135
     8a0:	f3 e1       	ldi	r31, 0x13	; 19
     8a2:	91 50       	subi	r25, 0x01	; 1
     8a4:	e0 40       	sbci	r30, 0x00	; 0
     8a6:	f0 40       	sbci	r31, 0x00	; 0
     8a8:	e1 f7       	brne	.-8      	; 0x8a2 <__LOCK_REGION_LENGTH__+0x4a2>
     8aa:	00 c0       	rjmp	.+0      	; 0x8ac <__LOCK_REGION_LENGTH__+0x4ac>
				_delay_ms(400);
				MotorMode = 1;
     8ac:	00 00       	nop
     8ae:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <__data_end+0x1>
     8b2:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <__data_end>
     8b6:	2f ef       	ldi	r18, 0xFF	; 255
     8b8:	81 ee       	ldi	r24, 0xE1	; 225
     8ba:	94 e0       	ldi	r25, 0x04	; 4
     8bc:	21 50       	subi	r18, 0x01	; 1
     8be:	80 40       	sbci	r24, 0x00	; 0
     8c0:	90 40       	sbci	r25, 0x00	; 0
     8c2:	e1 f7       	brne	.-8      	; 0x8bc <__LOCK_REGION_LENGTH__+0x4bc>
				_delay_ms(100);
				TCNT1 = 0;
     8c4:	00 c0       	rjmp	.+0      	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
     8c6:	00 00       	nop
     8c8:	f8 01       	movw	r30, r16
				setSpeed(99.0);
     8ca:	11 82       	std	Z+1, r1	; 0x01
     8cc:	10 82       	st	Z, r1
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	86 ec       	ldi	r24, 0xC6	; 198
     8d4:	92 e4       	ldi	r25, 0x42	; 66
				counter = 12;
     8d6:	4a d0       	rcall	.+148    	; 0x96c <_Z8setSpeedf>
     8d8:	90 92 05 02 	sts	0x0205, r9	; 0x800205 <counter+0x1>
     8dc:	80 92 04 02 	sts	0x0204, r8	; 0x800204 <counter>
			}
			
			break;
			
			case 13: // Stop efter 7. brik
			if(newCount){
     8e0:	b0 cd       	rjmp	.-1184   	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     8e2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
				playCoinSound(); //Mario coin
     8e6:	88 23       	and	r24, r24
     8e8:	09 f4       	brne	.+2      	; 0x8ec <__LOCK_REGION_LENGTH__+0x4ec>
     8ea:	ab cd       	rjmp	.-1194   	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     8ec:	93 d0       	rcall	.+294    	; 0xa14 <_Z13playCoinSoundv>
     8ee:	8f e3       	ldi	r24, 0x3F	; 63
     8f0:	9c e9       	ldi	r25, 0x9C	; 156
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <__LOCK_REGION_LENGTH__+0x4f2>
				_delay_ms(10);
				newCount = false;
     8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <__LOCK_REGION_LENGTH__+0x4f8>
     8f8:	00 00       	nop
     8fa:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
     8fe:	9f ef       	ldi	r25, 0xFF	; 255
     900:	e3 ed       	ldi	r30, 0xD3	; 211
     902:	f0 e3       	ldi	r31, 0x30	; 48
     904:	91 50       	subi	r25, 0x01	; 1
     906:	e0 40       	sbci	r30, 0x00	; 0
     908:	f0 40       	sbci	r31, 0x00	; 0
     90a:	e1 f7       	brne	.-8      	; 0x904 <__LOCK_REGION_LENGTH__+0x504>
				_delay_ms(1000);
				TCNT3 = 0;
     90c:	00 c0       	rjmp	.+0      	; 0x90e <__LOCK_REGION_LENGTH__+0x50e>
     90e:	00 00       	nop
				bLightStrength(254);
     910:	19 82       	std	Y+1, r1	; 0x01
     912:	18 82       	st	Y, r1
     914:	8e ef       	ldi	r24, 0xFE	; 254
     916:	90 e0       	ldi	r25, 0x00	; 0
				MotorMode = 0;
     918:	26 dc       	rcall	.-1972   	; 0x166 <_Z14bLightStrengthi>
     91a:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__data_end+0x1>
     91e:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
     922:	2f ef       	ldi	r18, 0xFF	; 255
     924:	89 e6       	ldi	r24, 0x69	; 105
     926:	98 e1       	ldi	r25, 0x18	; 24
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	80 40       	sbci	r24, 0x00	; 0
     92c:	90 40       	sbci	r25, 0x00	; 0
     92e:	e1 f7       	brne	.-8      	; 0x928 <__LOCK_REGION_LENGTH__+0x528>
     930:	00 c0       	rjmp	.+0      	; 0x932 <__LOCK_REGION_LENGTH__+0x532>
				_delay_ms(500);
				fLightOff();
     932:	00 00       	nop
     934:	32 dc       	rcall	.-1948   	; 0x19a <_Z9fLightOffv>
				TIMSK3 = 0b00000000;
     936:	f5 01       	movw	r30, r10
     938:	10 82       	st	Z, r1
				PORTC = 0b00000000;
     93a:	18 b8       	out	0x08, r1	; 8
				playEndSound(); //Mario end
     93c:	8d d0       	rcall	.+282    	; 0xa58 <_Z12playEndSoundv>
     93e:	81 cd       	rjmp	.-1278   	; 0x442 <__LOCK_REGION_LENGTH__+0x42>

00000940 <_Z9initMotorv>:
#include "MotorDriver.h"
#include <stdio.h>
#include <avr/io.h>

void initMotor(){
	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<WGM11)|(0<<WGM10); // Set compare mode 3 for OCR1A, clear on upcount, set on downcount.
     940:	82 e8       	ldi	r24, 0x82	; 130
     942:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = (1<<WGM13)|(0<<WGM12)|(1<<CS12)|(0<<CS11)|(0<<CS10); // Set Mode 10, PWM Phase correct ICR1 TOP & 256 prescaler
     946:	84 e1       	ldi	r24, 0x14	; 20
     948:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	ICR1 = 125;
     94c:	8d e7       	ldi	r24, 0x7D	; 125
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     954:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	TIMSK1 = 0b00000010;
     958:	82 e0       	ldi	r24, 0x02	; 2
     95a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
	OCR1A = 0;
     95e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     962:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	DDRA = 0xFF; // Make pin A ports outputs, so we can trigger the H-Bridge.
     966:	8f ef       	ldi	r24, 0xFF	; 255
     968:	81 b9       	out	0x01, r24	; 1
     96a:	08 95       	ret

0000096c <_Z8setSpeedf>:
}

void setSpeed(float speed) {
     96c:	cf 92       	push	r12
     96e:	df 92       	push	r13
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	6b 01       	movw	r12, r22
     97a:	7c 01       	movw	r14, r24
	
	if(speed > 100){
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	48 ec       	ldi	r20, 0xC8	; 200
     982:	52 e4       	ldi	r21, 0x42	; 66
     984:	92 d2       	rcall	.+1316   	; 0xeaa <__gesf2>
     986:	18 16       	cp	r1, r24
     988:	64 f0       	brlt	.+24     	; 0x9a2 <_Z8setSpeedf+0x36>
		speed = 100;
	}
	if(speed < 0){
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	a9 01       	movw	r20, r18
     990:	c7 01       	movw	r24, r14
     992:	b6 01       	movw	r22, r12
     994:	40 d1       	rcall	.+640    	; 0xc16 <__cmpsf2>
     996:	88 23       	and	r24, r24
     998:	64 f4       	brge	.+24     	; 0x9b2 <_Z8setSpeedf+0x46>
		speed = 0;
     99a:	c1 2c       	mov	r12, r1
     99c:	d1 2c       	mov	r13, r1
     99e:	76 01       	movw	r14, r12
     9a0:	08 c0       	rjmp	.+16     	; 0x9b2 <_Z8setSpeedf+0x46>
}

void setSpeed(float speed) {
	
	if(speed > 100){
		speed = 100;
     9a2:	0f 2e       	mov	r0, r31
     9a4:	c1 2c       	mov	r12, r1
     9a6:	d1 2c       	mov	r13, r1
     9a8:	f8 ec       	ldi	r31, 0xC8	; 200
     9aa:	ef 2e       	mov	r14, r31
     9ac:	f2 e4       	ldi	r31, 0x42	; 66
     9ae:	ff 2e       	mov	r15, r31
     9b0:	f0 2d       	mov	r31, r0
	}
	if(speed < 0){
		speed = 0;
	}
	speed = speed / 100;
	OCR1A = (1-speed)*ICR1;
     9b2:	c0 91 86 00 	lds	r28, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
     9b6:	d0 91 87 00 	lds	r29, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	48 ec       	ldi	r20, 0xC8	; 200
     9c0:	52 e4       	ldi	r21, 0x42	; 66
     9c2:	c7 01       	movw	r24, r14
     9c4:	b6 01       	movw	r22, r12
     9c6:	2b d1       	rcall	.+598    	; 0xc1e <__divsf3>
     9c8:	9b 01       	movw	r18, r22
     9ca:	ac 01       	movw	r20, r24
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	80 e8       	ldi	r24, 0x80	; 128
     9d2:	9f e3       	ldi	r25, 0x3F	; 63
     9d4:	bb d0       	rcall	.+374    	; 0xb4c <__subsf3>
     9d6:	6b 01       	movw	r12, r22
     9d8:	7c 01       	movw	r14, r24
     9da:	be 01       	movw	r22, r28
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	b2 d1       	rcall	.+868    	; 0xd46 <__floatunsisf>
     9e2:	9b 01       	movw	r18, r22
     9e4:	ac 01       	movw	r20, r24
     9e6:	c7 01       	movw	r24, r14
     9e8:	b6 01       	movw	r22, r12
     9ea:	63 d2       	rcall	.+1222   	; 0xeb2 <__mulsf3>
     9ec:	80 d1       	rcall	.+768    	; 0xcee <__fixunssfsi>
     9ee:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     9f2:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	ff 90       	pop	r15
     9fc:	ef 90       	pop	r14
     9fe:	df 90       	pop	r13
     a00:	cf 90       	pop	r12
     a02:	08 95       	ret

00000a04 <_Z8SendCharc>:
	volumeMax();
}

void SendChar(char Tegn)
{
   while(!(UCSR2A & (1<<UDRE2))){
     a04:	e0 ed       	ldi	r30, 0xD0	; 208
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	90 81       	ld	r25, Z
     a0a:	95 ff       	sbrs	r25, 5
     a0c:	fd cf       	rjmp	.-6      	; 0xa08 <_Z8SendCharc+0x4>
	   
   }
   UDR2 = Tegn;
     a0e:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     a12:	08 95       	ret

00000a14 <_Z13playCoinSoundv>:
}

void playCoinSound()
{
	SendChar(0x7E);
     a14:	8e e7       	ldi	r24, 0x7E	; 126
     a16:	f6 df       	rcall	.-20     	; 0xa04 <_Z8SendCharc>
	SendChar(0x0F);
     a18:	8f e0       	ldi	r24, 0x0F	; 15
     a1a:	f4 df       	rcall	.-24     	; 0xa04 <_Z8SendCharc>
	SendChar(0x00);
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	f2 df       	rcall	.-28     	; 0xa04 <_Z8SendCharc>
	SendChar(0x03);
     a20:	83 e0       	ldi	r24, 0x03	; 3
     a22:	f0 df       	rcall	.-32     	; 0xa04 <_Z8SendCharc>
	SendChar(0x01);
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	ee df       	rcall	.-36     	; 0xa04 <_Z8SendCharc>
	SendChar(0xFF);
     a28:	8f ef       	ldi	r24, 0xFF	; 255
     a2a:	ec df       	rcall	.-40     	; 0xa04 <_Z8SendCharc>
	SendChar(0xEF);
     a2c:	8f ee       	ldi	r24, 0xEF	; 239
     a2e:	ea df       	rcall	.-44     	; 0xa04 <_Z8SendCharc>
     a30:	8f ee       	ldi	r24, 0xEF	; 239
	SendChar(0xEF);
     a32:	e8 cf       	rjmp	.-48     	; 0xa04 <_Z8SendCharc>
     a34:	08 95       	ret

00000a36 <_Z14playStartSoundv>:
     a36:	8e e7       	ldi	r24, 0x7E	; 126
     a38:	e5 df       	rcall	.-54     	; 0xa04 <_Z8SendCharc>
};

void playStartSound()
{
	SendChar(0x7E);
	SendChar(0x0F);
     a3a:	8f e0       	ldi	r24, 0x0F	; 15
     a3c:	e3 df       	rcall	.-58     	; 0xa04 <_Z8SendCharc>
	SendChar(0x00);
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	e1 df       	rcall	.-62     	; 0xa04 <_Z8SendCharc>
	SendChar(0x01);
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	df df       	rcall	.-66     	; 0xa04 <_Z8SendCharc>
	SendChar(0x01);
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	dd df       	rcall	.-70     	; 0xa04 <_Z8SendCharc>
	SendChar(0xFF);
     a4a:	8f ef       	ldi	r24, 0xFF	; 255
     a4c:	db df       	rcall	.-74     	; 0xa04 <_Z8SendCharc>
	SendChar(0xEF);
     a4e:	8f ee       	ldi	r24, 0xEF	; 239
     a50:	d9 df       	rcall	.-78     	; 0xa04 <_Z8SendCharc>
     a52:	8f ee       	ldi	r24, 0xEF	; 239
	SendChar(0xEF);
     a54:	d7 cf       	rjmp	.-82     	; 0xa04 <_Z8SendCharc>
     a56:	08 95       	ret

00000a58 <_Z12playEndSoundv>:
     a58:	8e e7       	ldi	r24, 0x7E	; 126
     a5a:	d4 df       	rcall	.-88     	; 0xa04 <_Z8SendCharc>
};

void playEndSound()
{
	SendChar(0x7E);
	SendChar(0x0F);
     a5c:	8f e0       	ldi	r24, 0x0F	; 15
     a5e:	d2 df       	rcall	.-92     	; 0xa04 <_Z8SendCharc>
	SendChar(0x00);
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	d0 df       	rcall	.-96     	; 0xa04 <_Z8SendCharc>
	SendChar(0x02);
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	ce df       	rcall	.-100    	; 0xa04 <_Z8SendCharc>
	SendChar(0x01);
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	cc df       	rcall	.-104    	; 0xa04 <_Z8SendCharc>
	SendChar(0xFF);
     a6c:	8f ef       	ldi	r24, 0xFF	; 255
     a6e:	ca df       	rcall	.-108    	; 0xa04 <_Z8SendCharc>
	SendChar(0xEF);
     a70:	8f ee       	ldi	r24, 0xEF	; 239
     a72:	c8 df       	rcall	.-112    	; 0xa04 <_Z8SendCharc>
     a74:	8f ee       	ldi	r24, 0xEF	; 239
	SendChar(0xEF);
     a76:	c6 cf       	rjmp	.-116    	; 0xa04 <_Z8SendCharc>
     a78:	08 95       	ret

00000a7a <_Z9volumeMaxv>:
     a7a:	8e e7       	ldi	r24, 0x7E	; 126
     a7c:	c3 df       	rcall	.-122    	; 0xa04 <_Z8SendCharc>

void volumeMax()
{

	SendChar(0x7E);
	SendChar(0x06);
     a7e:	86 e0       	ldi	r24, 0x06	; 6
     a80:	c1 df       	rcall	.-126    	; 0xa04 <_Z8SendCharc>
	SendChar(0x00);
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	bf df       	rcall	.-130    	; 0xa04 <_Z8SendCharc>
	SendChar(0x00);
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	bd df       	rcall	.-134    	; 0xa04 <_Z8SendCharc>
	SendChar(0x1E);
     a8a:	8e e1       	ldi	r24, 0x1E	; 30
     a8c:	bb df       	rcall	.-138    	; 0xa04 <_Z8SendCharc>
	SendChar(0xFF);
     a8e:	8f ef       	ldi	r24, 0xFF	; 255
     a90:	b9 df       	rcall	.-142    	; 0xa04 <_Z8SendCharc>
	SendChar(0xDC);
     a92:	8c ed       	ldi	r24, 0xDC	; 220
     a94:	b7 df       	rcall	.-146    	; 0xa04 <_Z8SendCharc>
     a96:	8f ee       	ldi	r24, 0xEF	; 239
	SendChar(0xEF);
     a98:	b5 cf       	rjmp	.-150    	; 0xa04 <_Z8SendCharc>
     a9a:	08 95       	ret

00000a9c <_Z8InitUARTmhb>:
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
#include <avr/io.h>
#include <avr/interrupt.h>

void InitUART(unsigned long BAUD, unsigned char DataBit, bool Rx_Int)
{
   if(Rx_Int){
     aa0:	22 23       	and	r18, r18
     aa2:	29 f0       	breq	.+10     	; 0xaae <_Z8InitUARTmhb+0x12>
	  UCSR2B = 0b10011000; 
     aa4:	28 e9       	ldi	r18, 0x98	; 152
     aa6:	20 93 d1 00 	sts	0x00D1, r18	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
	  sei();
     aaa:	78 94       	sei
     aac:	03 c0       	rjmp	.+6      	; 0xab4 <_Z8InitUARTmhb+0x18>
   }else{
	   UCSR2B = 0b00011000;
     aae:	28 e1       	ldi	r18, 0x18	; 24
     ab0:	20 93 d1 00 	sts	0x00D1, r18	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
   }
   if((BAUD >= 300) && (BAUD <= 115200) && (DataBit >= 5) && (DataBit <= 8)){
     ab4:	8b 01       	movw	r16, r22
     ab6:	9c 01       	movw	r18, r24
     ab8:	0c 52       	subi	r16, 0x2C	; 44
     aba:	11 40       	sbci	r17, 0x01	; 1
     abc:	21 09       	sbc	r18, r1
     abe:	31 09       	sbc	r19, r1
     ac0:	05 3d       	cpi	r16, 0xD5	; 213
     ac2:	10 4c       	sbci	r17, 0xC0	; 192
     ac4:	21 40       	sbci	r18, 0x01	; 1
     ac6:	31 05       	cpc	r19, r1
     ac8:	08 f5       	brcc	.+66     	; 0xb0c <_Z8InitUARTmhb+0x70>
     aca:	2b ef       	ldi	r18, 0xFB	; 251
     acc:	24 0f       	add	r18, r20
     ace:	24 30       	cpi	r18, 0x04	; 4
     ad0:	e8 f4       	brcc	.+58     	; 0xb0c <_Z8InitUARTmhb+0x70>
	   switch(DataBit){
     ad2:	46 30       	cpi	r20, 0x06	; 6
     ad4:	61 f0       	breq	.+24     	; 0xaee <_Z8InitUARTmhb+0x52>
     ad6:	18 f4       	brcc	.+6      	; 0xade <_Z8InitUARTmhb+0x42>
     ad8:	45 30       	cpi	r20, 0x05	; 5
     ada:	31 f0       	breq	.+12     	; 0xae8 <_Z8InitUARTmhb+0x4c>
     adc:	14 c0       	rjmp	.+40     	; 0xb06 <_Z8InitUARTmhb+0x6a>
     ade:	47 30       	cpi	r20, 0x07	; 7
     ae0:	51 f0       	breq	.+20     	; 0xaf6 <_Z8InitUARTmhb+0x5a>
     ae2:	48 30       	cpi	r20, 0x08	; 8
     ae4:	61 f0       	breq	.+24     	; 0xafe <_Z8InitUARTmhb+0x62>
     ae6:	0f c0       	rjmp	.+30     	; 0xb06 <_Z8InitUARTmhb+0x6a>
		   case 5:
			   UCSR2C = 0b00000000;
     ae8:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			   break;
     aec:	0f c0       	rjmp	.+30     	; 0xb0c <_Z8InitUARTmhb+0x70>
		   
		   case 6:
			   UCSR2C = 0b00000010;
     aee:	22 e0       	ldi	r18, 0x02	; 2
     af0:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			   break;
     af4:	0b c0       	rjmp	.+22     	; 0xb0c <_Z8InitUARTmhb+0x70>
		   
		   case 7:
			   UCSR2C = 0b00000100;
     af6:	24 e0       	ldi	r18, 0x04	; 4
     af8:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			   break;
     afc:	07 c0       	rjmp	.+14     	; 0xb0c <_Z8InitUARTmhb+0x70>
		   
		   case 8:
			   UCSR2C = 0b00000110;
     afe:	26 e0       	ldi	r18, 0x06	; 6
     b00:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			   break;
     b04:	03 c0       	rjmp	.+6      	; 0xb0c <_Z8InitUARTmhb+0x70>
		   
		   default:
			   UCSR2C = 0b00000110;
     b06:	26 e0       	ldi	r18, 0x06	; 6
     b08:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			   break;
	   }
	}
	UBRR2L = ((F_CPU/(16*BAUD))-1);
     b0c:	dc 01       	movw	r26, r24
     b0e:	cb 01       	movw	r24, r22
     b10:	88 0f       	add	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	aa 1f       	adc	r26, r26
     b16:	bb 1f       	adc	r27, r27
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	9c 01       	movw	r18, r24
     b22:	ad 01       	movw	r20, r26
     b24:	22 0f       	add	r18, r18
     b26:	33 1f       	adc	r19, r19
     b28:	44 1f       	adc	r20, r20
     b2a:	55 1f       	adc	r21, r21
     b2c:	22 0f       	add	r18, r18
     b2e:	33 1f       	adc	r19, r19
     b30:	44 1f       	adc	r20, r20
     b32:	55 1f       	adc	r21, r21
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	74 e2       	ldi	r23, 0x24	; 36
     b38:	84 ef       	ldi	r24, 0xF4	; 244
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	1d d2       	rcall	.+1082   	; 0xf78 <__udivmodsi4>
     b3e:	21 50       	subi	r18, 0x01	; 1
     b40:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	volumeMax();
     b44:	9a df       	rcall	.-204    	; 0xa7a <_Z9volumeMaxv>
     b46:	1f 91       	pop	r17
}
     b48:	0f 91       	pop	r16
     b4a:	08 95       	ret

00000b4c <__subsf3>:
     b4c:	50 58       	subi	r21, 0x80	; 128

00000b4e <__addsf3>:
     b4e:	bb 27       	eor	r27, r27
     b50:	aa 27       	eor	r26, r26
     b52:	0e d0       	rcall	.+28     	; 0xb70 <__addsf3x>
     b54:	70 c1       	rjmp	.+736    	; 0xe36 <__fp_round>
     b56:	61 d1       	rcall	.+706    	; 0xe1a <__fp_pscA>
     b58:	30 f0       	brcs	.+12     	; 0xb66 <__addsf3+0x18>
     b5a:	66 d1       	rcall	.+716    	; 0xe28 <__fp_pscB>
     b5c:	20 f0       	brcs	.+8      	; 0xb66 <__addsf3+0x18>
     b5e:	31 f4       	brne	.+12     	; 0xb6c <__addsf3+0x1e>
     b60:	9f 3f       	cpi	r25, 0xFF	; 255
     b62:	11 f4       	brne	.+4      	; 0xb68 <__addsf3+0x1a>
     b64:	1e f4       	brtc	.+6      	; 0xb6c <__addsf3+0x1e>
     b66:	56 c1       	rjmp	.+684    	; 0xe14 <__fp_nan>
     b68:	0e f4       	brtc	.+2      	; 0xb6c <__addsf3+0x1e>
     b6a:	e0 95       	com	r30
     b6c:	e7 fb       	bst	r30, 7
     b6e:	4c c1       	rjmp	.+664    	; 0xe08 <__fp_inf>

00000b70 <__addsf3x>:
     b70:	e9 2f       	mov	r30, r25
     b72:	72 d1       	rcall	.+740    	; 0xe58 <__fp_split3>
     b74:	80 f3       	brcs	.-32     	; 0xb56 <__addsf3+0x8>
     b76:	ba 17       	cp	r27, r26
     b78:	62 07       	cpc	r22, r18
     b7a:	73 07       	cpc	r23, r19
     b7c:	84 07       	cpc	r24, r20
     b7e:	95 07       	cpc	r25, r21
     b80:	18 f0       	brcs	.+6      	; 0xb88 <__addsf3x+0x18>
     b82:	71 f4       	brne	.+28     	; 0xba0 <__addsf3x+0x30>
     b84:	9e f5       	brtc	.+102    	; 0xbec <__addsf3x+0x7c>
     b86:	8a c1       	rjmp	.+788    	; 0xe9c <__fp_zero>
     b88:	0e f4       	brtc	.+2      	; 0xb8c <__addsf3x+0x1c>
     b8a:	e0 95       	com	r30
     b8c:	0b 2e       	mov	r0, r27
     b8e:	ba 2f       	mov	r27, r26
     b90:	a0 2d       	mov	r26, r0
     b92:	0b 01       	movw	r0, r22
     b94:	b9 01       	movw	r22, r18
     b96:	90 01       	movw	r18, r0
     b98:	0c 01       	movw	r0, r24
     b9a:	ca 01       	movw	r24, r20
     b9c:	a0 01       	movw	r20, r0
     b9e:	11 24       	eor	r1, r1
     ba0:	ff 27       	eor	r31, r31
     ba2:	59 1b       	sub	r21, r25
     ba4:	99 f0       	breq	.+38     	; 0xbcc <__addsf3x+0x5c>
     ba6:	59 3f       	cpi	r21, 0xF9	; 249
     ba8:	50 f4       	brcc	.+20     	; 0xbbe <__addsf3x+0x4e>
     baa:	50 3e       	cpi	r21, 0xE0	; 224
     bac:	68 f1       	brcs	.+90     	; 0xc08 <__addsf3x+0x98>
     bae:	1a 16       	cp	r1, r26
     bb0:	f0 40       	sbci	r31, 0x00	; 0
     bb2:	a2 2f       	mov	r26, r18
     bb4:	23 2f       	mov	r18, r19
     bb6:	34 2f       	mov	r19, r20
     bb8:	44 27       	eor	r20, r20
     bba:	58 5f       	subi	r21, 0xF8	; 248
     bbc:	f3 cf       	rjmp	.-26     	; 0xba4 <__addsf3x+0x34>
     bbe:	46 95       	lsr	r20
     bc0:	37 95       	ror	r19
     bc2:	27 95       	ror	r18
     bc4:	a7 95       	ror	r26
     bc6:	f0 40       	sbci	r31, 0x00	; 0
     bc8:	53 95       	inc	r21
     bca:	c9 f7       	brne	.-14     	; 0xbbe <__addsf3x+0x4e>
     bcc:	7e f4       	brtc	.+30     	; 0xbec <__addsf3x+0x7c>
     bce:	1f 16       	cp	r1, r31
     bd0:	ba 0b       	sbc	r27, r26
     bd2:	62 0b       	sbc	r22, r18
     bd4:	73 0b       	sbc	r23, r19
     bd6:	84 0b       	sbc	r24, r20
     bd8:	ba f0       	brmi	.+46     	; 0xc08 <__addsf3x+0x98>
     bda:	91 50       	subi	r25, 0x01	; 1
     bdc:	a1 f0       	breq	.+40     	; 0xc06 <__addsf3x+0x96>
     bde:	ff 0f       	add	r31, r31
     be0:	bb 1f       	adc	r27, r27
     be2:	66 1f       	adc	r22, r22
     be4:	77 1f       	adc	r23, r23
     be6:	88 1f       	adc	r24, r24
     be8:	c2 f7       	brpl	.-16     	; 0xbda <__addsf3x+0x6a>
     bea:	0e c0       	rjmp	.+28     	; 0xc08 <__addsf3x+0x98>
     bec:	ba 0f       	add	r27, r26
     bee:	62 1f       	adc	r22, r18
     bf0:	73 1f       	adc	r23, r19
     bf2:	84 1f       	adc	r24, r20
     bf4:	48 f4       	brcc	.+18     	; 0xc08 <__addsf3x+0x98>
     bf6:	87 95       	ror	r24
     bf8:	77 95       	ror	r23
     bfa:	67 95       	ror	r22
     bfc:	b7 95       	ror	r27
     bfe:	f7 95       	ror	r31
     c00:	9e 3f       	cpi	r25, 0xFE	; 254
     c02:	08 f0       	brcs	.+2      	; 0xc06 <__addsf3x+0x96>
     c04:	b3 cf       	rjmp	.-154    	; 0xb6c <__addsf3+0x1e>
     c06:	93 95       	inc	r25
     c08:	88 0f       	add	r24, r24
     c0a:	08 f0       	brcs	.+2      	; 0xc0e <__addsf3x+0x9e>
     c0c:	99 27       	eor	r25, r25
     c0e:	ee 0f       	add	r30, r30
     c10:	97 95       	ror	r25
     c12:	87 95       	ror	r24
     c14:	08 95       	ret

00000c16 <__cmpsf2>:
     c16:	d4 d0       	rcall	.+424    	; 0xdc0 <__fp_cmp>
     c18:	08 f4       	brcc	.+2      	; 0xc1c <__cmpsf2+0x6>
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	08 95       	ret

00000c1e <__divsf3>:
     c1e:	0c d0       	rcall	.+24     	; 0xc38 <__divsf3x>
     c20:	0a c1       	rjmp	.+532    	; 0xe36 <__fp_round>
     c22:	02 d1       	rcall	.+516    	; 0xe28 <__fp_pscB>
     c24:	40 f0       	brcs	.+16     	; 0xc36 <__divsf3+0x18>
     c26:	f9 d0       	rcall	.+498    	; 0xe1a <__fp_pscA>
     c28:	30 f0       	brcs	.+12     	; 0xc36 <__divsf3+0x18>
     c2a:	21 f4       	brne	.+8      	; 0xc34 <__divsf3+0x16>
     c2c:	5f 3f       	cpi	r21, 0xFF	; 255
     c2e:	19 f0       	breq	.+6      	; 0xc36 <__divsf3+0x18>
     c30:	eb c0       	rjmp	.+470    	; 0xe08 <__fp_inf>
     c32:	51 11       	cpse	r21, r1
     c34:	34 c1       	rjmp	.+616    	; 0xe9e <__fp_szero>
     c36:	ee c0       	rjmp	.+476    	; 0xe14 <__fp_nan>

00000c38 <__divsf3x>:
     c38:	0f d1       	rcall	.+542    	; 0xe58 <__fp_split3>
     c3a:	98 f3       	brcs	.-26     	; 0xc22 <__divsf3+0x4>

00000c3c <__divsf3_pse>:
     c3c:	99 23       	and	r25, r25
     c3e:	c9 f3       	breq	.-14     	; 0xc32 <__divsf3+0x14>
     c40:	55 23       	and	r21, r21
     c42:	b1 f3       	breq	.-20     	; 0xc30 <__divsf3+0x12>
     c44:	95 1b       	sub	r25, r21
     c46:	55 0b       	sbc	r21, r21
     c48:	bb 27       	eor	r27, r27
     c4a:	aa 27       	eor	r26, r26
     c4c:	62 17       	cp	r22, r18
     c4e:	73 07       	cpc	r23, r19
     c50:	84 07       	cpc	r24, r20
     c52:	38 f0       	brcs	.+14     	; 0xc62 <__divsf3_pse+0x26>
     c54:	9f 5f       	subi	r25, 0xFF	; 255
     c56:	5f 4f       	sbci	r21, 0xFF	; 255
     c58:	22 0f       	add	r18, r18
     c5a:	33 1f       	adc	r19, r19
     c5c:	44 1f       	adc	r20, r20
     c5e:	aa 1f       	adc	r26, r26
     c60:	a9 f3       	breq	.-22     	; 0xc4c <__divsf3_pse+0x10>
     c62:	33 d0       	rcall	.+102    	; 0xcca <__divsf3_pse+0x8e>
     c64:	0e 2e       	mov	r0, r30
     c66:	3a f0       	brmi	.+14     	; 0xc76 <__divsf3_pse+0x3a>
     c68:	e0 e8       	ldi	r30, 0x80	; 128
     c6a:	30 d0       	rcall	.+96     	; 0xccc <__divsf3_pse+0x90>
     c6c:	91 50       	subi	r25, 0x01	; 1
     c6e:	50 40       	sbci	r21, 0x00	; 0
     c70:	e6 95       	lsr	r30
     c72:	00 1c       	adc	r0, r0
     c74:	ca f7       	brpl	.-14     	; 0xc68 <__divsf3_pse+0x2c>
     c76:	29 d0       	rcall	.+82     	; 0xcca <__divsf3_pse+0x8e>
     c78:	fe 2f       	mov	r31, r30
     c7a:	27 d0       	rcall	.+78     	; 0xcca <__divsf3_pse+0x8e>
     c7c:	66 0f       	add	r22, r22
     c7e:	77 1f       	adc	r23, r23
     c80:	88 1f       	adc	r24, r24
     c82:	bb 1f       	adc	r27, r27
     c84:	26 17       	cp	r18, r22
     c86:	37 07       	cpc	r19, r23
     c88:	48 07       	cpc	r20, r24
     c8a:	ab 07       	cpc	r26, r27
     c8c:	b0 e8       	ldi	r27, 0x80	; 128
     c8e:	09 f0       	breq	.+2      	; 0xc92 <__divsf3_pse+0x56>
     c90:	bb 0b       	sbc	r27, r27
     c92:	80 2d       	mov	r24, r0
     c94:	bf 01       	movw	r22, r30
     c96:	ff 27       	eor	r31, r31
     c98:	93 58       	subi	r25, 0x83	; 131
     c9a:	5f 4f       	sbci	r21, 0xFF	; 255
     c9c:	2a f0       	brmi	.+10     	; 0xca8 <__divsf3_pse+0x6c>
     c9e:	9e 3f       	cpi	r25, 0xFE	; 254
     ca0:	51 05       	cpc	r21, r1
     ca2:	68 f0       	brcs	.+26     	; 0xcbe <__divsf3_pse+0x82>
     ca4:	b1 c0       	rjmp	.+354    	; 0xe08 <__fp_inf>
     ca6:	fb c0       	rjmp	.+502    	; 0xe9e <__fp_szero>
     ca8:	5f 3f       	cpi	r21, 0xFF	; 255
     caa:	ec f3       	brlt	.-6      	; 0xca6 <__divsf3_pse+0x6a>
     cac:	98 3e       	cpi	r25, 0xE8	; 232
     cae:	dc f3       	brlt	.-10     	; 0xca6 <__divsf3_pse+0x6a>
     cb0:	86 95       	lsr	r24
     cb2:	77 95       	ror	r23
     cb4:	67 95       	ror	r22
     cb6:	b7 95       	ror	r27
     cb8:	f7 95       	ror	r31
     cba:	9f 5f       	subi	r25, 0xFF	; 255
     cbc:	c9 f7       	brne	.-14     	; 0xcb0 <__divsf3_pse+0x74>
     cbe:	88 0f       	add	r24, r24
     cc0:	91 1d       	adc	r25, r1
     cc2:	96 95       	lsr	r25
     cc4:	87 95       	ror	r24
     cc6:	97 f9       	bld	r25, 7
     cc8:	08 95       	ret
     cca:	e1 e0       	ldi	r30, 0x01	; 1
     ccc:	66 0f       	add	r22, r22
     cce:	77 1f       	adc	r23, r23
     cd0:	88 1f       	adc	r24, r24
     cd2:	bb 1f       	adc	r27, r27
     cd4:	62 17       	cp	r22, r18
     cd6:	73 07       	cpc	r23, r19
     cd8:	84 07       	cpc	r24, r20
     cda:	ba 07       	cpc	r27, r26
     cdc:	20 f0       	brcs	.+8      	; 0xce6 <__divsf3_pse+0xaa>
     cde:	62 1b       	sub	r22, r18
     ce0:	73 0b       	sbc	r23, r19
     ce2:	84 0b       	sbc	r24, r20
     ce4:	ba 0b       	sbc	r27, r26
     ce6:	ee 1f       	adc	r30, r30
     ce8:	88 f7       	brcc	.-30     	; 0xccc <__divsf3_pse+0x90>
     cea:	e0 95       	com	r30
     cec:	08 95       	ret

00000cee <__fixunssfsi>:
     cee:	bc d0       	rcall	.+376    	; 0xe68 <__fp_splitA>
     cf0:	88 f0       	brcs	.+34     	; 0xd14 <__fixunssfsi+0x26>
     cf2:	9f 57       	subi	r25, 0x7F	; 127
     cf4:	90 f0       	brcs	.+36     	; 0xd1a <__fixunssfsi+0x2c>
     cf6:	b9 2f       	mov	r27, r25
     cf8:	99 27       	eor	r25, r25
     cfa:	b7 51       	subi	r27, 0x17	; 23
     cfc:	a0 f0       	brcs	.+40     	; 0xd26 <__fixunssfsi+0x38>
     cfe:	d1 f0       	breq	.+52     	; 0xd34 <__fixunssfsi+0x46>
     d00:	66 0f       	add	r22, r22
     d02:	77 1f       	adc	r23, r23
     d04:	88 1f       	adc	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	1a f0       	brmi	.+6      	; 0xd10 <__fixunssfsi+0x22>
     d0a:	ba 95       	dec	r27
     d0c:	c9 f7       	brne	.-14     	; 0xd00 <__fixunssfsi+0x12>
     d0e:	12 c0       	rjmp	.+36     	; 0xd34 <__fixunssfsi+0x46>
     d10:	b1 30       	cpi	r27, 0x01	; 1
     d12:	81 f0       	breq	.+32     	; 0xd34 <__fixunssfsi+0x46>
     d14:	c3 d0       	rcall	.+390    	; 0xe9c <__fp_zero>
     d16:	b1 e0       	ldi	r27, 0x01	; 1
     d18:	08 95       	ret
     d1a:	c0 c0       	rjmp	.+384    	; 0xe9c <__fp_zero>
     d1c:	67 2f       	mov	r22, r23
     d1e:	78 2f       	mov	r23, r24
     d20:	88 27       	eor	r24, r24
     d22:	b8 5f       	subi	r27, 0xF8	; 248
     d24:	39 f0       	breq	.+14     	; 0xd34 <__fixunssfsi+0x46>
     d26:	b9 3f       	cpi	r27, 0xF9	; 249
     d28:	cc f3       	brlt	.-14     	; 0xd1c <__fixunssfsi+0x2e>
     d2a:	86 95       	lsr	r24
     d2c:	77 95       	ror	r23
     d2e:	67 95       	ror	r22
     d30:	b3 95       	inc	r27
     d32:	d9 f7       	brne	.-10     	; 0xd2a <__fixunssfsi+0x3c>
     d34:	3e f4       	brtc	.+14     	; 0xd44 <__fixunssfsi+0x56>
     d36:	90 95       	com	r25
     d38:	80 95       	com	r24
     d3a:	70 95       	com	r23
     d3c:	61 95       	neg	r22
     d3e:	7f 4f       	sbci	r23, 0xFF	; 255
     d40:	8f 4f       	sbci	r24, 0xFF	; 255
     d42:	9f 4f       	sbci	r25, 0xFF	; 255
     d44:	08 95       	ret

00000d46 <__floatunsisf>:
     d46:	e8 94       	clt
     d48:	09 c0       	rjmp	.+18     	; 0xd5c <__floatsisf+0x12>

00000d4a <__floatsisf>:
     d4a:	97 fb       	bst	r25, 7
     d4c:	3e f4       	brtc	.+14     	; 0xd5c <__floatsisf+0x12>
     d4e:	90 95       	com	r25
     d50:	80 95       	com	r24
     d52:	70 95       	com	r23
     d54:	61 95       	neg	r22
     d56:	7f 4f       	sbci	r23, 0xFF	; 255
     d58:	8f 4f       	sbci	r24, 0xFF	; 255
     d5a:	9f 4f       	sbci	r25, 0xFF	; 255
     d5c:	99 23       	and	r25, r25
     d5e:	a9 f0       	breq	.+42     	; 0xd8a <__floatsisf+0x40>
     d60:	f9 2f       	mov	r31, r25
     d62:	96 e9       	ldi	r25, 0x96	; 150
     d64:	bb 27       	eor	r27, r27
     d66:	93 95       	inc	r25
     d68:	f6 95       	lsr	r31
     d6a:	87 95       	ror	r24
     d6c:	77 95       	ror	r23
     d6e:	67 95       	ror	r22
     d70:	b7 95       	ror	r27
     d72:	f1 11       	cpse	r31, r1
     d74:	f8 cf       	rjmp	.-16     	; 0xd66 <__floatsisf+0x1c>
     d76:	fa f4       	brpl	.+62     	; 0xdb6 <__floatsisf+0x6c>
     d78:	bb 0f       	add	r27, r27
     d7a:	11 f4       	brne	.+4      	; 0xd80 <__floatsisf+0x36>
     d7c:	60 ff       	sbrs	r22, 0
     d7e:	1b c0       	rjmp	.+54     	; 0xdb6 <__floatsisf+0x6c>
     d80:	6f 5f       	subi	r22, 0xFF	; 255
     d82:	7f 4f       	sbci	r23, 0xFF	; 255
     d84:	8f 4f       	sbci	r24, 0xFF	; 255
     d86:	9f 4f       	sbci	r25, 0xFF	; 255
     d88:	16 c0       	rjmp	.+44     	; 0xdb6 <__floatsisf+0x6c>
     d8a:	88 23       	and	r24, r24
     d8c:	11 f0       	breq	.+4      	; 0xd92 <__floatsisf+0x48>
     d8e:	96 e9       	ldi	r25, 0x96	; 150
     d90:	11 c0       	rjmp	.+34     	; 0xdb4 <__floatsisf+0x6a>
     d92:	77 23       	and	r23, r23
     d94:	21 f0       	breq	.+8      	; 0xd9e <__floatsisf+0x54>
     d96:	9e e8       	ldi	r25, 0x8E	; 142
     d98:	87 2f       	mov	r24, r23
     d9a:	76 2f       	mov	r23, r22
     d9c:	05 c0       	rjmp	.+10     	; 0xda8 <__floatsisf+0x5e>
     d9e:	66 23       	and	r22, r22
     da0:	71 f0       	breq	.+28     	; 0xdbe <__floatsisf+0x74>
     da2:	96 e8       	ldi	r25, 0x86	; 134
     da4:	86 2f       	mov	r24, r22
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	2a f0       	brmi	.+10     	; 0xdb6 <__floatsisf+0x6c>
     dac:	9a 95       	dec	r25
     dae:	66 0f       	add	r22, r22
     db0:	77 1f       	adc	r23, r23
     db2:	88 1f       	adc	r24, r24
     db4:	da f7       	brpl	.-10     	; 0xdac <__floatsisf+0x62>
     db6:	88 0f       	add	r24, r24
     db8:	96 95       	lsr	r25
     dba:	87 95       	ror	r24
     dbc:	97 f9       	bld	r25, 7
     dbe:	08 95       	ret

00000dc0 <__fp_cmp>:
     dc0:	99 0f       	add	r25, r25
     dc2:	00 08       	sbc	r0, r0
     dc4:	55 0f       	add	r21, r21
     dc6:	aa 0b       	sbc	r26, r26
     dc8:	e0 e8       	ldi	r30, 0x80	; 128
     dca:	fe ef       	ldi	r31, 0xFE	; 254
     dcc:	16 16       	cp	r1, r22
     dce:	17 06       	cpc	r1, r23
     dd0:	e8 07       	cpc	r30, r24
     dd2:	f9 07       	cpc	r31, r25
     dd4:	c0 f0       	brcs	.+48     	; 0xe06 <__fp_cmp+0x46>
     dd6:	12 16       	cp	r1, r18
     dd8:	13 06       	cpc	r1, r19
     dda:	e4 07       	cpc	r30, r20
     ddc:	f5 07       	cpc	r31, r21
     dde:	98 f0       	brcs	.+38     	; 0xe06 <__fp_cmp+0x46>
     de0:	62 1b       	sub	r22, r18
     de2:	73 0b       	sbc	r23, r19
     de4:	84 0b       	sbc	r24, r20
     de6:	95 0b       	sbc	r25, r21
     de8:	39 f4       	brne	.+14     	; 0xdf8 <__fp_cmp+0x38>
     dea:	0a 26       	eor	r0, r26
     dec:	61 f0       	breq	.+24     	; 0xe06 <__fp_cmp+0x46>
     dee:	23 2b       	or	r18, r19
     df0:	24 2b       	or	r18, r20
     df2:	25 2b       	or	r18, r21
     df4:	21 f4       	brne	.+8      	; 0xdfe <__fp_cmp+0x3e>
     df6:	08 95       	ret
     df8:	0a 26       	eor	r0, r26
     dfa:	09 f4       	brne	.+2      	; 0xdfe <__fp_cmp+0x3e>
     dfc:	a1 40       	sbci	r26, 0x01	; 1
     dfe:	a6 95       	lsr	r26
     e00:	8f ef       	ldi	r24, 0xFF	; 255
     e02:	81 1d       	adc	r24, r1
     e04:	81 1d       	adc	r24, r1
     e06:	08 95       	ret

00000e08 <__fp_inf>:
     e08:	97 f9       	bld	r25, 7
     e0a:	9f 67       	ori	r25, 0x7F	; 127
     e0c:	80 e8       	ldi	r24, 0x80	; 128
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	08 95       	ret

00000e14 <__fp_nan>:
     e14:	9f ef       	ldi	r25, 0xFF	; 255
     e16:	80 ec       	ldi	r24, 0xC0	; 192
     e18:	08 95       	ret

00000e1a <__fp_pscA>:
     e1a:	00 24       	eor	r0, r0
     e1c:	0a 94       	dec	r0
     e1e:	16 16       	cp	r1, r22
     e20:	17 06       	cpc	r1, r23
     e22:	18 06       	cpc	r1, r24
     e24:	09 06       	cpc	r0, r25
     e26:	08 95       	ret

00000e28 <__fp_pscB>:
     e28:	00 24       	eor	r0, r0
     e2a:	0a 94       	dec	r0
     e2c:	12 16       	cp	r1, r18
     e2e:	13 06       	cpc	r1, r19
     e30:	14 06       	cpc	r1, r20
     e32:	05 06       	cpc	r0, r21
     e34:	08 95       	ret

00000e36 <__fp_round>:
     e36:	09 2e       	mov	r0, r25
     e38:	03 94       	inc	r0
     e3a:	00 0c       	add	r0, r0
     e3c:	11 f4       	brne	.+4      	; 0xe42 <__fp_round+0xc>
     e3e:	88 23       	and	r24, r24
     e40:	52 f0       	brmi	.+20     	; 0xe56 <__fp_round+0x20>
     e42:	bb 0f       	add	r27, r27
     e44:	40 f4       	brcc	.+16     	; 0xe56 <__fp_round+0x20>
     e46:	bf 2b       	or	r27, r31
     e48:	11 f4       	brne	.+4      	; 0xe4e <__fp_round+0x18>
     e4a:	60 ff       	sbrs	r22, 0
     e4c:	04 c0       	rjmp	.+8      	; 0xe56 <__fp_round+0x20>
     e4e:	6f 5f       	subi	r22, 0xFF	; 255
     e50:	7f 4f       	sbci	r23, 0xFF	; 255
     e52:	8f 4f       	sbci	r24, 0xFF	; 255
     e54:	9f 4f       	sbci	r25, 0xFF	; 255
     e56:	08 95       	ret

00000e58 <__fp_split3>:
     e58:	57 fd       	sbrc	r21, 7
     e5a:	90 58       	subi	r25, 0x80	; 128
     e5c:	44 0f       	add	r20, r20
     e5e:	55 1f       	adc	r21, r21
     e60:	59 f0       	breq	.+22     	; 0xe78 <__fp_splitA+0x10>
     e62:	5f 3f       	cpi	r21, 0xFF	; 255
     e64:	71 f0       	breq	.+28     	; 0xe82 <__fp_splitA+0x1a>
     e66:	47 95       	ror	r20

00000e68 <__fp_splitA>:
     e68:	88 0f       	add	r24, r24
     e6a:	97 fb       	bst	r25, 7
     e6c:	99 1f       	adc	r25, r25
     e6e:	61 f0       	breq	.+24     	; 0xe88 <__fp_splitA+0x20>
     e70:	9f 3f       	cpi	r25, 0xFF	; 255
     e72:	79 f0       	breq	.+30     	; 0xe92 <__fp_splitA+0x2a>
     e74:	87 95       	ror	r24
     e76:	08 95       	ret
     e78:	12 16       	cp	r1, r18
     e7a:	13 06       	cpc	r1, r19
     e7c:	14 06       	cpc	r1, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	f2 cf       	rjmp	.-28     	; 0xe66 <__fp_split3+0xe>
     e82:	46 95       	lsr	r20
     e84:	f1 df       	rcall	.-30     	; 0xe68 <__fp_splitA>
     e86:	08 c0       	rjmp	.+16     	; 0xe98 <__fp_splitA+0x30>
     e88:	16 16       	cp	r1, r22
     e8a:	17 06       	cpc	r1, r23
     e8c:	18 06       	cpc	r1, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	f1 cf       	rjmp	.-30     	; 0xe74 <__fp_splitA+0xc>
     e92:	86 95       	lsr	r24
     e94:	71 05       	cpc	r23, r1
     e96:	61 05       	cpc	r22, r1
     e98:	08 94       	sec
     e9a:	08 95       	ret

00000e9c <__fp_zero>:
     e9c:	e8 94       	clt

00000e9e <__fp_szero>:
     e9e:	bb 27       	eor	r27, r27
     ea0:	66 27       	eor	r22, r22
     ea2:	77 27       	eor	r23, r23
     ea4:	cb 01       	movw	r24, r22
     ea6:	97 f9       	bld	r25, 7
     ea8:	08 95       	ret

00000eaa <__gesf2>:
     eaa:	8a df       	rcall	.-236    	; 0xdc0 <__fp_cmp>
     eac:	08 f4       	brcc	.+2      	; 0xeb0 <__gesf2+0x6>
     eae:	8f ef       	ldi	r24, 0xFF	; 255
     eb0:	08 95       	ret

00000eb2 <__mulsf3>:
     eb2:	0b d0       	rcall	.+22     	; 0xeca <__mulsf3x>
     eb4:	c0 cf       	rjmp	.-128    	; 0xe36 <__fp_round>
     eb6:	b1 df       	rcall	.-158    	; 0xe1a <__fp_pscA>
     eb8:	28 f0       	brcs	.+10     	; 0xec4 <__mulsf3+0x12>
     eba:	b6 df       	rcall	.-148    	; 0xe28 <__fp_pscB>
     ebc:	18 f0       	brcs	.+6      	; 0xec4 <__mulsf3+0x12>
     ebe:	95 23       	and	r25, r21
     ec0:	09 f0       	breq	.+2      	; 0xec4 <__mulsf3+0x12>
     ec2:	a2 cf       	rjmp	.-188    	; 0xe08 <__fp_inf>
     ec4:	a7 cf       	rjmp	.-178    	; 0xe14 <__fp_nan>
     ec6:	11 24       	eor	r1, r1
     ec8:	ea cf       	rjmp	.-44     	; 0xe9e <__fp_szero>

00000eca <__mulsf3x>:
     eca:	c6 df       	rcall	.-116    	; 0xe58 <__fp_split3>
     ecc:	a0 f3       	brcs	.-24     	; 0xeb6 <__mulsf3+0x4>

00000ece <__mulsf3_pse>:
     ece:	95 9f       	mul	r25, r21
     ed0:	d1 f3       	breq	.-12     	; 0xec6 <__mulsf3+0x14>
     ed2:	95 0f       	add	r25, r21
     ed4:	50 e0       	ldi	r21, 0x00	; 0
     ed6:	55 1f       	adc	r21, r21
     ed8:	62 9f       	mul	r22, r18
     eda:	f0 01       	movw	r30, r0
     edc:	72 9f       	mul	r23, r18
     ede:	bb 27       	eor	r27, r27
     ee0:	f0 0d       	add	r31, r0
     ee2:	b1 1d       	adc	r27, r1
     ee4:	63 9f       	mul	r22, r19
     ee6:	aa 27       	eor	r26, r26
     ee8:	f0 0d       	add	r31, r0
     eea:	b1 1d       	adc	r27, r1
     eec:	aa 1f       	adc	r26, r26
     eee:	64 9f       	mul	r22, r20
     ef0:	66 27       	eor	r22, r22
     ef2:	b0 0d       	add	r27, r0
     ef4:	a1 1d       	adc	r26, r1
     ef6:	66 1f       	adc	r22, r22
     ef8:	82 9f       	mul	r24, r18
     efa:	22 27       	eor	r18, r18
     efc:	b0 0d       	add	r27, r0
     efe:	a1 1d       	adc	r26, r1
     f00:	62 1f       	adc	r22, r18
     f02:	73 9f       	mul	r23, r19
     f04:	b0 0d       	add	r27, r0
     f06:	a1 1d       	adc	r26, r1
     f08:	62 1f       	adc	r22, r18
     f0a:	83 9f       	mul	r24, r19
     f0c:	a0 0d       	add	r26, r0
     f0e:	61 1d       	adc	r22, r1
     f10:	22 1f       	adc	r18, r18
     f12:	74 9f       	mul	r23, r20
     f14:	33 27       	eor	r19, r19
     f16:	a0 0d       	add	r26, r0
     f18:	61 1d       	adc	r22, r1
     f1a:	23 1f       	adc	r18, r19
     f1c:	84 9f       	mul	r24, r20
     f1e:	60 0d       	add	r22, r0
     f20:	21 1d       	adc	r18, r1
     f22:	82 2f       	mov	r24, r18
     f24:	76 2f       	mov	r23, r22
     f26:	6a 2f       	mov	r22, r26
     f28:	11 24       	eor	r1, r1
     f2a:	9f 57       	subi	r25, 0x7F	; 127
     f2c:	50 40       	sbci	r21, 0x00	; 0
     f2e:	8a f0       	brmi	.+34     	; 0xf52 <__mulsf3_pse+0x84>
     f30:	e1 f0       	breq	.+56     	; 0xf6a <__mulsf3_pse+0x9c>
     f32:	88 23       	and	r24, r24
     f34:	4a f0       	brmi	.+18     	; 0xf48 <__mulsf3_pse+0x7a>
     f36:	ee 0f       	add	r30, r30
     f38:	ff 1f       	adc	r31, r31
     f3a:	bb 1f       	adc	r27, r27
     f3c:	66 1f       	adc	r22, r22
     f3e:	77 1f       	adc	r23, r23
     f40:	88 1f       	adc	r24, r24
     f42:	91 50       	subi	r25, 0x01	; 1
     f44:	50 40       	sbci	r21, 0x00	; 0
     f46:	a9 f7       	brne	.-22     	; 0xf32 <__mulsf3_pse+0x64>
     f48:	9e 3f       	cpi	r25, 0xFE	; 254
     f4a:	51 05       	cpc	r21, r1
     f4c:	70 f0       	brcs	.+28     	; 0xf6a <__mulsf3_pse+0x9c>
     f4e:	5c cf       	rjmp	.-328    	; 0xe08 <__fp_inf>
     f50:	a6 cf       	rjmp	.-180    	; 0xe9e <__fp_szero>
     f52:	5f 3f       	cpi	r21, 0xFF	; 255
     f54:	ec f3       	brlt	.-6      	; 0xf50 <__mulsf3_pse+0x82>
     f56:	98 3e       	cpi	r25, 0xE8	; 232
     f58:	dc f3       	brlt	.-10     	; 0xf50 <__mulsf3_pse+0x82>
     f5a:	86 95       	lsr	r24
     f5c:	77 95       	ror	r23
     f5e:	67 95       	ror	r22
     f60:	b7 95       	ror	r27
     f62:	f7 95       	ror	r31
     f64:	e7 95       	ror	r30
     f66:	9f 5f       	subi	r25, 0xFF	; 255
     f68:	c1 f7       	brne	.-16     	; 0xf5a <__mulsf3_pse+0x8c>
     f6a:	fe 2b       	or	r31, r30
     f6c:	88 0f       	add	r24, r24
     f6e:	91 1d       	adc	r25, r1
     f70:	96 95       	lsr	r25
     f72:	87 95       	ror	r24
     f74:	97 f9       	bld	r25, 7
     f76:	08 95       	ret

00000f78 <__udivmodsi4>:
     f78:	a1 e2       	ldi	r26, 0x21	; 33
     f7a:	1a 2e       	mov	r1, r26
     f7c:	aa 1b       	sub	r26, r26
     f7e:	bb 1b       	sub	r27, r27
     f80:	fd 01       	movw	r30, r26
     f82:	0d c0       	rjmp	.+26     	; 0xf9e <__udivmodsi4_ep>

00000f84 <__udivmodsi4_loop>:
     f84:	aa 1f       	adc	r26, r26
     f86:	bb 1f       	adc	r27, r27
     f88:	ee 1f       	adc	r30, r30
     f8a:	ff 1f       	adc	r31, r31
     f8c:	a2 17       	cp	r26, r18
     f8e:	b3 07       	cpc	r27, r19
     f90:	e4 07       	cpc	r30, r20
     f92:	f5 07       	cpc	r31, r21
     f94:	20 f0       	brcs	.+8      	; 0xf9e <__udivmodsi4_ep>
     f96:	a2 1b       	sub	r26, r18
     f98:	b3 0b       	sbc	r27, r19
     f9a:	e4 0b       	sbc	r30, r20
     f9c:	f5 0b       	sbc	r31, r21

00000f9e <__udivmodsi4_ep>:
     f9e:	66 1f       	adc	r22, r22
     fa0:	77 1f       	adc	r23, r23
     fa2:	88 1f       	adc	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	1a 94       	dec	r1
     fa8:	69 f7       	brne	.-38     	; 0xf84 <__udivmodsi4_loop>
     faa:	60 95       	com	r22
     fac:	70 95       	com	r23
     fae:	80 95       	com	r24
     fb0:	90 95       	com	r25
     fb2:	9b 01       	movw	r18, r22
     fb4:	ac 01       	movw	r20, r24
     fb6:	bd 01       	movw	r22, r26
     fb8:	cf 01       	movw	r24, r30
     fba:	08 95       	ret

00000fbc <__tablejump2__>:
     fbc:	ee 0f       	add	r30, r30
     fbe:	ff 1f       	adc	r31, r31
     fc0:	88 1f       	adc	r24, r24
     fc2:	8b bf       	out	0x3b, r24	; 59
     fc4:	07 90       	elpm	r0, Z+
     fc6:	f6 91       	elpm	r31, Z
     fc8:	e0 2d       	mov	r30, r0
     fca:	19 94       	eijmp

00000fcc <__itoa_ncheck>:
     fcc:	bb 27       	eor	r27, r27
     fce:	4a 30       	cpi	r20, 0x0A	; 10
     fd0:	31 f4       	brne	.+12     	; 0xfde <__itoa_ncheck+0x12>
     fd2:	99 23       	and	r25, r25
     fd4:	22 f4       	brpl	.+8      	; 0xfde <__itoa_ncheck+0x12>
     fd6:	bd e2       	ldi	r27, 0x2D	; 45
     fd8:	90 95       	com	r25
     fda:	81 95       	neg	r24
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <__utoa_common>

00000fe0 <__utoa_ncheck>:
     fe0:	bb 27       	eor	r27, r27

00000fe2 <__utoa_common>:
     fe2:	fb 01       	movw	r30, r22
     fe4:	55 27       	eor	r21, r21
     fe6:	aa 27       	eor	r26, r26
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	aa 1f       	adc	r26, r26
     fee:	a4 17       	cp	r26, r20
     ff0:	10 f0       	brcs	.+4      	; 0xff6 <__utoa_common+0x14>
     ff2:	a4 1b       	sub	r26, r20
     ff4:	83 95       	inc	r24
     ff6:	50 51       	subi	r21, 0x10	; 16
     ff8:	b9 f7       	brne	.-18     	; 0xfe8 <__utoa_common+0x6>
     ffa:	a0 5d       	subi	r26, 0xD0	; 208
     ffc:	aa 33       	cpi	r26, 0x3A	; 58
     ffe:	08 f0       	brcs	.+2      	; 0x1002 <__utoa_common+0x20>
    1000:	a9 5d       	subi	r26, 0xD9	; 217
    1002:	a1 93       	st	Z+, r26
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	79 f7       	brne	.-34     	; 0xfe6 <__utoa_common+0x4>
    1008:	b1 11       	cpse	r27, r1
    100a:	b1 93       	st	Z+, r27
    100c:	11 92       	st	Z+, r1
    100e:	cb 01       	movw	r24, r22
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <strrev>

00001012 <strrev>:
    1012:	dc 01       	movw	r26, r24
    1014:	fc 01       	movw	r30, r24
    1016:	67 2f       	mov	r22, r23
    1018:	71 91       	ld	r23, Z+
    101a:	77 23       	and	r23, r23
    101c:	e1 f7       	brne	.-8      	; 0x1016 <strrev+0x4>
    101e:	32 97       	sbiw	r30, 0x02	; 2
    1020:	04 c0       	rjmp	.+8      	; 0x102a <strrev+0x18>
    1022:	7c 91       	ld	r23, X
    1024:	6d 93       	st	X+, r22
    1026:	70 83       	st	Z, r23
    1028:	62 91       	ld	r22, -Z
    102a:	ae 17       	cp	r26, r30
    102c:	bf 07       	cpc	r27, r31
    102e:	c8 f3       	brcs	.-14     	; 0x1022 <strrev+0x10>
    1030:	08 95       	ret

00001032 <_exit>:
    1032:	f8 94       	cli

00001034 <__stop_program>:
    1034:	ff cf       	rjmp	.-2      	; 0x1034 <__stop_program>
